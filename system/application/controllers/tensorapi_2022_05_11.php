<?php
include "base.php";

class Tensorapi extends Base {
	function __construct()
	{
		parent::__construct();	
		
		$this->load->model("gpsmodel");
		$this->load->model("configmodel");
		$this->load->library('email');
		$this->load->helper('email');
		$this->load->helper('common');
		
	}
	
	// operasional location = location , location_idle, location_off -> operational_bylocation, compare_km, speed_avg_from_operasional
	// operasional breakdown = location_breakdown_view (inc getOperational_bylocation_idle, getOperational_bylocation_move)  
	//                          -> operational_bylocation_idle_breakdown , operational_bylocation_move_breakdown
	
	function lastposition($userid=0){
		date_default_timezone_set("Asia/Jakarta");
		$nowdate = date('Y-m-d H:i:s');
		$interval = 5; //sec
		$type_list = array("MV03");
		$this->db = $this->load->database("default",true);
		
		printf("===Starting cron . . . at %s \r\n", $nowdate);
		printf("======================================\r\n");
		
			//$userlist = array('4201');
			$this->db->order_by("vehicle_id","asc");
			$this->db->where("vehicle_status <>", 3);
			$this->db->where("vehicle_user_id", $userid);
			$this->db->where("vehicle_mv03 !=", "0000");
			//$this->db->where("vehicle_user_id", 4201);
			$q = $this->db->get("vehicle");
			
			if ($q->num_rows() == 0)
			{
				printf("==No Vehicles \r\n");
				return;
			}
			
			$rows = $q->result();
			$totalvehicle = count($rows);
			
			//validation session
			$get_lastsession = $this->get_lastsess($userid);
			if($get_lastsession == ""){
				printf("===GET NEW SESSION ID : \r\n");
				//$get_session = $this->loginapi_sess2($this->config->item('tensor_username'),$this->config->item('tensor_password'),$userid);  //IP baru
				$get_session = $this->loginapi_sess($this->config->item('tensor_username'),$this->config->item('tensor_password'),$userid); //IP lama
				$result_session = json_decode($get_session,true);
				$response = $result_session["StatusCode"];
				if($response == "SUCCESS"){
					$session_id = $result_session["SessionID"];
					printf("===NEW SESSION ID : %s \r\n", $session_id);
				}else{
					
					printf("===ERROR SESSION : %s \r\n", $result_session["Message"]);
				}
				
				//turn #2 
				printf("===TRUN #2 : %s \r\n", $session_id);
				break;
			}else{
				$session_id = $get_lastsession;
				printf("===SAVED SESSION ID : %s \r\n", $session_id);
			}
			
			
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
				
					//$ex_device = explode("@",$rows[$i]->vehicle_device);
					$imei = $rows[$i]->vehicle_mv03;
					//printf("===Process Check Last Info For %s %s (%d/%d) \r\n", $rows[$i]->vehicle_no, $rows[$i]->vehicle_device, $j, $totalvehicle);
					printf("===Process Check Last Info For %s (%d/%d) \r\n", $rows[$i]->vehicle_no, $j, $totalvehicle);
					//printf("===execute %s\r\n", $rows[$i]->vehicle_no);
					$get_lastposition = $this->devicestatusapi($session_id,$imei,$rows[$i]->vehicle_no);
					$j++;
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		
		$enddate = date('Y-m-d H:i:s');
		printf("===FINISH Cron start %s to %s \r\n", $nowdate, $enddate);
		//printf("============================== \r\n");
		//printf("===SLEEP.... %s s \r\n", $interval);
		//sleep($interval);
		//$this->lastposition($userid);
		
	}
	
	function alarmevidence($userid=0, $orderby="", $type="", $startdate="", $enddate=""){
		date_default_timezone_set("Asia/Jakarta");
		//variable
		$nowdate = date('Y-m-d H:i:s');
		$interval = 30; //sec
		$type_list = array("MV03");
		$report_photo = "alarm_photo";
		$report_video = "alarm_video";
		$report = "alarm_evidence_";
		$nowtime = date("Y-m-d H:i:s");
		$speed_check = 0;
		
		//get (last alarm)
		$this->db = $this->load->database("webtracking_ts", TRUE);
		$this->db->order_by("config_lastcheck","asc");
		$this->db->where("config_name","ALARM_EVIDENCE");
		$this->db->where("config_status",1);
		$this->db->where("config_user",$userid);
		$qcfg = $this->db->get("ts_config");
		$rowcfg = $qcfg->row();
		$total_cfg = count($qcfg);	
		if ($total_cfg == 0)
		{
			printf("==No Data Configuration \r\n");
			return;
		}else{
			$lastcheck = $rowcfg->config_lastcheck;
			if($type == "report")
			{
				if ($startdate == "") {
					$startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
					$datefilename = date("Ymd", strtotime("yesterday"));
					$month = date("F", strtotime("yesterday"));
					$year = date("Y", strtotime("yesterday"));
				}
				
				if ($startdate != "")
				{
					$datefilename = date("Ymd", strtotime($startdate));     
					$startdate = date("Y-m-d 00:00:00", strtotime($startdate));
					$month = date("F", strtotime($startdate));
					$year = date("Y", strtotime($startdate));
				}
				
				if ($enddate != "")
				{
					$enddate = date("Y-m-d 23:59:59", strtotime($enddate));
				}
				
				if ($enddate == "") {
					$enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
				}
				
				$sdate = date("Y-m-d", strtotime($startdate));
				$shour = date("H:i:s", strtotime($startdate));
				
				$edate = date("Y-m-d", strtotime($enddate));
				$ehour = date("H:i:s", strtotime($enddate));
			
			}
			else if($type == "today")
			{
				if ($startdate == "") {
					$startdate = date("Y-m-d 00:00:00");
					$datefilename = date("Ymd");
					$month = date("F");
					$year = date("Y");
					$speed_check = 1;
				}
				
				if ($startdate != "")
				{
					$datefilename = date("Ymd", strtotime($startdate));     
					$startdate = date("Y-m-d 00:00:00", strtotime($startdate));
					$month = date("F", strtotime($startdate));
					$year = date("Y", strtotime($startdate));
				}
				
				if ($enddate != "")
				{
					$enddate = date("Y-m-d 23:59:59", strtotime($enddate));
				}
				
				if ($enddate == "") {
					$enddate = date("Y-m-d 23:59:59");
				}
				
				$sdate = date("Y-m-d", strtotime($startdate));
				$shour = date("H:i:s", strtotime($startdate));
				
				$edate = date("Y-m-d", strtotime($enddate));
				$ehour = date("H:i:s", strtotime($enddate));

			}
			else
			{
				$sdate = date("Y-m-d", strtotime($lastcheck));
				$shour = date("H:i:s", strtotime($lastcheck));
				
				
				$edate = date("Y-m-d", strtotime($nowtime));
				$ehour = date("H:i:s", strtotime($nowtime));
			}
			
		}
		
		$month = date("F", strtotime($sdate));
		$year = date("Y", strtotime($sdate));
		
		$this->db = $this->load->database("default",true);
		
		printf("===Starting cron . . . at %s \r\n", $nowdate);
		printf("======================================\r\n");
		printf("===CONFIG DATETIME = %s \r\n", $sdate." ".$shour." s/d ".$edate." ".$ehour);
	
		switch ($month)
		{
			case "January":
            $dbtable_photo = $report_photo."januari_".$year;
			$dbtable_video = $report_video."januari_".$year;
			$dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable_photo = $report_photo."februari_".$year;
			$dbtable_video = $report_video."februari_".$year;
			$dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable_photo = $report_photo."maret_".$year;
			$dbtable_video = $report_video."maret_".$year;
			$dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable_photo = $report_photo."april_".$year;
			$dbtable_video = $report_video."april_".$year;
			$dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable_photo = $report_photo."mei_".$year;
			$dbtable_video = $report_video."mei_".$year;
			$dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable_photo = $report_photo."juni_".$year;
			$dbtable_video = $report_video."juni_".$year;
			$dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable_photo = $report_photo."juli_".$year;
			$dbtable_video = $report_video."juli_".$year;
			$dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable_photo = $report_photo."agustus_".$year;
			$dbtable_video = $report_video."agustus_".$year;
			$dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable_photo = $report_photo."september_".$year;
			$dbtable_video = $report_video."september_".$year;
			$dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable_photo = $report_photo."oktober_".$year;
			$dbtable_video = $report_video."oktober_".$year;
			$dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable_photo = $report_photo."november_".$year;
			$dbtable_video = $report_video."november_".$year;
			$dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable_photo = $report_photo."desember_".$year;
			$dbtable_video = $report_video."desember_".$year;
			$dbtable = $report."desember_".$year;
			break;
		}
        
			//$userlist = array('4201');
			$this->db = $this->load->database("default", TRUE);
			$this->db->order_by("vehicle_id",$orderby);
			$this->db->where("vehicle_status <>", 3);
			$this->db->where("vehicle_user_id", $userid);
			$this->db->where("vehicle_mv03 != ","0000");
			$this->db->where("vehicle_mv03 != ","");
				
			$q = $this->db->get("vehicle");
			
			if ($q->num_rows() == 0)
			{
				printf("==No Vehicles \r\n");
				return;
			}
			
			$rows = $q->result();
			$totalvehicle = count($rows);
			
			//validation session
			/* $get_lastsession = $this->get_lastsess($userid);
			printf("===LAST SESSION : %s \r\n", $get_lastsession);
			$session_id = $get_lastsession; */
			
			//get one time token
			$session_id = $this->getOneTimetokenAPI("temanindobara","123456","4408");
			printf("===ONETIME SESSION : %s \r\n", $session_id);
			
			//insert db photo
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
					$mediatype = 0; //0 photo , 1: video
					$ex_device = explode("@",$rows[$i]->vehicle_device);
					$imei = $rows[$i]->vehicle_mv03;
					$vehicleid = $imei;
					
					printf("===Get media PHOTO Vehicle %s %s (%d/%d) \r\n", $rows[$i]->vehicle_no, $rows[$i]->vehicle_device, $j, $totalvehicle);
					
					$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$imei,$userid);
					
					$result_lastalarm  = json_decode($get_lastalarm,true);
					$response = $result_lastalarm["StatusCode"];
					
					if($response == "SUCCESS"){
						$infos = $result_lastalarm["Data"]["infos"];
						$total_infos = count($infos);
						//print_r($infos);
						for ($z=0;$z<$total_infos;$z++){
							
							if($infos[$z]['mediaType'] == 0){
								$ex_time = $infos[$z]['fileTime'];
							}else{
								$ex_time = $infos[$z]['fileSTime'];
							}
								$nophoto = $z+1;
							
							//CHECK last data
							// idno, alarmtype,media,starttime
							$this->dbreport = $this->load->database("tensor_report",TRUE);
							$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
							$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
							$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
							$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
							$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
							$q_report = $this->dbreport->get($dbtable);
							$rows_report = $q_report->result();
							$total_report = count($rows_report);
							
							//jika tidak ada proses lanjut
							if($total_report == 0){
								$return = 0;
								printf("===PROSES %s of %s \r\n", $nophoto, $total_infos);
							}
							//jika sudah ada skip
							else
							{
								$return = 1;
								printf("===SUDAH DIPROSES %s of %s \r\n", $nophoto, $total_infos);
							}
							
							if($return == 0)
							{
								//insert into report
								
								$geofence_type = "";
								if($infos[$z]['position'] != ""){
									$ex_coord = explode(",",$infos[$z]['position']);
									$lat_coord = "-".$ex_coord[0];
									$lat_coord = str_replace("--", "-", $lat_coord);
									$lng_coord = $ex_coord[1];
									
									$coord = $lat_coord.",".$lng_coord;
									$position = $this->getPosition_other($lng_coord, $lat_coord);
									if(isset($position)){
										$ex_position = explode(",",$position->display_name);
										if(count($ex_position)>0){
											$position_name = $ex_position[0];
										}else{
											$position_name = $ex_position[0];
										}
									}else{
										$position_name = $position->display_name;
									}
								
								}else{
									$lat_coord = "";
									$lng_coord = "";
									$geofence_start = "";
									$coord = "";
									$position_name = "";
								}
								
								if($infos[$z]['mediaType'] == 0){
									$ex_time = $infos[$z]['fileTime'];
									$ex_time2 = $ex_time;
									$duration_sec = $ex_time2 - $ex_time;
								}else{
									$ex_time = $infos[$z]['fileSTime'];
									$ex_time2 = $infos[$z]['fileETime'];
									$duration_sec = $ex_time2 - $ex_time;
								}
								$ex_sdate = date("Y-m-d H:i:s", (($ex_time/1000)));
								$ex_sdate_sec = strtotime($ex_sdate . "+1hours");
								$ex_sdate_wita = date("Y-m-d H:i:s",$ex_sdate_sec);
								$ex_sdate_utc = date("Y-m-d H:i:s",strtotime($ex_sdate_wita . "-7hours"));
							
								$dataalarm = explode("|",$this->getalarmname($infos[$z]['alarmType'])); 
								$dataalarm_name = $dataalarm[0];
								$dataalarm_level = $dataalarm[1];
								$dataalarm_group = $dataalarm[2];
								
								//exit();
									unset($datainsert);
									$datainsert["alarm_report_imei"] = $infos[$z]['devIdno'];
									$datainsert["alarm_report_vehicle_id"] = $ex_device[0];
									$datainsert["alarm_report_vehicle_user_id"] = $rows[$i]->vehicle_user_id;
									$datainsert["alarm_report_vehicle_no"] = $rows[$i]->vehicle_no;
									$datainsert["alarm_report_vehicle_name"] = $rows[$i]->vehicle_name;
									$datainsert["alarm_report_vehicle_type"] = $rows[$i]->vehicle_type;
									$datainsert["alarm_report_vehicle_company"] = $rows[$i]->vehicle_company;
									$datainsert["alarm_report_type"] = $infos[$z]['alarmType'];
									$datainsert["alarm_report_name"] = $dataalarm_name;
									$datainsert["alarm_report_level"] = $dataalarm_level;
									$datainsert["alarm_report_group"] = $dataalarm_group;
									$datainsert["alarm_report_media"] = $infos[$z]['mediaType'];
									$datainsert["alarm_report_channel"] = $infos[$z]['channel'];
									$datainsert["alarm_report_gpsstatus"] = $infos[$z]['gpsstatus'];
									//$datainsert["alarm_report_speed"] = $speed_bygps;
									//$datainsert["alarm_report_speed_status"] = $speed_status;
									//$datainsert["alarm_report_speed_time"] = $speed_bygps_time;
									$datainsert["alarm_report_start_time"] = date("Y-m-d H:i:s", (($ex_time/1000)));
									$datainsert["alarm_report_end_time"] = date("Y-m-d H:i:s", (($ex_time2/1000)));
									$datainsert["alarm_report_update_time"] = date("Y-m-d H:i:s", (($infos[$z]['updateTime']/1000)));
									$datainsert["alarm_report_duration_sec"] = $duration_sec;
									$datainsert["alarm_report_location_start"] = $position_name;
									$datainsert["alarm_report_location_end"] = $position_name;
									//$datainsert["alarm_report_geofence_start"] = $geofence_start;
									//$datainsert["alarm_report_geofence_end"] = $geofence_start;
									$datainsert["alarm_report_coordinate_start"] = $coord;
									$datainsert["alarm_report_coordinate_end"] = $coord;
									//$datainsert["alarm_report_geofence_type"] = $geofence_type;
									//$datainsert["alarm_report_jalur"] = $jalur_bygps;
									$datainsert["alarm_report_size"] = $infos[$z]['fileSize'];
									$datainsert["alarm_report_downloadurl"] = $infos[$z]['downloadUrl'];
									$datainsert["alarm_report_path"] = $infos[$z]['filePath'];
									$datainsert["alarm_report_fileurl"] = $infos[$z]['fileUrl'];
									
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
								$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									$this->dbreport->insert($dbtable,$datainsert);
									printf("===OK \r\n");
									printf("====== ======\r\n");
								}
								//jika sudah ada skip
								else
								{
									if($speed_check == 1){
										$this->dbreport = $this->load->database("tensor_report",TRUE);
										$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
										$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
										$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
										$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
										$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
										$this->dbreport->update($dbtable,$datainsert);
										printf("===UPDATE \r\n");
										printf("====== ======\r\n");
									}else{
										printf("===SKIP \r\n");
										printf("====== ======\r\n");
									}
									
									
									
								}
									
							}//end return 
						}//end master looping PHOTO
						
					
					}else{
						
						printf("===ERROR : %s \r\n", $result_lastalarm["Message"]);
					}
					$j++;
			}
			
			//insert db video
			$k = 1;
			for ($m=0;$m<count($rows);$m++)
			{
					$mediatype = 1; //0 photo , 1: video
					$ex_device = explode("@",$rows[$m]->vehicle_device);
					$imei = $rows[$m]->vehicle_mv03;
					$vehicleid = $imei;
					printf("\r\n");
					printf("===Get Media VIDEO Vehicle %s %s (%d/%d) \r\n", $rows[$m]->vehicle_no, $rows[$m]->vehicle_device, $k, $totalvehicle);
					$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$imei,$userid);
					
					$result_lastalarm  = json_decode($get_lastalarm,true);
					$response = $result_lastalarm["StatusCode"];
					
					if($response == "SUCCESS"){
						$infos = $result_lastalarm["Data"]["infos"];
						$total_infos = count($infos);
						
						for ($y=0;$y<$total_infos;$y++){
							
								if($infos[$y]['mediaType'] == 0){
									$ex_time = $infos[$y]['fileTime'];
								}else{
									$ex_time = $infos[$y]['fileSTime'];
								}
								
								$novideo = $y+1;
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									$return = 0;
									printf("===PROSES %s of %s \r\n", $novideo, $total_infos);
								}
								//jika sudah ada skip
								else
								{
									$return = 1;
									printf("===SUDAH DIPROSES %s of %s \r\n", $novideo, $total_infos);
								}
								
							if($return == 0){
								
								
								//insert into report
								if($infos[$y]['position'] != ""){
									$ex_coord = explode(",",$infos[$y]['position']);
									$lat_coord = $ex_coord[0];
									$lat_coord = str_replace("--", "-", $lat_coord);
									$lng_coord = $ex_coord[1];
									$coord = $lat_coord.",".$lng_coord;
									
									$position = $this->getPosition_other($lng_coord, $lat_coord);
									if(isset($position)){
										$ex_position = explode(",",$position->display_name);
										if(count($ex_position)>0){
											$position_name = $ex_position[0];
										}else{
											$position_name = $ex_position[0];
										}
									}else{
										$position_name = $position->display_name;
									}
									
								}else{
									$lat_coord = "";
									$lng_coord = "";
									$geofence_start = "";
									$coord = "";
									$position_name = "";
								}
								
								if($infos[$y]['mediaType'] == 0){
									$ex_time = $infos[$y]['fileTime'];
									$ex_time2 = $ex_time;
									$duration_sec = $ex_time2 - $ex_time;
								}else{
									$ex_time = $infos[$y]['fileSTime'];
									$ex_time2 = $infos[$y]['fileETime'];
									$duration_sec = $ex_time2 - $ex_time;
								}
								
								$dataalarm_vid = explode("|",$this->getalarmname($infos[$y]['alarmType'])); 
								$dataalarm_name_vid = $dataalarm[0];
								$dataalarm_level_vid = $dataalarm[1];
								$dataalarm_group_vid = $dataalarm[2];
								
									unset($datainsert);
									$datainsert["alarm_report_imei"] = $infos[$y]['devIdno'];
									$datainsert["alarm_report_vehicle_id"] = $ex_device[0];
									$datainsert["alarm_report_vehicle_no"] = $rows[$m]->vehicle_no;
									$datainsert["alarm_report_vehicle_name"] = $rows[$m]->vehicle_name;
									$datainsert["alarm_report_vehicle_type"] = $rows[$m]->vehicle_type;
									$datainsert["alarm_report_type"] = $infos[$y]['alarmType'];
									$datainsert["alarm_report_name"] = $dataalarm_name_vid;
									$datainsert["alarm_report_level"] = $dataalarm_level_vid;
									$datainsert["alarm_report_group"] = $dataalarm_group_vid;
									$datainsert["alarm_report_media"] = $infos[$y]['mediaType'];
									$datainsert["alarm_report_channel"] = $infos[$y]['channel'];
									$datainsert["alarm_report_gpsstatus"] = $infos[$y]['gpsstatus'];
									$datainsert["alarm_report_start_time"] = date("Y-m-d H:i:s", (($ex_time/1000)));
									$datainsert["alarm_report_end_time"] = date("Y-m-d H:i:s", (($ex_time2/1000)));
									$datainsert["alarm_report_update_time"] = date("Y-m-d H:i:s", (($infos[$y]['updateTime']/1000)));
									$datainsert["alarm_report_duration_sec"] = $duration_sec/1000;
									$datainsert["alarm_report_location_start"] = $position_name;
									$datainsert["alarm_report_location_end"] = $position_name;
									//$datainsert["alarm_report_geofence_start"] = $geofence_start;
									//$datainsert["alarm_report_geofence_end"] = $geofence_start;
									$datainsert["alarm_report_coordinate_start"] = $coord;
									$datainsert["alarm_report_coordinate_end"] = $coord;
									$datainsert["alarm_report_size"] = $infos[$y]['fileSize'];
									$datainsert["alarm_report_downloadurl"] = $infos[$y]['downloadUrl'];
									$datainsert["alarm_report_path"] = $infos[$y]['filePath'];
									$datainsert["alarm_report_fileurl"] = $infos[$y]['fileUrl'];
									
									
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									
									$this->dbreport = $this->load->database("tensor_report",TRUE);
									$this->dbreport->insert($dbtable,$datainsert);
									printf("OK|");
								}
								//jika sudah ada skip
								else
								{
									$this->dbreport = $this->load->database("tensor_report",TRUE);
									$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
									$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
									$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
									$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
									$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
									$this->dbreport->update($dbtable,$datainsert);
									printf(".");
								}
								
							}
							
						} //end master looping VIDEO
						
					}else{
						
						printf("===ERROR : %s \r\n", $result_lastalarm["Message"]);
					}
					$k++;
			}
			
			printf("\r\n");
			
			//jika bukan cron report
			if($type == "")
			{
				//update config last check
				unset($datalastcheck);
				
				$datalastcheck["config_lastcheck"] = $nowtime;
				$this->db = $this->load->database("webtracking_ts",TRUE);
				$this->db->where("config_name", "ALARM_EVIDENCE");
				$this->db->where("config_user", $userid);
				$this->db->where("config_status",1);
				$this->db->update("ts_config",$datalastcheck);
									
				printf("UPDATE CONFIG TIME OKE \r\n ");
				
				$this->db->close();
				$this->db->cache_delete_all();
				
				$enddate = date('Y-m-d H:i:s');
				//printf("===FINISH Cron start %s to %s \r\n", $nowdate, $enddate);
			}
			
			printf("========FINISH============ \r\n");
		
	}
	
	function lastalarm($userid=0, $type="", $startdate="", $enddate=""){
		date_default_timezone_set("Asia/Jakarta");
		//variable
		$nowdate = date('Y-m-d H:i:s');
		$interval = 30; //sec
		$type_list = array("MV03");
		$report_photo = "alarm_photo";
		$report_video = "alarm_video";
		$report = "alarm_";
		$nowtime = date("Y-m-d H:i:s");
		$speed_check = 0;
		
		//get (last alarm)
		$this->db = $this->load->database("webtracking_ts", TRUE);
		$this->db->order_by("config_lastcheck","asc");
		$this->db->where("config_name","ALARM");
		$this->db->where("config_status",1);
		$this->db->where("config_user",$userid);
		$qcfg = $this->db->get("ts_config");
		$rowcfg = $qcfg->row();
		$total_cfg = count($qcfg);	
		if ($total_cfg == 0)
		{
			printf("==No Data Configuration \r\n");
			return;
		}else{
			$lastcheck = $rowcfg->config_lastcheck;
			if($type == "report")
			{
				if ($startdate == "") {
					$startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
					$datefilename = date("Ymd", strtotime("yesterday"));
					$month = date("F", strtotime("yesterday"));
					$year = date("Y", strtotime("yesterday"));
				}
				
				if ($startdate != "")
				{
					$datefilename = date("Ymd", strtotime($startdate));     
					$startdate = date("Y-m-d 00:00:00", strtotime($startdate));
					$month = date("F", strtotime($startdate));
					$year = date("Y", strtotime($startdate));
				}
				
				if ($enddate != "")
				{
					$enddate = date("Y-m-d 23:59:59", strtotime($enddate));
				}
				
				if ($enddate == "") {
					$enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
				}
				
				$sdate = date("Y-m-d", strtotime($startdate));
				$shour = date("H:i:s", strtotime($startdate));
				
				$edate = date("Y-m-d", strtotime($enddate));
				$ehour = date("H:i:s", strtotime($enddate));
			
			}
			else if($type == "today")
			{
				if ($startdate == "") {
					$startdate = date("Y-m-d 00:00:00");
					$datefilename = date("Ymd");
					$month = date("F");
					$year = date("Y");
					$speed_check = 1;
				}
				
				if ($startdate != "")
				{
					$datefilename = date("Ymd", strtotime($startdate));     
					$startdate = date("Y-m-d 00:00:00", strtotime($startdate));
					$month = date("F", strtotime($startdate));
					$year = date("Y", strtotime($startdate));
				}
				
				if ($enddate != "")
				{
					$enddate = date("Y-m-d 23:59:59", strtotime($enddate));
				}
				
				if ($enddate == "") {
					$enddate = date("Y-m-d 23:59:59");
				}
				
				$sdate = date("Y-m-d", strtotime($startdate));
				$shour = date("H:i:s", strtotime($startdate));
				
				$edate = date("Y-m-d", strtotime($enddate));
				$ehour = date("H:i:s", strtotime($enddate));

			}
			else
			{
				$sdate = date("Y-m-d", strtotime($lastcheck));
				$shour = date("H:i:s", strtotime($lastcheck));
				
				
				$edate = date("Y-m-d", strtotime($nowtime));
				$ehour = date("H:i:s", strtotime($nowtime));
			}
			
		}
		
		$month = date("F", strtotime($sdate));
		$year = date("Y", strtotime($sdate));
		
		$this->db = $this->load->database("default",true);
		
		printf("===Starting cron . . . at %s \r\n", $nowdate);
		printf("======================================\r\n");
		printf("===CONFIG DATETIME = %s \r\n", $sdate." ".$shour." s/d ".$edate." ".$ehour);
	
		switch ($month)
		{
			case "January":
            $dbtable_photo = $report_photo."januari_".$year;
			$dbtable_video = $report_video."januari_".$year;
			$dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable_photo = $report_photo."februari_".$year;
			$dbtable_video = $report_video."februari_".$year;
			$dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable_photo = $report_photo."maret_".$year;
			$dbtable_video = $report_video."maret_".$year;
			$dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable_photo = $report_photo."april_".$year;
			$dbtable_video = $report_video."april_".$year;
			$dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable_photo = $report_photo."mei_".$year;
			$dbtable_video = $report_video."mei_".$year;
			$dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable_photo = $report_photo."juni_".$year;
			$dbtable_video = $report_video."juni_".$year;
			$dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable_photo = $report_photo."juli_".$year;
			$dbtable_video = $report_video."juli_".$year;
			$dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable_photo = $report_photo."agustus_".$year;
			$dbtable_video = $report_video."agustus_".$year;
			$dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable_photo = $report_photo."september_".$year;
			$dbtable_video = $report_video."september_".$year;
			$dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable_photo = $report_photo."oktober_".$year;
			$dbtable_video = $report_video."oktober_".$year;
			$dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable_photo = $report_photo."november_".$year;
			$dbtable_video = $report_video."november_".$year;
			$dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable_photo = $report_photo."desember_".$year;
			$dbtable_video = $report_video."desember_".$year;
			$dbtable = $report."desember_".$year;
			break;
		}
        
			//$userlist = array('4201');
			$this->db = $this->load->database("default", TRUE);
			$this->db->order_by("vehicle_id","asc");
			$this->db->where("vehicle_status <>", 3);
			$this->db->where("vehicle_user_id", $userid);
			$this->db->where("vehicle_mv03 != ","0000");
			$this->db->where("vehicle_mv03 != ","");
			//$this->db->where("vehicle_mv03","053810699586");
			//$this->db->where("vehicle_device","869926046487043@VT200");
			
			$q = $this->db->get("vehicle");
			
			if ($q->num_rows() == 0)
			{
				printf("==No Vehicles \r\n");
				return;
			}
			
			$rows = $q->result();
			$totalvehicle = count($rows);
			
			//validation session
			$get_lastsession = $this->get_lastsess($userid);
			//$get_lastsession = $this->get_lastsess("4203");
			printf("===LAST SESSION : %s \r\n", $get_lastsession);
			
			if($get_lastsession == ""){
				printf("===GET NEW SESSION ID : \r\n");
				//$get_session = $this->loginapi_sess($this->config->item('tensor_username'),$this->config->item('tensor_password'),$userid);
				$get_session = $this->loginapi_sess("temanindobara","123456",$userid);
				$result_session = json_decode($get_session,true);
				$response = $result_session["StatusCode"];
				if($response == "SUCCESS"){
					$session_id = $result_session["SessionID"];
					printf("===NEW SESSION ID : %s \r\n", $session_id);
				}else{
					
					printf("===ERROR SESSION : %s \r\n", $result_session["Message"]);
				}
				
				//turn #2 
				printf("===TRUN #2 : %s \r\n", $session_id);
				//break;
				$this->lastalarm($userid);
			}else{
				$session_id = $get_lastsession;
				printf("===SAVED SESSION ID : %s \r\n", $session_id);
			}
			
			//insert db photo
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
					$mediatype = 0; //0 photo , 1: video
					$ex_device = explode("@",$rows[$i]->vehicle_device);
					$imei = $rows[$i]->vehicle_mv03;
					$vehicleid = $imei;
					
					printf("===Get media PHOTO Vehicle %s %s (%d/%d) \r\n", $rows[$i]->vehicle_no, $rows[$i]->vehicle_device, $j, $totalvehicle);
					
					//$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$rows[$i]->vehicle_no,$userid);
					$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$imei,$userid);
					
					$result_lastalarm  = json_decode($get_lastalarm,true);
					$response = $result_lastalarm["StatusCode"];
					
					if($response == "SUCCESS"){
						$infos = $result_lastalarm["Data"]["infos"];
						$total_infos = count($infos);
						
						for ($z=0;$z<$total_infos;$z++){
							
							if($infos[$z]['mediaType'] == 0){
								$ex_time = $infos[$z]['fileTime'];
							}else{
								$ex_time = $infos[$z]['fileSTime'];
							}
								$nophoto = $z+1;
							
							//CHECK last data
							// idno, alarmtype,media,starttime
							$this->dbreport = $this->load->database("tensor_report",TRUE);
							$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
							$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
							$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
							$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
							$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
							$q_report = $this->dbreport->get($dbtable);
							$rows_report = $q_report->result();
							$total_report = count($rows_report);
							
							//jika tidak ada proses lanjut
							if($total_report == 0){
								$return = 0;
								printf("===PROSES %s of %s \r\n", $nophoto, $total_infos);
							}
							//jika sudah ada skip
							else
							{
								$return = 1;
								printf("===SUDAH DIPROSES %s of %s \r\n", $nophoto, $total_infos);
							}
							
							if($return == 0)
							{
								//insert into report
								
								$geofence_type = "";
								if($infos[$z]['position'] != ""){
									$ex_coord = explode(",",$infos[$z]['position']);
									$lat_coord = "-".$ex_coord[0];
									$lat_coord = str_replace("--", "-", $lat_coord);
									$lng_coord = $ex_coord[1];
									//$geofence_start = $this->getGeofence_location_other($lng_coord, $lat_coord, $rows[$i]->vehicle_user_id);
									$rowgeofence = $this->getGeofence_location_live($lng_coord, $lat_coord, $rows[$i]->vehicle_dbname_live);
									
									$jalur = "";
									if($rowgeofence == false){
										$geofence_id = 0;
										$geofence_name = "";
										$geofence_speed = 0;
										$geofence_speed_muatan = "";
										$geofence_type = "";
										$geofence_speed_limit = 0;
									
									}else{
										$geofence_id = $rowgeofence->geofence_id;
										$geofence_name = $rowgeofence->geofence_name;
										$geofence_speed = $rowgeofence->geofence_speed;
										$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
										$geofence_type = $rowgeofence->geofence_type;
										
										if($jalur == "muatan"){
											$geofence_speed_limit = $geofence_speed_muatan;
										}else if($jalur == "kosongan"){
											$geofence_speed_limit = $geofence_speed;
										}else{
											$geofence_speed_limit = 0;
										}
									}
									$geofence_start = $geofence_name;
									printf("===Geofence kph %s \r\n", $geofence_start);
									printf("===Geofence type %s \r\n", $geofence_type);
									$coord = $lat_coord.",".$lng_coord;
									$position = $this->getPosition_other($lng_coord, $lat_coord);
									if(isset($position)){
										$ex_position = explode(",",$position->display_name);
										if(count($ex_position)>0){
											$position_name = $ex_position[0];
										}else{
											$position_name = $ex_position[0];
										}
									}else{
										$position_name = $position->display_name;
									}
								
								}else{
									$lat_coord = "";
									$lng_coord = "";
									$geofence_start = "";
									$coord = "";
									$position_name = "";
								}
								
								if($infos[$z]['mediaType'] == 0){
									$ex_time = $infos[$z]['fileTime'];
									$ex_time2 = $ex_time;
									$duration_sec = $ex_time2 - $ex_time;
								}else{
									$ex_time = $infos[$z]['fileSTime'];
									$ex_time2 = $infos[$z]['fileETime'];
									$duration_sec = $ex_time2 - $ex_time;
								}
								$ex_sdate = date("Y-m-d H:i:s", (($ex_time/1000)));
								$ex_sdate_sec = strtotime($ex_sdate . "+1hours");
								$ex_sdate_wita = date("Y-m-d H:i:s",$ex_sdate_sec);
								$ex_sdate_utc = date("Y-m-d H:i:s",strtotime($ex_sdate_wita . "-7hours"));
							
								$limittime = 30; //batas wajar selisih detik
								$limitspeed = 5; //batas wajar speed 5 kph
								$rowgps = $this->getDataGPS($rows[$i], $ex_sdate_utc);
								printf("===GET TIME <= %s \r\n", $ex_sdate_utc);
								$delta = 0;
								
								if(count($rowgps)>0){
									$speed_bygps = round($rowgps[0]->gps_speed*1.852,0);
									$time_bygps = strtotime($rowgps[0]->gps_time);
									$time_byalarm =  strtotime($ex_sdate_utc);
									$delta = $time_byalarm - $time_bygps;
									$speed_bygps_time = date("Y-m-d H:i:s", strtotime($rowgps[0]->gps_time . "+7hours"));
									
									printf("===GPS TIME = %s \r\n", $rowgps[0]->gps_time);
									printf("===GPS SPEED kph %s \r\n", $speed_bygps);
									printf("===Time GPS & Time Alarm %s %s : DELTA : %s \r\n", $time_bygps, $time_byalarm, $delta);
									
									$jalur_gps = $this->get_jalurname_new($rowgps[0]->gps_course);
									$jalur_bygps = $jalur_gps;
									printf("===Jalur : %s : %s  \r\n", $jalur_gps, $rowgps[0]->gps_course);
									
								}
								else
								{
									$speed_bygps = 0;
									$speed_status = 0; //invalid
									$speed_bygps_time = "";
									printf("===NO DATA GPS %s \r\n", $rows[$i]->vehicle_no);
									$jalur_bygps = "";
								}
								
								if(($delta <= $limittime) && ($speed_bygps >= $limitspeed)){
									$speed_status = 1; //valid
								}else{
									$speed_status = 0; //invalid
									if($infos[$z]['gpsstatus'] != ""){
										$reportdetaildecode = explode("|", $infos[$z]['gpsstatus']);
										$speed_byalarm = number_format($reportdetaildecode[4]/10, 0, '.', '');
										$speed_bygps = $speed_byalarm;
										printf("===SPEED by Alarm %s \r\n", $speed_bygps);
										
									}else{
										printf("===No Data API GPSstatus \r\n");
									}
									
									$speed_status = 1;
									
								}
								
								//hanya di geofence roud
								if($geofence_type != "road"){
									$speed_status = 0; //invalid
								}
								
								//
								$dataalarm = explode("|",$this->getalarmname($infos[$z]['alarmType'])); 
								$dataalarm_name = $dataalarm[0];
								$dataalarm_level = $dataalarm[1];
								$dataalarm_group = $dataalarm[2];
								
								printf("===SPEED STATUS : %s \r\n", $speed_status);
								//exit();
									unset($datainsert);
									$datainsert["alarm_report_imei"] = $infos[$z]['devIdno'];
									$datainsert["alarm_report_vehicle_id"] = $ex_device[0];
									$datainsert["alarm_report_vehicle_user_id"] = $rows[$i]->vehicle_user_id;
									$datainsert["alarm_report_vehicle_no"] = $rows[$i]->vehicle_no;
									$datainsert["alarm_report_vehicle_name"] = $rows[$i]->vehicle_name;
									$datainsert["alarm_report_vehicle_type"] = $rows[$i]->vehicle_type;
									$datainsert["alarm_report_vehicle_company"] = $rows[$i]->vehicle_company;
									$datainsert["alarm_report_type"] = $infos[$z]['alarmType'];
									$datainsert["alarm_report_name"] = $dataalarm_name;
									$datainsert["alarm_report_level"] = $dataalarm_level;
									$datainsert["alarm_report_group"] = $dataalarm_group;
									$datainsert["alarm_report_media"] = $infos[$z]['mediaType'];
									$datainsert["alarm_report_channel"] = $infos[$z]['channel'];
									$datainsert["alarm_report_gpsstatus"] = $infos[$z]['gpsstatus'];
									$datainsert["alarm_report_speed"] = $speed_bygps;
									$datainsert["alarm_report_speed_status"] = $speed_status;
									$datainsert["alarm_report_speed_time"] = $speed_bygps_time;
									$datainsert["alarm_report_start_time"] = date("Y-m-d H:i:s", (($ex_time/1000)));
									$datainsert["alarm_report_end_time"] = date("Y-m-d H:i:s", (($ex_time2/1000)));
									$datainsert["alarm_report_update_time"] = date("Y-m-d H:i:s", (($infos[$z]['updateTime']/1000)));
									$datainsert["alarm_report_duration_sec"] = $duration_sec;
									$datainsert["alarm_report_location_start"] = $position_name;
									$datainsert["alarm_report_location_end"] = $position_name;
									$datainsert["alarm_report_geofence_start"] = $geofence_start;
									$datainsert["alarm_report_geofence_end"] = $geofence_start;
									$datainsert["alarm_report_coordinate_start"] = $coord;
									$datainsert["alarm_report_coordinate_end"] = $coord;
									$datainsert["alarm_report_geofence_type"] = $geofence_type;
									$datainsert["alarm_report_jalur"] = $jalur_bygps;
									$datainsert["alarm_report_size"] = $infos[$z]['fileSize'];
									$datainsert["alarm_report_downloadurl"] = $infos[$z]['downloadUrl'];
									$datainsert["alarm_report_path"] = $infos[$z]['filePath'];
									$datainsert["alarm_report_fileurl"] = $infos[$z]['fileUrl'];
									
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
								$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									$this->dbreport->insert($dbtable,$datainsert);
									printf("===OK \r\n");
									printf("====== ======\r\n");
								}
								//jika sudah ada skip
								else
								{
									if($speed_check == 1){
										$this->dbreport = $this->load->database("tensor_report",TRUE);
										$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
										$this->dbreport->where("alarm_report_imei", $infos[$z]['devIdno']);
										$this->dbreport->where("alarm_report_type",$infos[$z]['alarmType']);
										$this->dbreport->where("alarm_report_media",$infos[$z]['mediaType']);
										$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
										$this->dbreport->update($dbtable,$datainsert);
										printf("===UPDATE \r\n");
										printf("====== ======\r\n");
									}else{
										printf("===SKIP \r\n");
										printf("====== ======\r\n");
									}
									
									
									
								}
									
							}//end return 
						}//end master looping PHOTO
						
					
					}else{
						
						printf("===ERROR : %s \r\n", $result_lastalarm["Message"]);
					}
					$j++;
			}
			
			//insert db video
			$k = 1;
			for ($m=0;$m<count($rows);$m++)
			{
					$mediatype = 1; //0 photo , 1: video
					$ex_device = explode("@",$rows[$m]->vehicle_device);
					$imei = $rows[$m]->vehicle_mv03;
					$vehicleid = $imei;
					printf("\r\n");
					printf("===Get Media VIDEO Vehicle %s %s (%d/%d) \r\n", $rows[$m]->vehicle_no, $rows[$m]->vehicle_device, $k, $totalvehicle);
					//printf("===execute %s\r\n", $rows[$m]->vehicle_no);
					//$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$rows[$m]->vehicle_no,$userid);
					$get_lastalarm = $this->securityevidenceapi($session_id,$sdate,$shour,$edate,$ehour,$mediatype,$imei,$userid);
					
					$result_lastalarm  = json_decode($get_lastalarm,true);
					$response = $result_lastalarm["StatusCode"];
					
					if($response == "SUCCESS"){
						$infos = $result_lastalarm["Data"]["infos"];
						$total_infos = count($infos);
						
						for ($y=0;$y<$total_infos;$y++){
							
								if($infos[$y]['mediaType'] == 0){
									$ex_time = $infos[$y]['fileTime'];
								}else{
									$ex_time = $infos[$y]['fileSTime'];
								}
								
								$novideo = $y+1;
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									$return = 0;
									printf("===PROSES %s of %s \r\n", $novideo, $total_infos);
								}
								//jika sudah ada skip
								else
								{
									$return = 1;
									printf("===SUDAH DIPROSES %s of %s \r\n", $novideo, $total_infos);
								}
								
							if($return == 0){
								
								
								//insert into report
								if($infos[$y]['position'] != ""){
									$ex_coord = explode(",",$infos[$y]['position']);
									$lat_coord = $ex_coord[0];
									$lat_coord = str_replace("--", "-", $lat_coord);
									$lng_coord = $ex_coord[1];
									//$geofence_start = $this->getGeofence_location_other($lng_coord, $lat_coord, $rows[$m]->vehicle_user_id);
									$rowgeofence = $this->getGeofence_location_live($lng_coord, $lat_coord, $rows[$i]->vehicle_dbname_live);
									$jalur = "";
									if($rowgeofence == false){
										$geofence_id = 0;
										$geofence_name = "";
										$geofence_speed = 0;
										$geofence_speed_muatan = "";
										$geofence_type = "";
										$geofence_speed_limit = 0;
									
									}else{
										$geofence_id = $rowgeofence->geofence_id;
										$geofence_name = $rowgeofence->geofence_name;
										$geofence_speed = $rowgeofence->geofence_speed;
										$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
										$geofence_type = $rowgeofence->geofence_type;
										
										if($jalur == "muatan"){
											$geofence_speed_limit = $geofence_speed_muatan;
										}else if($jalur == "kosongan"){
											$geofence_speed_limit = $geofence_speed;
										}else{
											$geofence_speed_limit = 0;
										}
									}
									$geofence_start = $geofence_name;
									
									$coord = $lat_coord.",".$lng_coord;
									
									$position = $this->getPosition_other($lng_coord, $lat_coord);
									if(isset($position)){
										$ex_position = explode(",",$position->display_name);
										if(count($ex_position)>0){
											$position_name = $ex_position[0];
										}else{
											$position_name = $ex_position[0];
										}
									}else{
										$position_name = $position->display_name;
									}
									
								}else{
									$lat_coord = "";
									$lng_coord = "";
									$geofence_start = "";
									$coord = "";
									$position_name = "";
								}
								
								if($infos[$y]['mediaType'] == 0){
									$ex_time = $infos[$y]['fileTime'];
									$ex_time2 = $ex_time;
									$duration_sec = $ex_time2 - $ex_time;
								}else{
									$ex_time = $infos[$y]['fileSTime'];
									$ex_time2 = $infos[$y]['fileETime'];
									$duration_sec = $ex_time2 - $ex_time;
								}
								
								$dataalarm_vid = explode("|",$this->getalarmname($infos[$y]['alarmType'])); 
								$dataalarm_name_vid = $dataalarm[0];
								$dataalarm_level_vid = $dataalarm[1];
								$dataalarm_group_vid = $dataalarm[2];
								
									unset($datainsert);
									$datainsert["alarm_report_imei"] = $infos[$y]['devIdno'];
									$datainsert["alarm_report_vehicle_id"] = $ex_device[0];
									$datainsert["alarm_report_vehicle_no"] = $rows[$m]->vehicle_no;
									$datainsert["alarm_report_vehicle_name"] = $rows[$m]->vehicle_name;
									$datainsert["alarm_report_vehicle_type"] = $rows[$m]->vehicle_type;
									$datainsert["alarm_report_type"] = $infos[$y]['alarmType'];
									$datainsert["alarm_report_name"] = $dataalarm_name_vid;
									$datainsert["alarm_report_level"] = $dataalarm_level_vid;
									$datainsert["alarm_report_group"] = $dataalarm_group_vid;
									$datainsert["alarm_report_media"] = $infos[$y]['mediaType'];
									$datainsert["alarm_report_channel"] = $infos[$y]['channel'];
									$datainsert["alarm_report_gpsstatus"] = $infos[$y]['gpsstatus'];
									$datainsert["alarm_report_start_time"] = date("Y-m-d H:i:s", (($ex_time/1000)));
									$datainsert["alarm_report_end_time"] = date("Y-m-d H:i:s", (($ex_time2/1000)));
									$datainsert["alarm_report_update_time"] = date("Y-m-d H:i:s", (($infos[$y]['updateTime']/1000)));
									$datainsert["alarm_report_duration_sec"] = $duration_sec/1000;
									$datainsert["alarm_report_location_start"] = $position_name;
									$datainsert["alarm_report_location_end"] = $position_name;
									$datainsert["alarm_report_geofence_start"] = $geofence_start;
									$datainsert["alarm_report_geofence_end"] = $geofence_start;
									$datainsert["alarm_report_coordinate_start"] = $coord;
									$datainsert["alarm_report_coordinate_end"] = $coord;
									$datainsert["alarm_report_size"] = $infos[$y]['fileSize'];
									$datainsert["alarm_report_downloadurl"] = $infos[$y]['downloadUrl'];
									$datainsert["alarm_report_path"] = $infos[$y]['filePath'];
									$datainsert["alarm_report_fileurl"] = $infos[$y]['fileUrl'];
									
									
								
								//CHECK last data
								// idno, alarmtype,media,starttime
								$this->dbreport = $this->load->database("tensor_report",TRUE);
								$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
								$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
								$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
								$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
								$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
								$q_report = $this->dbreport->get($dbtable);
								$rows_report = $q_report->result();
								$total_report = count($rows_report);
								
								//jika tidak ada insert
								if($total_report == 0){
									
									$this->dbreport = $this->load->database("tensor_report",TRUE);
									$this->dbreport->insert($dbtable,$datainsert);
									printf("OK|");
								}
								//jika sudah ada skip
								else
								{
									$this->dbreport = $this->load->database("tensor_report",TRUE);
									$this->dbreport->where("alarm_report_imei", $infos[$y]['devIdno']);
									$this->dbreport->where("alarm_report_vehicle_id", $ex_device[0]);
									$this->dbreport->where("alarm_report_type",$infos[$y]['alarmType']);
									$this->dbreport->where("alarm_report_media",$infos[$y]['mediaType']);
									$this->dbreport->where("alarm_report_start_time",date("Y-m-d H:i:s", (($ex_time/1000))) );
									$this->dbreport->update($dbtable,$datainsert);
									printf(".");
								}
								
							}
							
						} //end master looping VIDEO
						
					}else{
						
						printf("===ERROR : %s \r\n", $result_lastalarm["Message"]);
					}
					$k++;
			}
			
			printf("\r\n");
			
			//jika bukan cron report
			if($type == "")
			{
				//update config last check
				unset($datalastcheck);
				
				$datalastcheck["config_lastcheck"] = $nowtime;
				$this->db = $this->load->database("webtracking_ts",TRUE);
				$this->db->where("config_name", "ALARM");
				$this->db->where("config_user", $userid);
				$this->db->where("config_status",1);
				$this->db->update("ts_config",$datalastcheck);
									
				printf("UPDATE CONFIG TIME OKE \r\n ");
				
				$this->db->close();
				$this->db->cache_delete_all();
				
				$enddate = date('Y-m-d H:i:s');
				//printf("===FINISH Cron start %s to %s \r\n", $nowdate, $enddate);
			}
			
			printf("========FINISH============ \r\n");
		
	}
	
	function get_lastsess($userid){
	
		$this->db = $this->load->database("webtracking_ts", TRUE);
		$this->db->select("sess_value");	
		$this->db->order_by("sess_id", "desc");
		$this->db->where("sess_user", $userid);
		$this->db->where("sess_status", 1);
		$q = $this->db->get("ts_sess");
		$row = $q->row();
		if(count($row)>0){
			$sessid = $row->sess_value;
		}else{
			$sessid = "";
		}
		return $sessid;
		
	}
	
	function gettokenAPI($username,$password,$userid){
		
		$feature = array();
		
		$dataJson = file_get_contents("http://103.253.107.212/StandardApiAction_login.action?account=".$username."&password=".$password."");
		
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		if($result == 0){
			
			$session_id = $data["JSESSIONID"];
			$feature['SessionID'] = $session_id;
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			//printf("===LOGIN SUCCESS \r\n");
			printf("===LOGIN SUCCESS: %s \r\n", $session_id);
			
			//insert webtracking ts
			$this->db = $this->load->database("webtracking_ts", TRUE);
			unset($data);
			$data["sess_value"] = $session_id;
			$data["sess_type"] = "LOGIN";
			$data["sess_lastmodified"] = date("Y-m-d H:i:s");
			$data["sess_status"] = 1;
			$data["sess_user"] = $userid;
			$this->db->insert("ts_sess",$data);
		}else{
			$err_message = $data["message"];
			$feature['SessionID'] = "";
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===LOGIN FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		return $response;
		
	}
	
	function getOneTimetokenAPI($username,$password,$userid){
		
		$feature = array();
		
		$dataJson = file_get_contents("http://103.253.107.212/StandardApiAction_login.action?account=".$username."&password=".$password."");
		
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		$response = "";
		if($result == 0){
			
			$session_id = $data["JSESSIONID"];
			printf("===LOGIN SUCCESS: %s \r\n", $session_id);
		}else{
			$err_message = $data["message"];
			printf("===LOGIN FAILED: %s \r\n", $err_message);
		}
		
		$response = $session_id;
		return $response;
		
	}
	
	function loginapi($username,$password){
		
		$userid = 4392;
		$feature = array();
		
		$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_login.action?account=".$username."&password=".$password."");
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		if($result == 0){
			
			$session_id = $data["JSESSIONID"];
			$feature['SessionID'] = $session_id;
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			printf("===LOGIN SUCCESS \r\n");
			
			//insert webtracking ts
			$this->db = $this->load->database("webtracking_ts", TRUE);
			unset($data);
			$data["sess_value"] = $session_id;
			$data["sess_type"] = "LOGIN";
			$data["sess_lastmodified"] = date("Y-m-d H:i:s");
			$data["sess_status"] = 1;
			$data["sess_user"] = $userid;
			$this->db->insert("ts_sess",$data);
		}else{
			$err_message = $data["message"];
			$feature['SessionID'] = "";
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===LOGIN FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		return $response;
		
	}
	
	function loginapi_sess($username,$password,$userid){
		
		$feature = array();
		
		$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_login.action?account=".$username."&password=".$password."");
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		if($result == 0){
			
			$session_id = $data["JSESSIONID"];
			$feature['SessionID'] = $session_id;
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			printf("===LOGIN SUCCESS \r\n");
			
			//insert webtracking ts
			$this->db = $this->load->database("webtracking_ts", TRUE);
			unset($data);
			$data["sess_value"] = $session_id;
			$data["sess_type"] = "LOGIN";
			$data["sess_lastmodified"] = date("Y-m-d H:i:s");
			$data["sess_status"] = 1;
			$data["sess_user"] = $userid;
			$this->db->insert("ts_sess",$data);
		}else{
			$err_message = $data["message"];
			$feature['SessionID'] = "";
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===LOGIN FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		return $response;
		
	}
	
	function loginapi_sess2($username,$password,$userid){
		
		$feature = array();
		
		$dataJson = file_get_contents("http://121.199.53.118:8080/StandardApiAction_login.action?account=".$username."&password=".$password."");
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		if($result == 0){
			
			$session_id = $data["JSESSIONID"];
			$feature['SessionID'] = $session_id;
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			printf("===LOGIN SUCCESS \r\n");
			
			//insert webtracking ts
			$this->db = $this->load->database("webtracking_ts", TRUE);
			unset($data);
			$data["sess_value"] = $session_id;
			$data["sess_type"] = "LOGIN";
			$data["sess_lastmodified"] = date("Y-m-d H:i:s");
			$data["sess_status"] = 1;
			$data["sess_user"] = $userid;
			$this->db->insert("ts_sess",$data);
		}else{
			$err_message = $data["message"];
			$feature['SessionID'] = "";
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===LOGIN FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		return $response;
		
	}
	
	function logoutapi($sess_id){
		
		$userid = 4392;
		$feature = array();
		
		$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_logout.action?jsession=".$sess_id."");
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		if($result == 0){
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			
			//insert webtracking ts
			$this->db = $this->load->database("webtracking_ts", TRUE);
			unset($data);
			$data["sess_value"] = $sess_id;
			$data["sess_type"] = "LOGOUT";
			$data["sess_lastmodified"] = date("Y-m-d H:i:s");
			$data["sess_status"] = 1;
			$data["sess_user"] = $userid;
			$this->db->insert("ts_sess",$data);
			printf("===LOGOUT SUCCESS \r\n");
			
		}else{
			$err_message = $data["message"];
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===LOGOUT FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		return $response;
		
	}
	
	function devicestatusapi($sess_id,$imei,$vno){
		
		$feature = array();
		$host = "MV03";
		$dataJson = file_get_contents("http://103.253.107.212/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&devIdno=".$imei."&toMap=1&driver=0&language=zh"); //IP baru Local
		
		$data = json_decode($dataJson,true);
		$result = $data['result'];
		$status = $data['status'][0];
		//print_r($data);
		if($result == 0){
			
			/*
			
			[0] => Array
                (
                    [id] => 020200360002 		= imei
                    [lc] => 0					= milleage (meter)
                    [dt] => 2					= hard type (1: sd card, 2: hardisk, 3 ssd card)
                    [vid] => 020200360002		= plate number
                    [pt] => 6  					= protocol type
                    [jn] =>						= driver work number			
                    [dn] =>						= driver name
                    [sp] => 0					= speed (km/h) (dibagi 10)
                    [abbr] =>
                    [lid] => 0					= bus use, line number
                    [ct] =>						= Valid when lg=2,Compartment temperature (0x06)(Refer to the 808-2019 agreement)
                    [ft] => 0					= factory type
                    [dst] =>					= Front vehicle/pedestrian distance (100ms).
                    [fl] =>						= Road marker identification type
                    [ps] => 22.533209,113.945436= Geographical Position
                    [adas2] =>
                    [rft] =>
                    [dsm1] =>
                    [cet] =>
                    [pss] =>
                    [tsp] => 0					= Bus use, Site status 0- station 1- next stop
                    [rt] =>
                    [bsd1] =>
                    [es] =>
                    [yn] =>
                    [wc] =>
                    [rfd] =>
                    [ls] =>
                    [net] => 3					= Network Type 1 means 3G, 2 means WIFI
                    [adas1] =>
                    [fvs] =>
                    [dsm2] =>
                    [lg] =>
                    [lt] => 0					=Login type:0-linux, 1-windows, 2-web, 3-Android, 4-ios
                    [ios] =>
                    [aq] =>
                    [sn] =>
                    [bsd2] =>
                    [dvt] =>
                    [pk] => 4856				= Parking Time (sec)
                    [mlng] => 113.945436		= map lng 
                    [ac] =>						= Audio Type
                    [s3] => 0					= Status 3		
                    [t2] => 0					= Temp Sensor 2
                    [lng] => 113945436			= lng	
                    [mlat] => 22.533209			= map lng
                    [yl] => 0					= Fuel Unit: L, you must first use divided by 100.
                    [gt] => 2020-09-09 14:59:09.0	= gps time (WIB)
                    [po] =>
                    [sv] =>
                    [sfg] => 0					= Bus use, Site sign 0- site 1- station yard
                    [ol] => 1					= online status (1:online, else offline
                    [snm] => 0					= site index
                    [sst] => 0					= Site status 1 site 0 station
                    [s1] => -2147469949			= status1 : 
                    [hx] => 0					= Direction North direction is 0 degrees, clockwise increases, the maximum value of 360 degrees.
                    [t1] => 0					= Temp Sensor 1
                    [or] => 0					= OBD collects engine speed
                    [hv] =>
                    [os] => 0					= OBD capture engine speed
                    [ov] => 0					= OBD collecting battery voltage
                    [ojt] => 0					= OBD collecting battery voltage
                    [t4] => 0					= Temp Sensor 4
                    [lat] => 22533209			= lat
                    [s4] => 0					= status4 : 0= Positioning Type
                    [s2] => 262144				= status2 : 
                    [t3] => 0					= Temp Sensor 3
                    [fdt] => 3					= Factory Subtype
                    [drid] => 0					= driver id
                    [dct] => 0					= Line direction 0 Up 1 Down
                    [gw] => G1					= Gateway Server Number
                    [ust] =>
                    [glat] =>
                    [p10] => 0					= ?
                    [glng] =>			
                    [ef] => 0					= Additional information flag 0-Bus OBD 1-Video Department 2-UAE School Bus
                    [p7] => 0					= ef=2:Humidity 3 sensor
                    [p8] => 0					= ?
                    [ost] => 0					= OBD acquisition status
                    [p5] => 0			 		= ef=1:Fatigue degree, ef=2: humidity 1 sensor
                    [p6] => 0					= ef=2:Humidity 2 sensor
                    [p9] => 0					= ?
                    [ojm] => 0					= OBD capture throttle position
                    [imei] =>
                    [imsi] =>
                    [p4] => 0					= ef=1:Abnormal driving flag, ef=2: Hard disk 4 type 1sd, 2hd, 3ssd
                    [tp] =>
                    [p1] => 0					= ef=1:video loss flag, ef=2: hard disk 3 status 0 is invalid, 1 exists, 2 does not exist
                    [p3] => 0					= ef=1:Disk error flag, ef=2: Hard disk 4 status 0 is invalid, 1 exists, 2 does not exist
                    [p2] => 0					= ef=1:Video occlusion flag, ef=2: Hard disk 3 type 1sd, 2hd, 3ssd
                
			
			*/
					$driIMEI = $status['id'];
					//$drid = $status['drid'];
					//$dn = $status['dn'];
					//$jn = $status['jn'];
					$driJn = $status['driJn'];
					$driSw = $status['driSw'];
					$driSwStr = $status['driSwStr'];
					
					///* x */print(date("Y-m-d H:i:s")." ".$imei." drid : ".$drid."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." dn: ".$dn."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." jn : ".$jn."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driJn : ".trim($driJn)."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driSw : ".$driSw."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driSwStr : ".$driSwStr."\n");
					
					
							$change_imei = trim($driIMEI);
							$change_driver_id = trim($driJn);
							
							if($driSwStr == ""){
								$change_driver_time = $driSwStr;
							}else{
								$change_driver_time = date("Y-m-d H:i:s", strtotime($driSwStr." "."-1 hours"));
							}
							
							/* x */print(date("Y-m-d H:i:s")." ".$imei." change_driver_time : ".$change_driver_time."\n");
							unset($datadriver);
							$datadriver["change_imei"] = $change_imei;
							$datadriver["change_driver_id"] = $change_driver_id;
							$datadriver["change_driver_time"] = $change_driver_time;
							$datadriver["change_driver_vehicle_no"] = $vno;
							$datadriver["change_driver_flag"] = 0;
								
							//CHECK last data
							$this->dbreport = $this->load->database("webtracking_ts",TRUE);
							$this->dbreport->where("change_imei", $change_imei);
							$this->dbreport->where("change_driver_id", $change_driver_id);
							$this->dbreport->where("change_driver_time",$change_driver_time);
							$q_report = $this->dbreport->get("ts_driver_change2");
							$rows_report = $q_report->result();
							$total_report = count($rows_report);
							
							//jika tidak ada insert
							if($total_report == 0){
								$this->dbreport->insert("ts_driver_change2",$datadriver);
								printf("===NEW DRIVER !! \r\n");
								printf("====== ======\r\n");
							}
							//jika sudah ada skip
							else
							{
								printf("===ALREADY EXISTS !! \r\n");
								printf("====== ======\r\n");
							}
					
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
		}else{
			$err_message = $data["message"];
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
		}
		
		$response = json_encode($feature);
	
		return $response;
		
	}
	
	function devicestatusapi_old($sess_id,$imei){
		
		$feature = array();
		$host = "MV03";
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&devIdno=".$imei."&toMap=1&driver=0&language=zh"); //tes ok
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&vehiIdno=".$imei."&toMap=1&driver=0&language=en");
		//$dataJson = file_get_contents("http://121.199.53.118:8080/StandardApiAction_findVehicleInfoByDeviceId.action?jsession=".$sess_id."&devIdno=".$imei."");
		
		//$dataJson = file_get_contents("http://121.199.53.118:8080/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&devIdno=".$imei."&toMap=1&driver=0&language=zh"); //IP Baru OK
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&devIdno=".$imei."&toMap=1&driver=0&language=zh"); //IP Lama
		$dataJson = file_get_contents("http://103.253.107.212/StandardApiAction_getDeviceStatus.action?jsession=".$sess_id."&devIdno=".$imei."&toMap=1&driver=0&language=zh"); //IP baru Local
		
		//info :
		//http://47.241.210.146/StandardApiAction_getDeviceStatus.action?jsession=cf6b70a3-c82b-4392-8ab6-bbddce336222&devIdno=500000&toMap=1&driver=0&language=zh
		// http://121.199.53.118:8080/808gps/open/webApi.html/
		//http://121.199.53.118:8080/StandardApiAction_findVehicleInfoByDeviceId.action?jsession=cf6b70a3-c82b-4392-8ab6-bbddce336222&devIdno=s1234b
		$data = json_decode($dataJson,true);
		$result = $data['result'];
		$status = $data['status'][0];
		//print_r($data);
		if($result == 0){
			
			/*
			
			[0] => Array
                (
                    [id] => 020200360002 		= imei
                    [lc] => 0					= milleage (meter)
                    [dt] => 2					= hard type (1: sd card, 2: hardisk, 3 ssd card)
                    [vid] => 020200360002		= plate number
                    [pt] => 6  					= protocol type
                    [jn] =>						= driver work number			
                    [dn] =>						= driver name
                    [sp] => 0					= speed (km/h) (dibagi 10)
                    [abbr] =>
                    [lid] => 0					= bus use, line number
                    [ct] =>						= Valid when lg=2,Compartment temperature (0x06)(Refer to the 808-2019 agreement)
                    [ft] => 0					= factory type
                    [dst] =>					= Front vehicle/pedestrian distance (100ms).
                    [fl] =>						= Road marker identification type
                    [ps] => 22.533209,113.945436= Geographical Position
                    [adas2] =>
                    [rft] =>
                    [dsm1] =>
                    [cet] =>
                    [pss] =>
                    [tsp] => 0					= Bus use, Site status 0- station 1- next stop
                    [rt] =>
                    [bsd1] =>
                    [es] =>
                    [yn] =>
                    [wc] =>
                    [rfd] =>
                    [ls] =>
                    [net] => 3					= Network Type 1 means 3G, 2 means WIFI
                    [adas1] =>
                    [fvs] =>
                    [dsm2] =>
                    [lg] =>
                    [lt] => 0					=Login type:0-linux, 1-windows, 2-web, 3-Android, 4-ios
                    [ios] =>
                    [aq] =>
                    [sn] =>
                    [bsd2] =>
                    [dvt] =>
                    [pk] => 4856				= Parking Time (sec)
                    [mlng] => 113.945436		= map lng 
                    [ac] =>						= Audio Type
                    [s3] => 0					= Status 3		
                    [t2] => 0					= Temp Sensor 2
                    [lng] => 113945436			= lng	
                    [mlat] => 22.533209			= map lng
                    [yl] => 0					= Fuel Unit: L, you must first use divided by 100.
                    [gt] => 2020-09-09 14:59:09.0	= gps time (WIB)
                    [po] =>
                    [sv] =>
                    [sfg] => 0					= Bus use, Site sign 0- site 1- station yard
                    [ol] => 1					= online status (1:online, else offline
                    [snm] => 0					= site index
                    [sst] => 0					= Site status 1 site 0 station
                    [s1] => -2147469949			= status1 : 
                    [hx] => 0					= Direction North direction is 0 degrees, clockwise increases, the maximum value of 360 degrees.
                    [t1] => 0					= Temp Sensor 1
                    [or] => 0					= OBD collects engine speed
                    [hv] =>
                    [os] => 0					= OBD capture engine speed
                    [ov] => 0					= OBD collecting battery voltage
                    [ojt] => 0					= OBD collecting battery voltage
                    [t4] => 0					= Temp Sensor 4
                    [lat] => 22533209			= lat
                    [s4] => 0					= status4 : 0= Positioning Type
                    [s2] => 262144				= status2 : 
                    [t3] => 0					= Temp Sensor 3
                    [fdt] => 3					= Factory Subtype
                    [drid] => 0					= driver id
                    [dct] => 0					= Line direction 0 Up 1 Down
                    [gw] => G1					= Gateway Server Number
                    [ust] =>
                    [glat] =>
                    [p10] => 0					= ?
                    [glng] =>			
                    [ef] => 0					= Additional information flag 0-Bus OBD 1-Video Department 2-UAE School Bus
                    [p7] => 0					= ef=2:Humidity 3 sensor
                    [p8] => 0					= ?
                    [ost] => 0					= OBD acquisition status
                    [p5] => 0			 		= ef=1:Fatigue degree, ef=2: humidity 1 sensor
                    [p6] => 0					= ef=2:Humidity 2 sensor
                    [p9] => 0					= ?
                    [ojm] => 0					= OBD capture throttle position
                    [imei] =>
                    [imsi] =>
                    [p4] => 0					= ef=1:Abnormal driving flag, ef=2: Hard disk 4 type 1sd, 2hd, 3ssd
                    [tp] =>
                    [p1] => 0					= ef=1:video loss flag, ef=2: hard disk 3 status 0 is invalid, 1 exists, 2 does not exist
                    [p3] => 0					= ef=1:Disk error flag, ef=2: Hard disk 4 status 0 is invalid, 1 exists, 2 does not exist
                    [p2] => 0					= ef=1:Video occlusion flag, ef=2: Hard disk 3 type 1sd, 2hd, 3ssd
                
			
			*/
					$driIMEI = $status['id'];
					//$drid = $status['drid'];
					//$dn = $status['dn'];
					//$jn = $status['jn'];
					$driJn = $status['driJn'];
					$driSw = $status['driSw'];
					$driSwStr = $status['driSwStr'];
					
					///* x */print(date("Y-m-d H:i:s")." ".$imei." drid : ".$drid."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." dn: ".$dn."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." jn : ".$jn."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driJn : ".trim($driJn)."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driSw : ".$driSw."\n");
					/* x */print(date("Y-m-d H:i:s")." ".$imei." driSwStr : ".$driSwStr."\n");
					
					
							$change_imei = trim($driIMEI);
							$change_driver_id = trim($driJn);
							
							if($driSwStr == ""){
								$change_driver_time = $driSwStr;
							}else{
								$change_driver_time = date("Y-m-d H:i:s", strtotime($driSwStr." "."-1 hours"));
							}
							
							/* x */print(date("Y-m-d H:i:s")." ".$imei." change_driver_time : ".$change_driver_time."\n");
							unset($datadriver);
							$datadriver["change_imei"] = $change_imei;
							$datadriver["change_driver_id"] = $change_driver_id;
							$datadriver["change_driver_time"] = $change_driver_time;
							$datadriver["change_driver_flag"] = 0;
								
							//CHECK last data
							$this->dbreport = $this->load->database("webtracking_ts",TRUE);
							$this->dbreport->where("change_imei", $change_imei);
							$this->dbreport->where("change_driver_id", $change_driver_id);
							$this->dbreport->where("change_driver_time",$change_driver_time);
							$q_report = $this->dbreport->get("ts_driver_change");
							$rows_report = $q_report->result();
							$total_report = count($rows_report);
							
							//jika tidak ada insert
							if($total_report == 0){
								$this->dbreport->insert("ts_driver_change",$datadriver);
								printf("===NEW DRIVER !! \r\n");
								printf("====== ======\r\n");
							}
							//jika sudah ada skip
							else
							{
								printf("===ALREADY EXISTS !! \r\n");
								printf("====== ======\r\n");
							}
					
					
					$msgori = json_encode($status,true);
					$imei =  $status['id'];
					$gps_id = $imei;
					$myhost = "MV03";
					$host = "103.253.107.155";
					$hostlive = "103.253.107.155";
					$username = "root";
					$password = "bismillaahmysql";
					$database = "webtracking_gps_borneo_25502";
					$database_live = "webtracking_gps_borneo_live";
					$tablegps = "webtracking_gps";
					$tableinfo = "webtracking_gps_info";
					$tablechannel = "webtracking_channel";
					$tablegps_tmp = "webtracking_gps_temp";
					$tablerespon = "webtracking_respon";

					$host_alert = "103.253.107.155";
					$database_alert = "webtracking_gps_borneo_live";
					$tablegps_alert = "webtracking_gps_alert";
					$tableinfo_alert = "webtracking_gps_info_alert";

					//status io s1
					$dt_gps_status1 = decbin($status['s1']);
					$io_length = strlen($dt_gps_status1);
					///* x */print(date("Y-m-d H:i:s")." ".$imei." IO Length : ".$io_length."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." DT GPS S1 : ".$status['s1']."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS S1 Bin : ".$dt_gps_status1."\n");
					
					//parsing gps status
					$dt_gps_status = substr($dt_gps_status1,50,1);
					if($dt_gps_status == 1){
						$gps_status = "A";
						$gpsvalidstatus = "OK";
					}else{
						$gps_status = "V";
						$gpsvalidstatus = "NOT OK";
					}
					///* x */print(date("Y-m-d H:i:s")." ".$imei." DT GPS Status : ".$dt_gps_status."\n");
					//* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Status : ".$gps_status."\n");
					
					//parsing ONLINE DEVICE
					$gps_online_status = $status['ol'];
					if($gps_online_status == 1){
						$device_status = "ON";
					}else{
						$device_status = "OFF";
					}
					
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS ONLINE Status : ".$gps_online_status."\n");
					
					//parsing engine
					//$engine_code = substr($dt_gps_status1,49,1);
					if($gps_online_status == 1){
						$gps_io_port = "0000100000";
						$engine = "ON";
					}else{
						$gps_io_port = "0000000000";
						$engine = "OFF";
					}
					///* x */print(date("Y-m-d H:i:s")." ".$imei." ENGINE CODE : ".$gps_online_status."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." ENGINE : ".$engine."\n");
					
					//parsing latitude
					$gps_lat = $status['mlat'];
					$gps_lat_ns = $gps_lat;
					$lat = $gps_lat;
					
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Lat : ".$gps_lat."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Lat Real : ".$lat."\n");

					//parsing ns
					$gps_ns = "";
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS NS : ".$gps_ns."\n");

					//parsing longitute
					$gps_lon = $status['mlng'];
					$gps_lon_ns = $gps_lon;
					$lng = $gps_lon;
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS LONG : ".$gps_lon."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS LONG REAL : ".$lng."\n");

					//parsing ew
					$gps_ew = "";
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS EW : ".$gps_ew."\n");

					//Parsing Speed
					$gps_speed = $status['sp'];
					$speed = ($gps_speed/10)/1.852; //kph
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Speed : ".($gps_speed/10)."\n");

					//parsing gps_course
					$gps_course = $status['hx'];
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Course : ".$gps_course."\n");
					
					//time
					$dt_gps_time = substr($status['gt'],0,19);
					$gps_time_sec = strtotime($dt_gps_time . "-7hours");
					$gps_time = date("His",($gps_time_sec));
					
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Time DT ".$dt_gps_time."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS Time : ".$gps_time."\n");
					
					//date
					$gps_date = date("Y-m-d",($gps_time_sec));
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS DATE : ".$gps_date."\n");
					$gps_utc_date = date("dmy",($gps_time_sec));
					
					$gps_date_fmt = $gps_date;
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS UTC DATE : ".$gps_utc_date."\n");

					//Parsing GPS UTC Coord
					$gps_utc_coord = date("His",($gps_time_sec));

					$gps_time_ok = date("Y-m-d H:i:s",($gps_time_sec));
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS TIME OK: ".$gps_time_ok."\n");

					$gps_datetime_sec = strtotime($gps_time_ok);
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS TIME OK SEC: ".$gps_datetime_sec."\n");
					
					//--update 05-10-18
					//now date
					$now_date = date("Y-m-d H:i:s");
					$dateinterval = new DateTime($now_date);
					$dateinterval->sub(new DateInterval('PT7H'));
					$now_newdate = $dateinterval->format('Y-m-d H:i:s');
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS TIME UTC: ".$now_newdate."\n");

					//compare tgl utc dengan tgl gps
					$now_newdate_day = date("Y-m-d", strtotime($now_newdate));
					$gps_time_ok_day = date("Y-m-d", strtotime($gps_time_ok));
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS NOW UTC DAY: ".$now_newdate_day."\n");
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS TIME OK DAY: ".$gps_time_ok_day."\n");

					//parsing MILEAGE
					$gps_mileage = $status['lc'];
					$gps_odometer = $gps_mileage;
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS MILEAGE : ".$gps_odometer."\n");
					
					//parsing PARKTIME
					$gps_park_sec = $status['pk'];
					///* x */print(date("Y-m-d H:i:s")." ".$imei." GPS PARK Sec : ".$gps_park_sec."\n");
					
					$skip_notok = 0;
					$skip_live = 0;
					$skip_port = 0;
					//jika tanggal gps melebihi tgl skarang
					if($gps_time_ok_day > $now_newdate_day){
						$skip_notok = 1;
						print("SKIP INSERT NOT OK :"." ".$gps_time_ok_day."\n");
					}
					
					//jika invalid di skip
					if($lat == "" || $lat == 0){
						$skip_notok = 1;
						$skip_live = 1;
						$skip_port = 1;
						print("SKIP LAT INVALID :"." ".$lat."\n");
					}
					
					//jika invalid di skip
					if($lng == "" || $lng == 0){
						$skip_notok = 1;
						$skip_live = 1;
						$skip_port = 1;
						print("SKIP LNG INVALID :"." ".$lng."\n");
					}
					
					//jika tanggal sama atau kurang dari yg terbaru tidak usah diinsert
					$con_lastport = mysql_connect($host,$username,$password);
					if (!$con_lastport)
					{
						die('Could not connect: ' . mysql_error());
					}
					else
					{
						//print("Create Connection to : "." ".$host." "." Success \r\n");

					}
					mysql_select_db($database, $con_lastport);
						
					$sql_lastdataport = sprintf("SELECT gps_name,gps_time FROM %s WHERE gps_name = '%s' ORDER BY gps_id DESC LIMIT 1"
								  ,$tablegps
								  ,$gps_id
								  );

					$result_port = mysql_query($sql_lastdataport,$con_lastport);
					if (!$result_port)
					{
						die('Error: ' . mysql_error());
					}
					else
					{
						$numRowsLastPort = mysql_num_rows($result_port);
						if($numRowsLastPort > 0){
							$data_last = mysql_fetch_assoc($result_port);
							$last_gps_time = $data_last['gps_time'];
							$last_gps_time_sec = strtotime($last_gps_time);
							print("LAST GPS TIME: ".$last_gps_time." ID ".$gps_id."\n");
							
							if($gps_time_sec <= $last_gps_time_sec){
								$skip_port = 1;
								print("SKIP PORT LAST: ".$last_gps_time." NOW: ".$gps_time_ok."\n");
							}else{
								print("DB PORT OK: ".$last_gps_time." NOW: ".$gps_time_ok."\n");
							}
						}
					}
					mysql_close($con_lastport);
					
					$gps_host = $myhost;
					$gps_type = $myhost;
					$gps_mvd = 0;
					$gps_mv = 0;
					$gps_cs = 0;
					$gps_workhour = 0;
					
					//DOOR
					$door = 0;
					///* x */print(date("Y-m-d H:i:s")." ".$imei." DOOR : ".$door."\n");
					if($door == 4){
						$gps_cs = "53";
						$door_status = "OPEN";
						$pto_status = "ON";
					}else{
						$gps_cs = "52";
						$door_status = "CLOSE";
						$pto_status = "OFF";
					}
					
					$new_gpstime = strtotime($gps_time_ok . "+7hours");
					
					//gps Info Identify
					$gps_info_device = $gps_id."@".$myhost;
					$gps_info_hdop = 0;
					$gps_info_io_port = $gps_io_port;
					$gps_info_alarm_data = "00000000";
					$gps_info_ad_input = "00000000";
					$gps_info_alarm_alert = 0;
					$gps_info_status = 0;
					$gps_info_gps = 0;
			
					//json
					$feature = array();
					$feature["auto_status"] = "-";
					$feature["auto_last_update"] = date("Y-m-d H:i:s", $new_gpstime);
					$feature["auto_last_check"] = date("Y-m-d H:i:s");
					$feature["auto_last_position"] = "";
					$feature["auto_last_lat"] = $lat;
					$feature["auto_last_long"] = $lng;
					$feature["auto_last_engine"] = $engine;
					$feature["auto_last_speed"] = $speed;
					$feature["auto_last_gpsstatus"] = $gpsvalidstatus;
					$feature["auto_last_course"] = $gps_course;
					$feature["auto_last_rfid"] = $gps_mv;
					$feature["auto_last_door"] = $door_status;
					$feature["auto_last_pto"] = $pto_status;
					$feature["auto_last_device_status"] = $device_status;
					$feature["auto_last_park_duration"] = $gps_park_sec;
					$feature["auto_flag"] = 0;
					$datajson = json_encode($feature);
					
					//insert GPS PORT
					/*if (isset($gps_id) && $gps_id != "" && $skip_notok == 0 && $skip_port == 0)
					{
						$con = mysql_connect($host,$username,$password);
						if (!$con)
						{
							die('Could not connect: ' . mysql_error());
						}
						else
						{
							//print("Create Connection to : "." ".$host." "." Success \r\n");

						}
						mysql_select_db($database, $con);
						$sql_gps = sprintf("INSERT INTO %s (gps_name, gps_host, gps_type, gps_utc_coord, gps_status, gps_latitude, gps_ns,
								gps_longitude, gps_ew, gps_speed, gps_course, gps_utc_date, gps_mvd, gps_mv, gps_cs, gps_msg_ori, gps_time,
								gps_latitude_real, gps_longitude_real, gps_odometer, gps_workhour) VALUES ('%s','%s','%s','%s','%s','%s',
								'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')"
								,$tablegps
								,$gps_id
								,$gps_host
								,$gps_type
								,$gps_time
								,$gps_status
								,$gps_lat_ns
								,$gps_ns
								,$gps_lon_ns
								,$gps_ew
								,$speed
								,$gps_course
								,$gps_utc_date
								,$gps_mvd
								,$gps_mv
								,$gps_cs
								,$msgori
								,$gps_time_ok
								,$lat
								,$lng
								,$gps_odometer
								,$gps_workhour
						);

						$sql_info = sprintf("INSERT INTO %s (gps_info_device,gps_info_hdop,gps_info_io_port,gps_info_distance,gps_info_alarm_data,
								gps_info_ad_input,gps_info_utc_coord,gps_info_utc_date,gps_info_alarm_alert,gps_info_time,gps_info_status,
								gps_info_gps) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')"
								,$tableinfo
								,$gps_info_device
								,$gps_info_hdop
								,$gps_info_io_port
								,$gps_odometer
								,$gps_info_alarm_data
								,$gps_info_ad_input
								,$gps_time
								,$gps_utc_date
								,$gps_info_alarm_alert
								,$gps_time_ok
								,$gps_info_status
								,$gps_info_gps
						);
						
						$sql_gps_live = sprintf("INSERT INTO %s (gps_name, gps_host, gps_type, gps_utc_coord, gps_status, gps_latitude, gps_ns,
									gps_longitude, gps_ew, gps_speed, gps_course, gps_utc_date, gps_mvd, gps_mv, gps_cs, gps_msg_ori, gps_time,
									gps_latitude_real, gps_longitude_real, gps_odometer, gps_workhour, vehicle_autocheck) VALUES ('%s','%s','%s','%s','%s','%s',
									'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')"
									,$tablegps
									,$gps_id
									,$gps_host
									,$gps_type
									,$gps_time
									,$gps_status
									,$gps_lat_ns
									,$gps_ns
									,$gps_lon_ns
									,$gps_ew
									,$speed
									,$gps_course
									,$gps_utc_date
									,$gps_mvd
									,$gps_mv
									,$gps_cs
									,$msgori
									,$gps_time_ok
									,$lat
									,$lng
									,$gps_odometer
									,$gps_workhour
									,$datajson
						);

						if (!mysql_query($sql_gps,$con))
						{
								die('Error: ' . mysql_error());
						}
						else
						{
								print("Insert GPS OK\n");
						}

						if (!mysql_query($sql_info,$con))
						{
								die('Error: ' . mysql_error());
						}
						else
						{
								print("Insert GPS INFO OK\n");
						}

						mysql_close($con);
					}
					else
					{
						print("Skip Insert GPS, Invalid Data \n");
					}

					//Update or Insert Live Data
					if (isset($gps_id) && $gps_id != "" && $skip_notok == 0 && $skip_live == 0 )
					{
						$conlive = mysql_connect($hostlive,$username,$password);
						mysql_select_db($database_live, $conlive);

						$sqlupdatelive = sprintf("SELECT gps_name FROM %s WHERE gps_name = '%s'"
									  ,$tablegps
									  ,$gps_id
									  );

						$result_live = mysql_query($sqlupdatelive,$conlive);
						if (!$result_live)
						{
							die('Error: ' . mysql_error());
						}
						else
						{
							if (mysql_num_rows($result_live) == 0)
							{
								if (!mysql_query($sql_gps_live,$conlive)) { echo 'Error: ' . mysql_error(); }
								else { print("Insert GPS LIVE  OK\n"); }
								if (!mysql_query($sql_info,$conlive)) { echo 'Error: ' . mysql_error(); }
								else { print("Insert GPS INFO LIVE OK\n"); }
							}
							else
							{
								//update GPS INFO
								if (isset($gps_id) && $gps_id != "" && $skip_notok == 0)
								{
									$sqlupdatelive = sprintf("UPDATE %s SET gps_name = '%s', gps_host = '%s', gps_type = '%s', gps_utc_coord = '%s', gps_status = '%s', gps_latitude = '%s', gps_ns = '%s', gps_longitude = '%s', gps_ew = '%s', gps_speed = '%s', gps_course = '%s', gps_utc_date = '%s', gps_mvd = '%s', gps_mv = '%s', gps_cs = '%s', gps_msg_ori = '%s', gps_time = '%s', gps_latitude_real = '%s', gps_longitude_real = '%s', gps_odometer = '%s', gps_workhour = '%s', vehicle_autocheck = '%s' WHERE gps_name = '%s'"
													,$tablegps
													,$gps_id
													,$gps_host
													,$gps_type
													,$gps_time
													,$gps_status
													,$gps_lat_ns
													,$gps_ns
													,$gps_lon_ns
													,$gps_ew
													,$speed
													,$gps_course
													,$gps_utc_date
													,$gps_mvd
													,$gps_mv
													,$gps_cs
													,$msgori
													,$gps_time_ok
													,$lat
													,$lng
													,$gps_odometer
													,$gps_workhour
													,$datajson
													,$gps_id);

									if (!mysql_query($sqlupdatelive,$conlive)) { die('Error: ' . mysql_error()); }
									else { print("UPDATE GPS LIVE OK\n");  }

									$sqlupdatelive = sprintf("UPDATE %s SET gps_info_device = '%s',gps_info_hdop = '%s',gps_info_io_port = '%s',gps_info_distance = '%s',gps_info_alarm_data = '%s', gps_info_ad_input = '%s',gps_info_utc_coord = '%s',gps_info_utc_date = '%s',gps_info_alarm_alert = '%s',gps_info_time = '%s',gps_info_status = '%s', gps_info_gps = '%s' WHERE gps_info_device = '%s'"
										,$tableinfo
										,$gps_info_device
										,$gps_info_hdop
										,$gps_info_io_port
										,$gps_odometer
										,$gps_info_alarm_data
										,$gps_info_ad_input
										,$gps_time
										,$gps_utc_date
										,$gps_info_alarm_alert
										,$gps_time_ok
										,$gps_info_status
										,$gps_info_gps
										,$gps_info_device);

									if (!mysql_query($sqlupdatelive,$conlive)) { die('Error: ' . mysql_error()); }
									else { print("UPDATE GPS INFO LIVE OK\n");  }
								}
								else
								{
									print("SKIP INSERT LIVE\n");
								}
							}
						}
						mysql_close($conlive);
					} //end update live
					else
					{
						print("Skip Insert GPS Live, Invalid Data \n");
					}
					*/
			
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
		}else{
			$err_message = $data["message"];
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
		}
		
		$response = json_encode($feature);
	
		return $response;
		
	}
	
	//Security Evidence Inquiry
	function securityevidenceapi($sessid,$sdate,$shour,$edate,$ehour,$mediatype,$vehicleid,$userid){
		
		//$userid = 4392; //trial
		$alarmtype_list = $this->getalarmtype();
		//$alarmtype_list = "603";
		$feature = array();
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_performanceReportPhotoListSafe.action?jsession=".$sessid."&begintime=".$sdate."%20".$shour."&endtime=".$edate."%20".$ehour."&alarmType=".$alarmtype_list."&mediaType=".$mediatype."&toMap=1&vehiIdno=".$vehicleid."&currentPage=&pageRecords=");
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_performanceReportPhotoListSafe.action?jsession=".$sessid."&begintime=".$sdate."%20".$shour."&endtime=".$edate."%20".$ehour."&alarmType=".$alarmtype_list."&mediaType=".$mediatype."&toMap=1&vehiIdno=".$vehicleid."&currentPage=&pageRecords=");
		//$dataJson = file_get_contents("http://47.241.210.146/StandardApiAction_performanceReportPhotoListSafe.action?jsession=".$sessid."&begintime=".$sdate."%20".$shour."&endtime=".$edate."%20".$ehour."&alarmType=".$alarmtype_list."&mediaType=".$mediatype."&toMap=1&vehiIdno=".$vehicleid."&currentPage=&pageRecords=");
		$dataJson = file_get_contents("http://103.253.107.212/StandardApiAction_performanceReportPhotoListSafe.action?jsession=".$sessid."&begintime=".$sdate."%20".$shour."&endtime=".$edate."%20".$ehour."&alarmType=".$alarmtype_list."&mediaType=".$mediatype."&toMap=1&vehiIdno=".$vehicleid."&currentPage=&pageRecords=");
		$data = json_decode($dataJson,true);
		$result = $data["result"];
		
		$txt = "http://103.253.107.212/StandardApiAction_performanceReportPhotoListSafe.action?jsession=".$sessid."&begintime=".$sdate."%20".$shour."&endtime=".$edate."%20".$ehour."&alarmType=".$alarmtype_list."&mediaType=".$mediatype."&toMap=1&vehiIdno=".$vehicleid."&currentPage=&pageRecords=";
		//print_r($txt);
		
		$tensor_username = $this->config->item('tensor_username');
		$tensor_password = $this->config->item('tensor_password');
		
		if($result == 0){
			$result_info = $data["infos"];
			//print_r($data); //exit();//for check log print this
			printf("===Total DATA %s \r\n", count($result_info));
			$feature["Data"] = $data;
			$feature["Message"] = "OK";
			$feature["StatusCode"] = "SUCCESS";
			printf("===GET Security Evidence SUCCESS\r\n");
		}else{
			
			$err_message = $data["message"];
			$result = $data["result"];
			
			if($err_message == "Session does not exist!"){
				
				//dimatikan sementara, get session dipisah
				/* $relogin = $this->loginapi_sess($tensor_username,$tensor_password,$userid);
				$sess_new = $relogin["SessionID"];
				$this->securityevidenceapi($sess_new,$sdate,$shour,$edate,$ehour,$mediatype,$vehicleid,$userid); */
			}
			
			$feature['result'] = $result;
			$feature["Message"] = $err_message;
			$feature["StatusCode"] = "FAILED";
			printf("===GET Security Evidence FAILED: %s \r\n", $err_message);
		}
		
		$response = json_encode($feature);
		
		return $response;
		
	}
	
	function getalarmtype(){
		ini_set('memory_limit', '2G');
		$this->db = $this->load->database("webtracking_ts", TRUE);
		$this->db->select("alarm_type");	
		$this->db->order_by("alarm_type", "asc");
		$this->db->where("alarm_status", 1);
		$q = $this->db->get("ts_alarm");
		$rows = $q->result();
		$total_rows = count($rows);
		$alarm_code = "";
		$alarm_list = 1;
		if(count($rows)>0){
			for ($i=1;$i<$total_rows;$i++){
				$new_code = $rows[$i]->alarm_type;
				$alarm_list .= $alarm_code.",".$new_code;
			}
		}else{
			$alarm_list = 0;
		}
	
		return $alarm_list;
		
	}
	
	function getalarmname($id){
		$this->db = $this->load->database("tensor_report", TRUE);
		$this->db->select("alarm_name,alarm_level,alarm_group");	
		$this->db->order_by("alarm_id","desc");	
		$this->db->where("alarm_type", $id);
		$q = $this->db->get("webtracking_ts_alarm");
		$row = $q->row();
		$total_row = count($row);
		$alarm_name = "-";
		
		if(count($row)>0){
			$alarm_name = $row->alarm_name."|".$row->alarm_level."|".$row->alarm_group;
		}
		
		return $alarm_name;
		
	}
	
	function getalarmreport(){
		ini_set('memory_limit', '2G');
		$this->db = $this->load->database("tensor_report", TRUE);
		$this->db->select("alarm_id,alarm_type,alarm_name,alarm_level");	
		$this->db->order_by("alarm_type", "asc");
		$this->db->where("alarm_status", 2);
		$q = $this->db->get("webtracking_ts_alarm");
		$rows = $q->result();
		
		if(count($rows)>0){
			$alarm_list = $rows;
		}else{
			$alarm_list = false;
		}
	
		return $alarm_list;
		
	}
	
	//overspeed report by cron (1.852)
	function overspeed($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT OVERSPEED >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "overspeed2";
		}else{
			 $report_type = "overspeed";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "overspeed_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed >=", 11.3);    // >= 21 kph
						//$this->dbhist->limit(3000);
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed >=", 11.3);  // >= 21 kph  						
                        //$this->dbhist2->limit(3000);
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						$rows = array_merge($rows1, $rows2); //limit data rows = 10000
                        $trows = count($rows);
        
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
						
								$speed_level = 0;
								$delta_speed = 0;
								$speed_level_alias = "";
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								//print_r($position->display_name);exit();
								$direction = $rows[$i]->gps_course;
								$arah = "";
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								$jalur = $this->get_jalurname_new($direction);
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									if($jalur == "muatan"){
										$geofence_speed_limit = $geofence_speed_muatan;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = $geofence_speed;
									}else{
										$geofence_speed_limit = 0;
									}
								}
								
								//jika limit 0 di bypass speed status 0
								if($geofence_speed_limit == 0){
									$speed_status = 0;
								}else{
									//jika gps speed > limit 
									if($gpsspeed_kph > ($geofence_speed_limit+1)){ //tolerani jika 50 : 50 status invalid
										$speed_status = 1;
										$delta_speed = $gpsspeed_kph - $geofence_speed_limit;
						
										if($delta_speed > 0 && $delta_speed < 6){
											$speed_level = 1;
											$speed_level_alias = "Level 1";
										}else if($delta_speed > 5 && $delta_speed < 11){
											$speed_level = 2;
											$speed_level_alias = "Level 2";
										}else if($delta_speed > 10 && $delta_speed < 21){
											$speed_level = 3;
											$speed_level_alias = "Level 3";
										}else if($delta_speed > 20 && $delta_speed < 9999){
											$speed_level = 4;
											$speed_level_alias = "Level 4";
										}else{
											$speed_level = 0;
											$speed_level_alias = "-";
										}
										
									}else{
										$speed_status = 0;
									}
								}
								
								$overspeed_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$overspeed_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$overspeed_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$overspeed_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$overspeed_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$overspeed_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$overspeed_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$overspeed_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$overspeed_report_type = $reporttype;
								$overspeed_report_name = "overspeed";
								$overspeed_report_speed = $gpsspeed_kph;
								$overspeed_report_speed_status = $speed_status;
								$overspeed_report_gpsstatus = $gps_status;
								$overspeed_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$overspeed_report_geofence_id = $geofence_id;
								$overspeed_report_geofence_name = $geofence_name;
								$overspeed_report_geofence_limit = $geofence_speed_limit;
								$overspeed_report_geofence_type = $geofence_type;
								$overspeed_report_jalur = $jalur;
								$overspeed_report_level = $speed_level;
								$overspeed_report_level_alias = $speed_level_alias;
								$overspeed_report_delta = $delta_speed;
								
								$overspeed_report_direction = $rows[$i]->gps_course;
								$overspeed_report_direction_status = $arah;
								$overspeed_report_duration = "";
								$overspeed_report_duration_sec = 0;
								$overspeed_report_location = $position_name;
								$overspeed_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								
								$datainsert["overspeed_report_vehicle_user_id"] = $overspeed_report_vehicle_user_id;
								$datainsert["overspeed_report_vehicle_id"] = $overspeed_report_vehicle_id;
								$datainsert["overspeed_report_vehicle_device"] = $overspeed_report_vehicle_device;
								$datainsert["overspeed_report_imei"] = $overspeed_report_imei;
								$datainsert["overspeed_report_vehicle_no"] = $overspeed_report_vehicle_no;
								$datainsert["overspeed_report_vehicle_name"] = $overspeed_report_vehicle_name;
								$datainsert["overspeed_report_vehicle_type"] = $overspeed_report_vehicle_type;
								$datainsert["overspeed_report_vehicle_company"] = $overspeed_report_vehicle_company;
								$datainsert["overspeed_report_type"] = $overspeed_report_type;
								$datainsert["overspeed_report_name"] = $overspeed_report_name;
								$datainsert["overspeed_report_speed"] = $overspeed_report_speed;
								$datainsert["overspeed_report_speed_status"] = $overspeed_report_speed_status;
								$datainsert["overspeed_report_gpsstatus"] = $overspeed_report_gpsstatus;
								$datainsert["overspeed_report_gps_time"] = $overspeed_report_gps_time;
								$datainsert["overspeed_report_geofence_id"] = $overspeed_report_geofence_id;
								$datainsert["overspeed_report_geofence_name"] = $overspeed_report_geofence_name;
								$datainsert["overspeed_report_geofence_limit"] = $overspeed_report_geofence_limit;
								$datainsert["overspeed_report_geofence_type"] = $overspeed_report_geofence_type;
								$datainsert["overspeed_report_jalur"] = $overspeed_report_jalur;
								
								$datainsert["overspeed_report_level"] = $overspeed_report_level;
								$datainsert["overspeed_report_level_alias"] = $overspeed_report_level_alias;
								$datainsert["overspeed_report_delta"] = $overspeed_report_delta;
							
								$datainsert["overspeed_report_direction"] = $overspeed_report_direction;
								$datainsert["overspeed_report_direction_status"] = $overspeed_report_direction_status;
								$datainsert["overspeed_report_duration"] = $overspeed_report_duration;
								$datainsert["overspeed_report_duration_sec"] = $overspeed_report_duration_sec;
								$datainsert["overspeed_report_location"] = $overspeed_report_location;
								$datainsert["overspeed_report_coordinate"] = $overspeed_report_coordinate;
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."OVERSPEED";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("overspeed_report_id");
								$this->dbtrip->where("overspeed_report_gps_time >=",$sdate);
								$this->dbtrip->where("overspeed_report_gps_time <=",$edate);
								//$this->dbtrip->where("location_report_name ","location");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	}
	
	//get new alarm / send telegram
	function last_overspeed_telegram($userid="", $orderby="", $dbname_live=""){
		ini_set('memory_limit', '2G');
		date_default_timezone_set("Asia/Jakarta");
		$nowtime = date("Y-m-d H:i:s");
		$nowtime_wita = date("Y-m-d H:i:s", strtotime($nowtime . "+1hours"));
		$last_fiveminutes = date("Y-m-d H:i:s", strtotime($nowtime_wita . "-3minutes"));
		
		$this->db = $this->load->database("default",true); 
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dblive = $this->load->database($dbname_live,true); 
		$z = 0;
		
        for($x=0;$x<count($rowvehicle);$x++){
			$z = $z+1;
			printf("===Process Vehicle %s  (%s of %s) \r\n", $rowvehicle[$x]->vehicle_no, $z, $total_process);
			printf("===LAST FIVE MIN WIB %s \r\n", $last_fiveminutes);
			$ex_vehicle = explode("@",$rowvehicle[$x]->vehicle_device);
			$imei = $ex_vehicle[0];
			$lastoverspeed = $this->getLastOverspeed($imei,$last_fiveminutes,$dbname_live,$rowvehicle[$x]);
			printf("============================================ \r\n");
		}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$endtime = date("Y-m-d H:i:s");
		printf("===FINISH %s to %s \r\n", $nowtime, $endtime);
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "LAST OVERSPEED TELEGRAM";
			$message = urlencode(
					"".$title_name." \n".
					"Start Time: ".$nowtime." \n".
					"End Time: ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-671321211",$message); //autocheck hour
		printf("===SENT TELEGRAM OK\r\n");
	}
	
	//by last gps alert
	function getLastOverspeed($imei,$last_fiveminutes,$dbname_live,$data_vehicle){
		ini_set('memory_limit', '3G');
		printf("===GET LAST OVERSPEED \r\n");
		
		$last_fiveminutes_utc = date("Y-m-d H:i:s", strtotime($last_fiveminutes . "-7hours"));
		printf("===LAST FIVE MIN %s UTC %s WITA \r\n", $last_fiveminutes_utc, $last_fiveminutes);
		
		$this->dbalert = $this->load->database($dbname_live, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","desc");
		$this->dbalert->where("gps_time >=", $last_fiveminutes_utc);
        //$this->dbalert->where("gps_time <=", $edate);
		$this->dbalert->where("gps_speed >=", 11.3);  // >= 21 kph  		
		//$this->dbalert->where("gps_speed_status", 1);
		$this->dbalert->where("gps_alert", "Speeding Alarm"); 
		$this->dbalert->where("gps_notif", 0); //belum ke send 
		$this->dbalert->limit(1);
		$q = $this->dbalert->get("gps_alert");
		$rows = $q->row();
		$total_alert = count($rows);
		//print_r($rows);
		
		if($total_alert >0){
			//exit();
				$title_name = "OVERSPEED ALARM";
				$vehicle_device = $rows->gps_name."@".$rows->gps_host;
				$data_vehicle = $this->getvehicle($vehicle_device);
				$vehicle_id = $data_vehicle->vehicle_id;
				$vehicle_no = $data_vehicle->vehicle_no;
				$vehicle_name = $data_vehicle->vehicle_name;
				$vehicle_company = $data_vehicle->vehicle_company;
				$vehicle_dblive = $data_vehicle->vehicle_dbname_live;
				$telegram_group = $this->get_telegramgroup_overspeed($data_vehicle->vehicle_company);
				//$telegram_group = "-495868829"; //testing anything
				
				//matikan sementara driver , tunggu cam pasang
				/* $driver = $this->getdriver($vehicle_id);
				if($driver == false){
					$driver_name = "-";
				}else{
					$driver_ex = explode("-",$driver);
					$driver_name = $driver_ex[1];
				} */
				
				$driver_name = "-";
				
				
				printf("===Process Alarm %s %s %s \r\n", $rows->gps_alert, $rows->gps_time, $data_vehicle->vehicle_no);
				$skip_sent = 0;
				$position = $this->getPosition_other($rows->gps_longitude_real,$rows->gps_latitude_real);
					if(isset($position)){
						$ex_position = explode(",",$position->display_name);
						if(count($ex_position)>0){
							$position_name = $ex_position[0];
						}else{
							$position_name = $ex_position[0];
						}
					}else{
						$position_name = $position->display_name;
							$skip_sent = 1;
					}
					
					
						//filter in location array HAULING, ROM, PORT 
						$street_onduty = array("PORT BIB","PORT BIR","PORT TIA",
												//"ST1","ST2","ST3","ST4","ST5","ST6","ST7","ST8","ST9","ST10","ST11","ST12",
												"ROM A1","ROM B1","ROM B2","ROM B3","ROM EST",
												"ROM B1 ROAD","ROM B2 ROAD","EST ROAD","ROM 06 ROAD",
												//"POOL BBS","POOL BKA","POOL BSL","POOL GECL","POOL MKS","POOL RAM","POOL RBT","POOL STLI","POOL RBT BRD","POOL GECL 2",
												//"WS GECL","WS KMB","WS MKS","WS RBT","WS MMS","WS EST","WS KMB INDUK","WS GECL 3","WS BRD","WS BEP","WS BBB",
												
												"KM 0","KM 0.5","KM 1","KM 1.5","KM 2","KM 2.5","KM 3","KM 3.5","KM 4","KM 4.5","KM 5","KM 5.5",
												"KM 7.5","KM 8","KM 8.5","KM 9","KM 9.5","KM 10","KM 10.5","KM 11","KM 11.5","KM 12","KM 12.5","KM 13","KM 13.5","KM 14","KM 14.5","KM 15","KM 15.5","KM 16",
												"KM 16.5","KM 17","KM 17.5","KM 18","KM 18.5","KM 19","KM 19.5","KM 20","KM 20.5","KM 21","KM 21.5","KM 22","KM 22.5","KM 23","KM 23.5","KM 24","KM 24.5","KM 25","KM 25.5","KM 26",
												"KM 26.5","KM 27","KM 27.5","KM 28","KM 28.5","KM 29","KM 29.5","KM 30","KM 30.5","KM 31","KM 31",
												
												"BIB CP 1","BIB CP 2","BIB CP 3","BIB CP 4","BIB CP 5","BIB CP 6","BIB CP 7",
												"BIR Ant.S LS","BIR Ant.S LS 2","BIR LS","BIR Ant BLC","BIR Ant BLC 2",
												"Port BIR - Kosongan 1","Port BIR - Kosongan 2","Simpang Bayah - Kosongan",
												"Port BIB - Kosongan 2","Port BIB - Kosongan 1","Port BIR - Antrian WB",
												"PORT BIB - Antrian","Port BIB - Antrian"
											);
														
					
						if (in_array($position_name, $street_onduty)){
							$skip_sent = 0;
						}else{
							$skip_sent = 1;
						}
						
						
						
				
				$gps_time = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows->gps_time))); //sudah wita
				$coordinate = $rows->gps_latitude_real.",".$rows->gps_longitude_real;
				//$url = "http://maps.google.com/maps?z=12&t=m&q=loc:".$coordinate;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				//https://www.google.com/maps/search/?api=1&query=-6.2915399,106.9660776 : ex
				$gpsspeed_kph = round($rows->gps_speed*1.852,0);
				$direction = $rows->gps_course;
				$jalur = $this->get_jalurname_new($direction);
				if($jalur == ""){
					$jalur = $rows->gps_last_road_type;
				}
				
				
				$rowgeofence = $this->getGeofence_location_live($rows->gps_longitude_real, $rows->gps_latitude_real, $vehicle_dblive);
							
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									if($jalur == "muatan"){
										$geofence_speed_limit = $geofence_speed_muatan;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = $geofence_speed;
									}else{
										$geofence_speed_limit = 0;
										
									}
								}
						printf("===Position : %s Geofence : %s Jalur: %s \r\n", $position_name, $geofence_name, $jalur);
						printf("===Speed : %s Limit : %s \r\n", $gpsspeed_kph, $geofence_speed_limit);
						
						if($gpsspeed_kph <= $geofence_speed_limit){
							$skip_sent = 1;
						}
						
						if($geofence_speed_limit == 0){
							$skip_sent = 1;
						}
						
						$gpsspeed_kph = $gpsspeed_kph-3;
						$geofence_speed_limit = $geofence_speed_limit-3;
						$message = urlencode(
							"".$title_name." \n".
							"Time: ".$gps_time." \n".
							"Vehicle No: ".$vehicle_no." ".$vehicle_name." \n".
							"Driver: ".$driver_name." \n".
							"Position: ".$position_name." \n".
							"Coordinate: ".$url." \n".
							"Speed (kph): ".$gpsspeed_kph." \n".
							"Rambu (kph): ".$geofence_speed_limit." \n".
							"Geofence: ".$geofence_name." \n".
							"Jalur: ".$jalur." \n"
							
							);
							
				//printf("===Message : %s \r\n", $message);
				sleep(2);		
				if($skip_sent == 0){
					$sendtelegram = $this->telegram_direct($telegram_group,$message);
					printf("===SENT TELEGRAM OK\r\n");	
				}else{
					
					printf("X==SKIP SENT TELEGRAM\r\n");	
				}
				
				
				//update notif status == 1
				unset($datanotif);
				$datanotif["gps_notif"] = 1;
				$this->dbalert->where("gps_name", $rows->gps_name);
				$this->dbalert->where("gps_time", $rows->gps_time);
				$this->dbalert->update("gps_alert",$datanotif);
				printf("===UPDATE NOTIF OKE \r\n ");
				
		}else{
			printf("NO DATA OVERSPEED \r\n");
		}
		
			
		$this->dbalert->close();
		$this->dbalert->cache_delete_all();
			
		
	}
	
	
	//by gps alert
	function overspeed_telegram($userid){
		ini_set('memory_limit', '3G');
		date_default_timezone_set("Asia/Jakarta");
		printf("==GET NEW OVERSPEED >> START \r\n");
		$nowtime = date("Y-m-d H:i:s");
		$nowtime_wita = date("Y-m-d H:i:s", strtotime($nowtime . "+1hours"));
		$last_fiveminutes = date("Y-m-d H:i:s", strtotime($nowtime_wita . "-3minutes"));
		
		$this->db = $this->load->database("default", TRUE);
		$this->db->select("user_id, user_dblive");	
		$this->db->order_by("user_id","asc");	
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
		$row = $q->row();
		$total_row = count($row);
		
		/* $startdate = date("2022-02-21 19:00:00");
		$enddate = date("Y-m-d 23:59:59"); */
		
		$startdate = $last_fiveminutes;
		$enddate = $nowtime_wita;
		
		/* $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
		$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate))); //wita */
		
		$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
		$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate))); //wita
		
		//print_r($sdate." ".$edate);exit();
		printf("===Periode Alarm %s to %s \r\n", $sdate, $edate);
		if(count($row)>0){
			$user_dblive = $row->user_dblive;
		}
		
		$this->dbalert = $this->load->database($user_dblive, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","asc");
		$this->dbalert->where("gps_time >=", $sdate);
        //$this->dbalert->where("gps_time <=", $edate);
		$this->dbalert->where("gps_speed >=", 11.3);  // >= 21 kph  		
		//$this->dbalert->where("gps_speed_status", 1);
		$this->dbalert->where("gps_alert", "Speeding Alarm"); 
		$this->dbalert->where("gps_notif", 0); //belum ke send 
		//$this->dbalert->limit(5); //limit 
		$q = $this->dbalert->get("gps_alert");
		$rows = $q->result();
		$total_alert = count($rows);
		//print_r($total_alert);exit();
		if($total_alert >0){
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
				$title_name = "OVERSPEED ALARM";
				$vehicle_device = $rows[$i]->gps_name."@".$rows[$i]->gps_host;
				$data_vehicle = $this->getvehicle($vehicle_device);
				$vehicle_id = $data_vehicle->vehicle_id;
				$vehicle_no = $data_vehicle->vehicle_no;
				$vehicle_name = $data_vehicle->vehicle_name;
				$vehicle_company = $data_vehicle->vehicle_company;
				$vehicle_dblive = $data_vehicle->vehicle_dbname_live;
				$telegram_group = $this->get_telegramgroup_overspeed($data_vehicle->vehicle_company);
				//$telegram_group = "-495868829"; //testing anything
				
				//matikan sementara driver , tunggu cam pasang
				/* $driver = $this->getdriver($vehicle_id);
				if($driver == false){
					$driver_name = "-";
				}else{
					$driver_ex = explode("-",$driver);
					$driver_name = $driver_ex[1];
				} */
				
				$driver_name = "-";
				
				
				printf("===Process Alarm ID %s %s %s (%d/%d) \r\n", $rows[$i]->gps_id, $data_vehicle->vehicle_no, $data_vehicle->vehicle_device, $j, $total_alert);
				$skip_sent = 0;
				$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
					if(isset($position)){
						$ex_position = explode(",",$position->display_name);
						if(count($ex_position)>0){
							$position_name = $ex_position[0];
						}else{
							$position_name = $ex_position[0];
						}
					}else{
						$position_name = $position->display_name;
							$skip_sent = 1;
					}
					
					
						//filter in location array HAULING, ROM, PORT 
						$street_onduty = array("PORT BIB","PORT BIR","PORT TIA",
												//"ST1","ST2","ST3","ST4","ST5","ST6","ST7","ST8","ST9","ST10","ST11","ST12",
												"ROM A1","ROM B1","ROM B2","ROM B3","ROM EST",
												"ROM B1 ROAD","ROM B2 ROAD","EST ROAD","ROM 06 ROAD",
												//"POOL BBS","POOL BKA","POOL BSL","POOL GECL","POOL MKS","POOL RAM","POOL RBT","POOL STLI","POOL RBT BRD","POOL GECL 2",
												//"WS GECL","WS KMB","WS MKS","WS RBT","WS MMS","WS EST","WS KMB INDUK","WS GECL 3","WS BRD","WS BEP","WS BBB",
												
												"KM 0","KM 0.5","KM 1","KM 1.5","KM 2","KM 2.5","KM 3","KM 3.5","KM 4","KM 4.5","KM 5","KM 5.5",
												"KM 7.5","KM 8","KM 8.5","KM 9","KM 9.5","KM 10","KM 10.5","KM 11","KM 11.5","KM 12","KM 12.5","KM 13","KM 13.5","KM 14","KM 14.5","KM 15","KM 15.5","KM 16",
												"KM 16.5","KM 17","KM 17.5","KM 18","KM 18.5","KM 19","KM 19.5","KM 20","KM 20.5","KM 21","KM 21.5","KM 22","KM 22.5","KM 23","KM 23.5","KM 24","KM 24.5","KM 25","KM 25.5","KM 26",
												"KM 26.5","KM 27","KM 27.5","KM 28","KM 28.5","KM 29","KM 29.5","KM 30","KM 30.5","KM 31","KM 31",
												
												"BIB CP 1","BIB CP 2","BIB CP 3","BIB CP 4","BIB CP 5","BIB CP 6","BIB CP 7",
												"BIR Ant.S LS","BIR Ant.S LS 2","BIR LS","BIR Ant BLC","BIR Ant BLC 2",
												"Port BIR - Kosongan 1","Port BIR - Kosongan 2","Simpang Bayah - Kosongan",
												"Port BIB - Kosongan 2","Port BIB - Kosongan 1","Port BIR - Antrian WB",
												"PORT BIB - Antrian","Port BIB - Antrian"
											);
														
					
						if (in_array($position_name, $street_onduty)){
							$skip_sent = 0;
						}else{
							$skip_sent = 1;
						}
						
						
						
				
				$gps_time = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
				$coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
				//$url = "http://maps.google.com/maps?z=12&t=m&q=loc:".$coordinate;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				//https://www.google.com/maps/search/?api=1&query=-6.2915399,106.9660776 : ex
				$gpsspeed_kph = round($rows[$i]->gps_speed*1.852,0);
				$direction = $rows[$i]->gps_course;
				$jalur = $this->get_jalurname_new($direction);
				if($jalur == ""){
					$jalur = $rows[$i]->gps_last_road_type;
				}
				
				
				$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $vehicle_dblive);
							
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									if($jalur == "muatan"){
										$geofence_speed_limit = $geofence_speed_muatan;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = $geofence_speed;
									}else{
										$geofence_speed_limit = 0;
										
									}
								}
						printf("===Position : %s Geofence : %s Jalur: %s \r\n", $position_name, $geofence_name, $jalur);
						printf("===Speed : %s Limit : %s \r\n", $gpsspeed_kph, $geofence_speed_limit);
						
						if($gpsspeed_kph <= $geofence_speed_limit){
							$skip_sent = 1;
						}
						
						if($geofence_speed_limit == 0){
							$skip_sent = 1;
						}
						
						$gpsspeed_kph = $gpsspeed_kph-3;
						$geofence_speed_limit = $geofence_speed_limit-3;
						
						$message = urlencode(
							"".$title_name." \n".
							"Time: ".$gps_time." \n".
							"Vehicle No: ".$vehicle_no." ".$vehicle_name." \n".
							"Driver: ".$driver_name." \n".
							"Position: ".$position_name." \n".
							"Coordinate: ".$url." \n".
							"Speed (kph): ".$gpsspeed_kph." \n".
							"Rambu (kph): ".$geofence_speed_limit." \n".
							"Goefence: ".$geofence_name." \n".
							"Jalur: ".$jalur." \n"
							
							);
							
				//printf("===Message : %s \r\n", $message);
				sleep(2);		
				if($skip_sent == 0){
					$sendtelegram = $this->telegram_direct($telegram_group,$message);
					printf("===SENT TELEGRAM OK\r\n");	
				}else{
					
					printf("X==SKIP SENT TELEGRAM\r\n");	
				}
				
				
				//update notif status == 1
				unset($datanotif);
				$datanotif["gps_notif"] = 1;
				$this->dbalert->where("gps_name", $rows[$i]->gps_name);
				$this->dbalert->where("gps_time", $rows[$i]->gps_time);
				$this->dbalert->update("gps_alert",$datanotif);
				printf("===UPDATE NOTIF OKE \r\n ");
				
				$j++;
			}
				
		}else{
			printf("NO DATA OVERSPEED \r\n");
		}
		
			$this->db->close();
			$this->db->cache_delete_all();
			$this->dbalert->close();
			$this->dbalert->cache_delete_all();
			
			$finishtime = date("Y-m-d H:i:s");
			
			//send telegram
			$title_name = "OVERSPEED ALERT CHECK";
				$message = urlencode(
						"".$title_name." \n".
						"Start Time: ".$nowtime." \n".
						"End Time: ".$finishtime." \n"
					);
			sleep(2);		
			$sendtelegram = $this->telegram_direct("-671321211",$message); //autocheck hour
			printf("===SENT TELEGRAM OK\r\n");
		
		
			
			printf("===FINISH %s to %s \r\n", $nowtime, $finishtime);
		
		
	}
	
	
	function sos_telegram($userid){
		
		printf("==GET NEW SOS >> START \r\n");
		$nowdate = date("Y-m-d H:i:s");
		$this->db = $this->load->database("default", TRUE);
		$this->db->select("user_id, user_dblive");	
		$this->db->order_by("user_id","asc");	
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
		$row = $q->row();
		$total_row = count($row);
		
		$startdate = date("Y-m-d 00:00:00");
		$enddate = date("Y-m-d 23:59:59");
		
		$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
		$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate))); //wita
		
		//print_r($sdate." ".$edate);exit();
		
		if(count($row)>0){
			$user_dblive = $row->user_dblive;
		}
		
		$this->dbalert = $this->load->database($user_dblive, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","asc");
		$this->dbalert->where("gps_time >=", $sdate);
        $this->dbalert->where("gps_time <=", $edate);
		$this->dbalert->where("gps_notif", 0); //belum ke send 
		$this->dbalert->where("gps_alert", "Input1 active (SOS)");
		//$this->dbalert->limit(1);
		$q = $this->dbalert->get("gps_alert");
		$rows = $q->result();
		$total_alert = count($rows);
		//print_r($total_alert);exit();
		if($total_alert >0){
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
				$title_name = "SOS BUTTON";
				$vehicle_device = $rows[$i]->gps_name."@".$rows[$i]->gps_host;
				$data_vehicle = $this->getvehicle($vehicle_device);
				$vehicle_id = $data_vehicle->vehicle_id;
				$vehicle_no = $data_vehicle->vehicle_no;
				$vehicle_name = $data_vehicle->vehicle_name;
				$vehicle_company = $data_vehicle->vehicle_company;
				$vehicle_dblive = $data_vehicle->vehicle_dbname_live;
				$telegram_group = $this->get_telegramgroup_sos($data_vehicle->vehicle_company);
				//$telegram_group = "-495868829";
				$driver = $this->getdriver($vehicle_id);
				if($driver == false){
					$driver_name = "-";
				}else{
					$driver_ex = explode("-",$driver);
					$driver_name = $driver_ex[1];
				}
				
				
				printf("===Process Alarm ID %s %s %s (%d/%d) \r\n", $rows[$i]->gps_id, $data_vehicle->vehicle_no, $data_vehicle->vehicle_device, $j, $total_alert);
				
				$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
					if(isset($position)){
						$ex_position = explode(",",$position->display_name);
						if(count($ex_position)>0){
							$position_name = $ex_position[0];
						}else{
							$position_name = $ex_position[0];
						}
					}else{
						$position_name = $position->display_name;
					}
				
				$gps_time = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
				$coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
				//$url = "http://maps.google.com/maps?z=12&t=m&q=loc:".$coordinate;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$gpsspeed_kph = round($rows[$i]->gps_speed*1.852,0);
				$direction = $rows[$i]->gps_course;
				$jalur = $this->get_jalurname($direction);
				if($jalur == ""){
					$jalur = $rows[$i]->gps_last_road_type;
				}
				printf("===Jalur : %s \r\n", $jalur);
				
				$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $vehicle_dblive);
							
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									if($jalur == "muatan"){
										$geofence_speed_limit = $geofence_speed_muatan;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = $geofence_speed;
									}else{
										$geofence_speed_limit = 0;
									}
								}
						
						$message = urlencode(
							"".$title_name." \n".
							"Time: ".$gps_time." \n".
							"Vehicle No: ".$vehicle_no." ".$vehicle_name." \n".
							"Driver: ".$driver_name." \n".
							"Position: ".$position_name." \n".
							"Coordinate: ".$url." \n".
							"Speed (kph) : ".$gpsspeed_kph." \n".
							//"Limit (kph) : ".$geofence_speed_limit." \n".
							"Geofence: ".$geofence_name." \n".
							"Jalur/Arah: ".$jalur." \n"
							
							);
							
				//printf("===Message : %s \r\n", $message);
				sleep(2);			
				$sendtelegram = $this->telegram_direct($telegram_group,$message);
				printf("===SENT TELEGRAM OK\r\n");	
				
				//update notif status == 1
				unset($datanotif);
				$datanotif["gps_notif"] = 1;
				$this->dbalert->where("gps_name", $rows[$i]->gps_name);
				$this->dbalert->where("gps_time", $rows[$i]->gps_time);
				$this->dbalert->update("gps_alert",$datanotif);
				printf("===UPDATE NOTIF OKE \r\n ");
				
				$j++;
			}
				
		}else{
			printf("NO DATA OVERSPEED \r\n");
		}
		
			$this->db->close();
			$this->db->cache_delete_all();
			$this->dbalert->close();
			$this->dbalert->cache_delete_all();
			
			$enddate = date("Y-m-d H:i:s");
			printf("===FINISH %s to %s \r\n", $nowdate, $enddate);
		
		
	}
	
	//get new alarm / send telegram
	function alarmevidence_telegram($userid){
		
		printf("==GET NEW Security Evidence >> START \r\n");
		$nowdate = date("Y-m-d H:i:s");
		//$nowtime_wita = date("Y-m-d H:i:s", strtotime($nowtime . "+1hours"));
		$nowtime_wita = $nowdate;
		$last_fiveminutes = date("Y-m-d H:i:s", strtotime($nowdate . "-2hours"));
		
		$report = "alarm_evidence_";
		$report_sum = $report;
		$this->db = $this->load->database("default", TRUE);
		$this->db->select("user_id, user_dblive");	
		$this->db->order_by("user_id","asc");	
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
		$row = $q->row();
		$total_row = count($row);
		
		/* $startdate = date("Y-m-d 00:00:00");
		$enddate = date("Y-m-d 23:59:59"); */
		
		$startdate = $last_fiveminutes;
		$enddate = $nowtime_wita;
		
		$sdate = $startdate;
		$edate = $enddate;
		
		//print_r($sdate." ".$edate);exit();
		
		printf("===Periode :  %s %s \r\n", $sdate, $edate);
		
		$m1 = date("F", strtotime($sdate));
		$m2 = date("m", strtotime($sdate));
		$year = date("Y", strtotime($sdate));
		$year2 = date("Y", strtotime($edate));
		$rows = array();
		$total_q = 0;

		$error = "";
		$rows_summary = "";

		switch ($m1)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_sum = $report_sum."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_sum = $report_sum."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_sum = $report_sum."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_sum = $report_sum."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_sum = $report_sum."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_sum = $report_sum."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_sum = $report_sum."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_sum = $report_sum."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_sum = $report_sum."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_sum = $report_sum."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_sum = $report_sum."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_sum = $report_sum."desember_".$year;
			break;
		}
		
		if(count($row)>0){
			$user_dblive = $row->user_dblive;
		}
		
		$alarm_list = array(
							"Smoking Alarm Level One Start","Smoking Alarm Level Two Start",
							"Distracted Driving Alarm Level One Start","Smoking Alarm Level Two Start",
							"Fatigue Driving Alarm Level One Start","Fatigue Driving Alarm Level Two Start",
							"Call to Call The Alarm Level One Start","Call to Call The Alarm Level Two Start",
							"Car Distance Near Alarm Level One Start","Car Distance Near Alarm Level Two Start",
							"Driver Abnormal Alarm Level One Start","Driver Abnormal Alarm Level Two Start",
							);
							
		$street_onduty = array( "PORT BIB","PORT BIR","PORT TIA",
															//"ST1","ST2","ST3","ST4","ST5","ST6","ST7","ST8","ST9","ST10","ST11","ST12",
															"ROM A1","ROM A2","ROM B1","ROM B2","ROM B3","ROM EST",
															"ROM B1 ROAD","ROM B2 ROAD","EST ROAD","ROM 06 ROAD",
															//"POOL BBS","POOL BKA","POOL BSL","POOL GECL","POOL MKS","POOL RAM","POOL RBT","POOL STLI","POOL RBT BRD","POOL GECL 2",
															//"WS GECL","WS KMB","WS MKS","WS RBT","WS MMS","WS EST","WS EST 32","WS KMB INDUK","WS GECL 3","WS BRD","WS BEP","WS BBB",
															
															"KM 0","KM 0.5","KM 1","KM 1.5","KM 2","KM 2.5","KM 3","KM 3.5","KM 4","KM 4.5","KM 5","KM 5.5","KM 6","KM 6.5","KM 7",
															"KM 7.5","KM 8","KM 8.5","KM 9","KM 9.5","KM 10","KM 10.5","KM 11","KM 11.5","KM 12","KM 12.5","KM 13","KM 13.5","KM 14","KM 14.5","KM 15","KM 15.5","KM 16",
															"KM 16.5","KM 17","KM 17.5","KM 18","KM 18.5","KM 19","KM 19.5","KM 20","KM 20.5","KM 21","KM 21.5","KM 22","KM 22.5","KM 23","KM 23.5","KM 24","KM 24.5","KM 25","KM 25.5","KM 26",
															"KM 26.5","KM 27","KM 27.5","KM 28","KM 28.5","KM 29","KM 29.5","KM 30","KM 30.5","KM 31","KM 31",
															
															"BIB CP 1","BIB CP 2","BIB CP 3","BIB CP 4","BIB CP 5","BIB CP 6","BIB CP 7",
															"BIR Ant.S LS","BIR Ant.S LS 2","BIR LS","BIR Ant BLC","BIR Ant BLC 2",
															"Port BIR - Kosongan 1","Port BIR - Kosongan 2","Simpang Bayah - Kosongan",
															"Port BIB - Kosongan 2","Port BIB - Kosongan 1","Port BIR - Antrian WB",
															"PORT BIB - Antrian","Port BIB - Antrian"
														);
		
		$this->dbalert = $this->load->database("tensor_report", TRUE);
		
		$this->dbalert->order_by("alarm_report_start_time","desc");
		$this->dbalert->where("alarm_report_media", 0); //photo
		$this->dbalert->where("alarm_report_notif", 0); //belum ke send 
		$this->dbalert->where("alarm_report_start_time >=", $sdate);
		$this->dbalert->where("alarm_report_start_time <=", $edate);
		
		$this->dbalert->where_in("alarm_report_name", $alarm_list);
		$this->dbalert->where_in("alarm_report_location_start", $street_onduty);
		//$this->dbalert->where("alarm_report_id", 34782);
		$this->dbalert->limit(100);
		$q = $this->dbalert->get($dbtable);
		$rows = $q->result();
		$total_alert = count($rows);
		//print_r($rows);exit();
		if($total_alert >0){
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
				$title_text = str_replace("Start","",$rows[$i]->alarm_report_name);
				$title_name = strtoupper($title_text);
				$vehicle_id = $rows[$i]->alarm_report_vehicle_id."@TK510";
				$vehicle_no = $rows[$i]->alarm_report_vehicle_no;
				$vehicle_name = $rows[$i]->alarm_report_vehicle_name;
				//$telegram_group = $this->get_telegramgroup_overspeed($data_vehicle->vehicle_company);
				$telegram_group = "-657527213,"; //FMS Testing
				$driver = false;
				//$driver = $this->getdriver($vehicle_id);
				if($driver == false){
					$driver_name = "";
				}else{
					$driver_ex = explode("-",$driver);
					$driver_name = $driver_ex[1];
				}
				
				printf("===Process Alarm ID %s %s (%d/%d) \r\n", $title_name, $vehicle_no, $j, $total_alert);
				
				$position_name = $rows[$i]->alarm_report_location_start;
				$gps_time = date("d-m-Y H:i:s", strtotime("+1 hour", strtotime($rows[$i]->alarm_report_start_time))); //sudah wita
				$coordinate = $rows[$i]->alarm_report_coordinate_start;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$jalur = $rows[$i]->alarm_report_jalur;
				$image_link = $rows[$i]->alarm_report_fileurl;
				$urlimagefix = "<a href=".$image_link.">IMAGE</a>";
				$alertvehicleid = $rows[$i]->alarm_report_vehicle_id;
				$sdate_alert = $rows[$i]->alarm_report_start_time;
				
				
				$reportdetailvideo = $this->getvideo_alarmevidence($dbtable, $alertvehicleid, $sdate_alert);
				//print_r($reportdetailvideo);exit();
				
				$imagealertid = $rows[$i]->alarm_report_id;
				if(count($reportdetailvideo) > 0){
					$videoalertid = $reportdetailvideo[0]['alarm_report_id'];
				}else{
					$videoalertid = 0;
					
				}
				
				$monthforparam = $m2; 
				$user_id_role = 2;
				
				$attachmentlink = "http://attachment.lacaktranslog.com/attachment/".$videoalertid.'/'.$imagealertid.'/'.$monthforparam.'/'.$year.'/'.$user_id_role.'/'.$userid;
				//print_r($attachmentlink);exit();
				$reportdetaildecode = explode("|", $rows[$i]->alarm_report_gpsstatus);
				$gpsspeed_kph = number_format($reportdetaildecode[4]/10, 0, '.', '');
				//printf("===Jalur : %s \r\n", $jalur);
				
				//print_r($attachmentlink);exit();
				
				$message = urlencode(
							"".$title_name." \n".
							"Time: ".$gps_time." \n".
							"Vehicle No: ".$vehicle_no." \n".
							"Driver: ".$driver_name." \n".
							"Position: ".$position_name." \n".
							"Speed (kph) : ".$gpsspeed_kph." \n".
							"Coordinate: ".$url." \n".
							"link: ".$attachmentlink." \n"
					);
							
				//printf("===Message : %s \r\n", $message);
						
				if($videoalertid > 0){
					sleep(4);	
					$sendtelegram = $this->telegram_direct($telegram_group,$message);
					printf("===SENT TELEGRAM OK\r\n");	
				}
				
				
				//update notif status == 1
				unset($datanotif);
				$datanotif["alarm_report_notif"] = 1;
				$this->dbalert->where("alarm_report_id", $rows[$i]->alarm_report_id);
				$this->dbalert->limit(1);
				$this->dbalert->update($dbtable,$datanotif);
				printf("===UPDATE NOTIF OKE \r\n ");
				
				$j++;
			}
				
		}else{
			printf("NO DATA SECURITY EVIDENCE \r\n");
		}
		
			$this->db->close();
			$this->db->cache_delete_all();
			$this->dbalert->close();
			$this->dbalert->cache_delete_all();
			
			$enddate = date("Y-m-d H:i:s");
			printf("===FINISH %s to %s \r\n", $nowdate, $enddate);
		
		
	}
	
	function getvideo_alarmevidence($table, $alertid, $sdate){
      $this->dbalarm = $this->load->database("webtracking_kalimantan", true);
      $this->dbalarm->select("alarm_report_downloadurl,alarm_report_id");
      $this->dbalarm->where("alarm_report_vehicle_id", $alertid);
      $this->dbalarm->where("alarm_report_start_time", $sdate);
      $this->dbalarm->where("alarm_report_media", 1);
      $this->dbalarm->group_by("alarm_report_start_time");
      $q             = $this->dbalarm->get($table);
      return  $q->result_array();
    }
	
	//get new alarm / send telegram
	function alarm_telegram($userid){
		
		printf("==GET NEW ALARM >> START \r\n");
		$nowdate = date("Y-m-d H:i:s");
		$this->db = $this->load->database("default", TRUE);
		$this->db->select("user_id, user_dblive");	
		$this->db->order_by("user_id","asc");	
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
		$row = $q->row();
		$total_row = count($row);
		
		//$nowdate_utc = date("Y-m-d H:i:s", strtotime($nowdate . "-7hours"));
		$startdate = date("Y-m-d H:i:s", strtotime($nowdate . "-1hours"));
		//$startdate = date("Y-m-d H:i:s", strtotime($nowdate . "-10minutes"));
		
		//$startdate = date("Y-m-d 00:00:00");
		$enddate = date("Y-m-d 23:59:59");
		
		$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wib
		$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate))); //wib
		
		//print_r($sdate." ".$edate);exit();
		printf("===periode date %s %s \r\n", $sdate, $edate);
		
		$list_alarm = $this->config->item('tms_alarm_telegram');
		
		if(count($row)>0){
			$user_dblive = $row->user_dblive;
		}
		
		$this->dbalert = $this->load->database($user_dblive, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","asc");
		$this->dbalert->where("gps_time >=", $sdate);
        $this->dbalert->where("gps_time <=", $edate);
		$this->dbalert->where("gps_notif", 0); //belum ke send 
		$this->dbalert->where_in("gps_alert", $list_alarm);
		//$this->dbalert->limit(1);
		$q = $this->dbalert->get("gps_alert");
		$rows = $q->result();
		$total_alert = count($rows);
		//print_r($total_alert);exit();
		if($total_alert >0){
			$j = 1;
			for ($i=0;$i<count($rows);$i++)
			{
				$title_name = "";
				$vehicle_device = $rows[$i]->gps_name."@".$rows[$i]->gps_host;
				$data_vehicle = $this->getvehicle($vehicle_device);
				$vehicle_id = $data_vehicle->vehicle_id;
				$vehicle_no = $data_vehicle->vehicle_no;
				$vehicle_name = $data_vehicle->vehicle_name;
				$vehicle_company = $data_vehicle->vehicle_company;
				$vehicle_dblive = $data_vehicle->vehicle_dbname_live;
				$telegram_group = $this->get_telegramgroup_overspeed($data_vehicle->vehicle_company);
				
				$driver = $this->getdriverByIdButton_alarm($rows[$i]->gps_name,$user_dblive,$sdate,$edate);
				
				if($driver == false){
					$driver_name = "-";
				}else{
					$driver_ex = explode("-",$driver);
					$driver_name = $driver_ex[1];
				}
				
				printf("===Process Alarm ID %s %s %s %s (%d/%d) \r\n", $rows[$i]->gps_id, $rows[$i]->gps_alert, $data_vehicle->vehicle_no, $data_vehicle->vehicle_device, $j, $total_alert);
				
				$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
					if(isset($position)){
						$ex_position = explode(",",$position->display_name);
						if(count($ex_position)>0){
							$position_name = $ex_position[0];
						}else{
							$position_name = $ex_position[0];
						}
					}else{
						$position_name = $position->display_name;
					}
				$skip_telegram = 0;
				if($position_name == "Unknown Location!"){
					$skip_telegram = 1;
				}
				
				$gps_time = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wib
				$coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
				//$url = "http://maps.google.com/maps?z=12&t=m&q=loc:".$coordinate;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$gpsspeed_kph = round($rows[$i]->gps_speed*1.852,0);
				$direction = $rows[$i]->gps_course;
				$jalur = $this->get_jalurname_new_dblive($rows[$i]->gps_name,$user_dblive);
				if($jalur == ""){
					$jalur = $this->get_jalurname_new($direction);
				}
				printf("===Jalur : %s \r\n", $jalur); 
				
				$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $user_dblive);
							
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									if($jalur == "muatan"){
										$geofence_speed_limit = $geofence_speed_muatan;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = $geofence_speed;
									}else{
										$geofence_speed_limit = 0;
									}
								}
								
					$title_name = $rows[$i]->gps_alert;
					
					if($rows[$i]->gps_alert == "Speeding alarm"){
						$title_name = "Overspeed Alarm";
						$limit_spdtxt = "Limit (kph) : ".$geofence_speed_limit." \n";
					}else{
						$limit_spdtxt = "";
					}
						
						$message = urlencode(
							"".$title_name." \n".
							"Time: ".$gps_time." \n".
							"Vehicle No: ".$vehicle_no." ".$vehicle_name." \n".
							"Driver: ".$driver_name." \n".
							"Position: ".$position_name." \n".
							"Coordinate: ".$url." \n".
							"Speed (kph) : ".$gpsspeed_kph." \n".
							$limit_spdtxt.
							"Geofence: ".$geofence_name." \n".
							"Jalur: ".$jalur." \n"
							
							);
							
				//printf("===Message : %s \r\n", $message);
				sleep(2);
				if($skip_telegram == 0){
					$sendtelegram = $this->telegram_direct($telegram_group,$message);
					printf("===SENT TELEGRAM OK\r\n");	
				}else{
					printf("==XSKIP TELEGRAM\r\n");	
				}
				
				
				//update notif status == 1
				unset($datanotif);
				$datanotif["gps_notif"] = 1;
				$this->dbalert->where("gps_name", $rows[$i]->gps_name);
				$this->dbalert->where("gps_time", $rows[$i]->gps_time);
				$this->dbalert->update("gps_alert",$datanotif);
				printf("===UPDATE NOTIF OKE \r\n ");
				
				$j++;
			}
				
		}else{
			printf("NO DATA OVERSPEED \r\n");
		}
		
			$this->db->close();
			$this->db->cache_delete_all();
			$this->dbalert->close();
			$this->dbalert->cache_delete_all();
			
			$enddate = date("Y-m-d H:i:s");
			printf("===FINISH %s to %s \r\n", $nowdate, $enddate);
		
		
	}
	
	//overspeed report by cron (1.852)
	function brake($userid="", $orderby="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT BRAKE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "brake";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "brake_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");   
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_cs",53); ///injek rem
						//$this->dbhist->limit(3000);
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_cs",53); ///injek rem					
                        //$this->dbhist2->limit(3000);
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						$rows = array_merge($rows1, $rows2); //limit data rows = 10000
                        $trows = count($rows);
        
                        printf("TOTAL DATA : %s \r\n",$trows);
						//exit();
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								//print_r($position->display_name);exit();
								$direction = $rows[$i]->gps_course;
								$arah = "";
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								//utara
								$ruas1 = 0;
								$ruas2 = 90;
								$ruas3 = 360-90;
								
								//selatan
								$ruas4 = 180-90;
								$ruas5 = 180+90;
								$ruas6 = 180;
								
								if($direction >= $ruas1 && $direction <= $ruas2){ //0 - 90
									$arah = "utara";
									$jalur = "kosongan"; 
								}else if($direction >= $ruas3 && $direction <= 360){ // 360-90 s/d 360
									$arah = "utara";
									$jalur = "kosongan"; 
								}else if($direction >= $ruas6 && $direction <= $ruas5){ // 180 s/d 180+90
									$arah = "selatan";
									$jalur = "muatan"; 
								}else if($direction >= $ruas4 && $direction <= $ruas6){ // 180-90 s/d 180
									$arah = "selatan";
									$jalur = "muatan"; 
								}else{
									$arah = $direction;
									$jalur = "-"; 
								}
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									$geofence_speed_limit = 0;
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
									//semua speed limit status rem =  nol;
									if($jalur == "muatan"){
										$geofence_speed_limit = 0;
									}else if($jalur == "kosongan"){
										$geofence_speed_limit = 0;
									}else{
										$geofence_speed_limit = 0;
									}
								}
								
								//jika limit 0 di bypass speed status 0
								if($geofence_speed_limit == 0){
									$speed_status = 0;
								}else{
									//jika gps speed > limit 
									if($gpsspeed_kph > ($geofence_speed_limit+1)){ //tolerani jika 50 : 50 status invalid
										$speed_status = 1;
									}else{
										$speed_status = 0;
									}
								}
								
								$brake_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$brake_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$brake_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$brake_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$brake_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$brake_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$brake_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$brake_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$brake_report_type = 0;
								$brake_report_name = "brake";
								$brake_report_speed = $gpsspeed_kph;
								$brake_report_speed_status = $speed_status;
								$brake_report_gpsstatus = $gps_status;
								$brake_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$brake_report_geofence_id = $geofence_id;
								$brake_report_geofence_name = $geofence_name;
								$brake_report_geofence_limit = $geofence_speed_limit;
								$brake_report_geofence_type = $geofence_type;
								$brake_report_jalur = $jalur;
								$brake_report_direction = $rows[$i]->gps_course;
								$brake_report_direction_status = $arah;
								$brake_report_duration = "";
								$brake_report_duration_sec = 0;
								$brake_report_location = $position_name;
								$brake_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								
								$datainsert["brake_report_vehicle_user_id"] = $brake_report_vehicle_user_id;
								$datainsert["brake_report_vehicle_id"] = $brake_report_vehicle_id;
								$datainsert["brake_report_vehicle_device"] = $brake_report_vehicle_device;
								$datainsert["brake_report_imei"] = $brake_report_imei;
								$datainsert["brake_report_vehicle_no"] = $brake_report_vehicle_no;
								$datainsert["brake_report_vehicle_name"] = $brake_report_vehicle_name;
								$datainsert["brake_report_vehicle_type"] = $brake_report_vehicle_type;
								$datainsert["brake_report_vehicle_company"] = $brake_report_vehicle_company;
								$datainsert["brake_report_type"] = $brake_report_type;
								$datainsert["brake_report_name"] = $brake_report_name;
								$datainsert["brake_report_speed"] = $brake_report_speed;
								$datainsert["brake_report_speed_status"] = $brake_report_speed_status;
								$datainsert["brake_report_gpsstatus"] = $brake_report_gpsstatus;
								$datainsert["brake_report_gps_time"] = $brake_report_gps_time;
								$datainsert["brake_report_geofence_id"] = $brake_report_geofence_id;
								$datainsert["brake_report_geofence_name"] = $brake_report_geofence_name;
								$datainsert["brake_report_geofence_limit"] = $brake_report_geofence_limit;
								$datainsert["brake_report_geofence_type"] = $brake_report_geofence_type;
								$datainsert["brake_report_jalur"] = $brake_report_jalur;
								$datainsert["brake_report_direction"] = $brake_report_direction;
								$datainsert["brake_report_direction_status"] = $brake_report_direction_status;
								$datainsert["brake_report_duration"] = $brake_report_duration;
								$datainsert["brake_report_duration_sec"] = $brake_report_duration_sec;
								$datainsert["brake_report_location"] = $brake_report_location;
								$datainsert["brake_report_coordinate"] = $brake_report_coordinate;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	}
	
	//REV LOCATION
	function location_rev($userid="", $orderby="", $configdb="", $tablesource="", $startdate="", $enddate="" ) 
	{	
		ini_set('memory_limit', '12G');
		printf("===STARTING GET DATA  %s %s \r\n", $userid, $tablesource);
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		//print_r($configdb." ".$tablesource." ".$startdate." ".$enddate);//exit();
		$this->dbreport = $this->load->database($configdb,true); 
		//$this->dbreport->select("location_report_id,location_report_location");
		$this->dbreport->order_by("location_report_id",$orderby);
		$this->dbreport->where("location_report_vehicle_user_id",$userid);
		$this->dbreport->where("location_report_gps_time >=",$startdate);
		$this->dbreport->where("location_report_gps_time <=",$enddate);
		//$this->dbreport->limit(1);
		$this->dbreport->from($tablesource);
        $q_source = $this->dbreport->get();
        $row_source = $q_source->result();
		$total_source = count($row_source);
		printf("===TOTAL DATA %s %s \r\n", $total_source, $tablesource);
		//exit();
		if($total_source > 0)
		{
			
			for ($i=0;$i<$total_source;$i++)
			{
				$j = $i+1;
				$insert = 0;
				
				printf("===PROCESS %s of %s \r\n", $j, $total_source);
				
				$old_id = $row_source[$i]->location_report_id;
				$old_lat = $row_source[$i]->location_report_latitude;
				$old_lng = $row_source[$i]->location_report_longitude;
				$vehicle_no = $row_source[$i]->location_report_vehicle_no;
				$redzone_area = array("ATU area");
				$gps_time = date("d-m-Y H:i:s", strtotime($row_source[$i]->location_report_gps_time));
				$coordinate = $old_lat.",".$old_lng;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$jalur = $row_source[$i]->location_report_jalur;
				$position = $this->getPosition_other($old_lng,$old_lat);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								if (in_array($position_name, $redzone_area)){
									$insert = 1;
									printf("===REDZONE DETECTED %s %s %s \r\n", $vehicle_no, $position_name, $gps_time);
								}
				if($insert == 1)
				{
					$title_name = "REDZONE DETECTED!!";
					$message = urlencode(
								"".$title_name." \n".
								"Time: ".$gps_time." \n".
								"Vehicle No: ".$vehicle_no." \n".
								"Position: ".$position_name." \n".
								"Coordinate: ".$url." \n".
								"Jalur: ".$jalur." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-495868829",$message);
					printf("===SENT TELEGRAM OK\r\n");	
					
					unset($data);
					$data["location_report_location"] = $position_name;
					$this->dbreport->where("location_report_id", $old_id);	
					$this->dbreport->update($tablesource,$data);
					printf("===UPDATE LOCATION OK \r\n");	
				}else{
					
					printf("===SKIP %s %s \r\n", $position_name, $gps_time);
				}
				//exit();
				printf("=============== \r\n");
			}
			
					$title_name = "PENGECEKAN SELESAI!!";
					$message = urlencode(
								"".$title_name." \n".
								"Periode: ".$startdate." - ".$enddate." \n".
								"Total Rows: ".$total_source." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-457733874",$message);
					printf("===SENT TELEGRAM OK\r\n");
			
		}
		else
		{
			printf("===========TIDAK ADA DATA LOCATION======== \r\n"); 
		}
		
	}
	
	//REV LOCATION
	function location_rev_out($userid="", $orderby="", $configdb="", $tablesource="", $startdate="", $enddate="" ) 
	{	
		ini_set('memory_limit', '5G');
		printf("===STARTING GET DATA  %s %s \r\n", $userid, $tablesource);
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		$street_register = array("PORT BIB","PORT BIR","PORT TIA","PORT BBC",
														"ROM 01","ROM 01/02 ROAD","ROM 02","ROM 03","ROM 03/04 ROAD","ROM 04","ROM 05","ROM 06","ROM 06 ROAD",
														"ROM O7","ROM 07/08 ROAD","ROM 08","ROM 09","ROM 10",
														"POOL BBS","POOL BKA","POOL BSL","POOL GECL","POOL KUSAN BAWAH","POOL KUSAN","POOL MKS","POOL RAM","POOL RBT","POOL STLI",
														"WS GECL","WS KMB","WS MKS","WS RBT",
														"KM 0","KM 0.5","KM 1","KM 1.5","KM 2","KM 2.5","KM 3","KM 3.5","KM 4","KM 4.5","KM 5","KM 5.5","KM 6","KM 6.5",
														"KM 7","KM 7.5","KM 8","KM 8.5","KM 9","KM 9.5","KM 10","KM 10.5","KM 11","KM 11.5","KM 12","KM 12.5","KM 13","KM 13.5","KM 14","KM 14.5","KM 15","KM 15.5","KM 16",
														"KM 16.5","KM 17","KM 17.5","KM 18","KM 18.5","KM 19","KM 19.5","KM 20","KM 20.5","KM 21","KM 21.5","KM 22","KM 22.5","KM 23","KM 23.5","KM 24","KM 24.5","KM 25","KM 25.5","KM 26",
														"KM 26.5","KM 27","KM 27.5","KM 28","KM 28.5","KM 29","KM 29.5","KM 30","KM 30.5","KM 31","KM 31");
														
														
		//print_r($configdb." ".$tablesource." ".$startdate." ".$enddate);//exit();
		$this->dbreport = $this->load->database($configdb,true); 
		//$this->dbreport->select("location_report_id,location_report_location");
		$this->dbreport->order_by("location_report_id",$orderby);
		$this->dbreport->where("location_report_vehicle_user_id",$userid);
		$this->dbreport->where("location_report_gps_time >=",$startdate);
		$this->dbreport->where("location_report_gps_time <=",$enddate);
		$this->dbreport->where_not_in("location_report_location",$street_register);
		//$this->dbreport->limit(1);
		$this->dbreport->from($tablesource);
        $q_source = $this->dbreport->get();
        $row_source = $q_source->result();
		$total_source = count($row_source);
		printf("===TOTAL DATA %s %s \r\n", $total_source, $tablesource);
		//exit();
		if($total_source > 0)
		{
			
			for ($i=0;$i<$total_source;$i++)
			{
				$j = $i+1;
				$insert = 0;
				
				printf("===PROCESS %s of %s \r\n", $j, $total_source);
				
				$old_id = $row_source[$i]->location_report_id;
				$old_lat = $row_source[$i]->location_report_latitude;
				$old_lng = $row_source[$i]->location_report_longitude;
				$vehicle_no = $row_source[$i]->location_report_vehicle_no;
				$redzone_area = array("ATU area");
				$gps_time = date("d-m-Y H:i:s", strtotime($row_source[$i]->location_report_gps_time));
				$coordinate = $old_lat.",".$old_lng;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$jalur = $row_source[$i]->location_report_jalur;
				$position = $this->getPosition_other($old_lng,$old_lat);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								if (in_array($position_name, $redzone_area)){
									$insert = 1;
									printf("===REDZONE DETECTED %s %s %s \r\n", $vehicle_no, $position_name, $gps_time);
								}
				if($insert == 1)
				{
					$title_name = "REDZONE DETECTED!!";
					$message = urlencode(
								"".$title_name." \n".
								"Time: ".$gps_time." \n".
								"Vehicle No: ".$vehicle_no." \n".
								"Position: ".$position_name." \n".
								"Coordinate: ".$url." \n".
								"Jalur: ".$jalur." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-495868829",$message);
					printf("===SENT TELEGRAM OK\r\n");	
					
					unset($data);
					$data["location_report_location"] = $position_name;
					$this->dbreport->where("location_report_id", $old_id);	
					$this->dbreport->update($tablesource,$data);
					printf("===UPDATE LOCATION OK \r\n");	
				}else{
					
					printf("===SKIP %s %s \r\n", $position_name, $gps_time);
				}
				//exit();
				printf("=============== \r\n");
			}
			
					$title_name = "PENGECEKAN SELESAI!!";
					$message = urlencode(
								"".$title_name." \n".
								"Periode: ".$startdate." - ".$enddate." \n".
								"Total Rows: ".$total_source." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-457733874",$message);
					printf("===SENT TELEGRAM OK\r\n");
			
		}
		else
		{
			printf("===========TIDAK ADA DATA LOCATION======== \r\n"); 
		}
		
	}
	//REV LOCATION
	function location_rev_out_pervehicle($userid="", $vdevice="", $vhost="",$orderby="", $configdb="", $tablesource="", $startdate="", $enddate="" ) 
	{	
		ini_set('memory_limit', '5G');
		printf("===STARTING GET DATA  %s %s \r\n", $userid, $tablesource);
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		$street_register_all = $this->config->item('street_register_all');
		
														
		//print_r($configdb." ".$tablesource." ".$startdate." ".$enddate);//exit();
		$this->dbreport = $this->load->database($configdb,true); 
		//$this->dbreport->select("location_report_id,location_report_location");
		$this->dbreport->order_by("location_report_id",$orderby);
		$this->dbreport->where("location_report_vehicle_user_id",$userid);
		$this->dbreport->where("location_report_gps_time >=",$startdate);
		$this->dbreport->where("location_report_gps_time <=",$enddate);
		$this->dbreport->where("location_report_vehicle_device",$vdevice."@".$vhost);
		$this->dbreport->where_not_in("location_report_location",$street_register_all);
		//$this->dbreport->limit(1);
		$this->dbreport->from($tablesource);
        $q_source = $this->dbreport->get();
        $row_source = $q_source->result();
		$total_source = count($row_source);
		printf("===TOTAL DATA %s %s \r\n", $total_source, $tablesource);
		//exit();
		if($total_source > 0)
		{
			
			for ($i=0;$i<$total_source;$i++)
			{
				$j = $i+1;
				$insert = 0;
				
				
				
				$old_id = $row_source[$i]->location_report_id;
				$old_lat = $row_source[$i]->location_report_latitude;
				$old_lng = $row_source[$i]->location_report_longitude;
				$vehicle_no = $row_source[$i]->location_report_vehicle_no;
				
				printf("===PROCESS %s of %s %s  \r\n", $j, $total_source, $vehicle_no);
				
				//$redzone_area = $this->config->item('redzone_register');
				$redzone_area = array("Non BIB KM 11","Non BIB KM 9","Non BIB Simp Telkom");
				
				
				//print_r($redzone_area);exit();
				$gps_time = date("d-m-Y H:i:s", strtotime($row_source[$i]->location_report_gps_time));
				$coordinate = $old_lat.",".$old_lng;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$jalur = $row_source[$i]->location_report_jalur;
				$position = $this->getPosition_other($old_lng,$old_lat);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								if (in_array($position_name, $redzone_area)){
									$insert = 1;
									printf("===REDZONE DETECTED %s %s %s \r\n", $vehicle_no, $position_name, $gps_time);
								}
				if($insert == 1)
				{
					$title_name = "REDZONE DETECTED!!";
					$message = urlencode(
								"".$title_name." \n".
								"Time: ".$gps_time." \n".
								"Vehicle No: ".$vehicle_no." \n".
								"Position: ".$position_name." \n".
								"Coordinate: ".$url." \n"
								//"Jalur: ".$jalur." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-495868829",$message);
					printf("===SENT TELEGRAM OK\r\n");	
					
					unset($data);
					$data["location_report_location"] = $position_name;
					$this->dbreport->where("location_report_id", $old_id);	
					$this->dbreport->update($tablesource,$data);
					printf("===UPDATE LOCATION OK \r\n");	
				}else{
					
					printf("===SKIP %s %s \r\n", $position_name, $gps_time);
				}
				//exit();
				printf("=============== \r\n");
			}
			
					$title_name = "PENGECEKAN SELESAI!!";
					$message = urlencode(
								"".$title_name." \n".
								"".$vehicle_no." \n".
								"Periode: ".$startdate." - ".$enddate." \n".
								"Total Rows: ".$total_source." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-457733874",$message);
					printf("===SENT TELEGRAM OK\r\n");
			
		}
		else
		{
			printf("===========TIDAK ADA DATA LOCATION======== \r\n"); 
		}
		
	}
	
	function location_rev_out_percompany($userid="", $companyid="",$orderby="", $configdb="", $tablesource="", $startdate="", $enddate="" ) 
	{	
		ini_set('memory_limit', '10G');
		printf("===STARTING GET DATA  %s %s \r\n", $userid, $tablesource);
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		$street_register = array("PORT BIB","PORT BIR","PORT TIA","PORT BBC",
														"ROM 01","ROM 01/02 ROAD","ROM 02","ROM 03","ROM 03/04 ROAD","ROM 04","ROM 05","ROM 06","ROM 06 ROAD",
														"ROM O7","ROM 07/08 ROAD","ROM 08","ROM 09","ROM 10",
														"POOL BBS","POOL BKA","POOL BSL","POOL GECL","POOL KUSAN BAWAH","POOL KUSAN","POOL MKS","POOL RAM","POOL RBT","POOL STLI",
														"WS GECL","WS KMB","WS MKS","WS RBT",
														"KM 0","KM 0.5","KM 1","KM 1.5","KM 2","KM 2.5","KM 3","KM 3.5","KM 4","KM 4.5","KM 5","KM 5.5","KM 6","KM 6.5",
														"KM 7","KM 7.5","KM 8","KM 8.5","KM 9","KM 9.5","KM 10","KM 10.5","KM 11","KM 11.5","KM 12","KM 12.5","KM 13","KM 13.5","KM 14","KM 14.5","KM 15","KM 15.5","KM 16",
														"KM 16.5","KM 17","KM 17.5","KM 18","KM 18.5","KM 19","KM 19.5","KM 20","KM 20.5","KM 21","KM 21.5","KM 22","KM 22.5","KM 23","KM 23.5","KM 24","KM 24.5","KM 25","KM 25.5","KM 26",
														"KM 26.5","KM 27","KM 27.5","KM 28","KM 28.5","KM 29","KM 29.5","KM 30","KM 30.5","KM 31","KM 31");
														
														
		//print_r($configdb." ".$tablesource." ".$startdate." ".$enddate);//exit();
		$this->dbreport = $this->load->database($configdb,true); 
		//$this->dbreport->select("location_report_id,location_report_location");
		$this->dbreport->order_by("location_report_id",$orderby);
		$this->dbreport->where("location_report_vehicle_user_id",$userid);
		$this->dbreport->where("location_report_gps_time >=",$startdate);
		$this->dbreport->where("location_report_gps_time <=",$enddate);
		$this->dbreport->where("location_report_vehicle_company",$companyid);
		$this->dbreport->where_not_in("location_report_location",$street_register);
		//$this->dbreport->limit(1);
		$this->dbreport->from($tablesource);
        $q_source = $this->dbreport->get();
        $row_source = $q_source->result();
		$total_source = count($row_source);
		printf("===TOTAL DATA %s %s \r\n", $total_source, $tablesource);
		//exit();
		if($total_source > 0)
		{
			
			for ($i=0;$i<$total_source;$i++)
			{
				$j = $i+1;
				$insert = 0;
				
				printf("===PROCESS %s of %s \r\n", $j, $total_source);
				
				$old_id = $row_source[$i]->location_report_id;
				$old_lat = $row_source[$i]->location_report_latitude;
				$old_lng = $row_source[$i]->location_report_longitude;
				$vehicle_no = $row_source[$i]->location_report_vehicle_no;
				printf("===PROCESS %s of %s %s %s \r\n", $j, $total_source, $vehicle_no, $companyid);
				$redzone_area = array("ATU area");
				$gps_time = date("d-m-Y H:i:s", strtotime($row_source[$i]->location_report_gps_time));
				$coordinate = $old_lat.",".$old_lng;
				$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
				$jalur = $row_source[$i]->location_report_jalur;
				$position = $this->getPosition_other($old_lng,$old_lat);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								if (in_array($position_name, $redzone_area)){
									$insert = 1;
									printf("===REDZONE DETECTED %s %s %s \r\n", $vehicle_no, $position_name, $gps_time);
								}
				if($insert == 1)
				{
					$title_name = "REDZONE DETECTED!!";
					$message = urlencode(
								"".$title_name." \n".
								"Time: ".$gps_time." \n".
								"Vehicle No: ".$vehicle_no." \n".
								"Position: ".$position_name." \n".
								"Coordinate: ".$url." \n".
								"Jalur: ".$jalur." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-495868829",$message);
					printf("===SENT TELEGRAM OK\r\n");	
					
					unset($data);
					$data["location_report_location"] = $position_name;
					$this->dbreport->where("location_report_id", $old_id);	
					$this->dbreport->update($tablesource,$data);
					printf("===UPDATE LOCATION OK \r\n");	
				}else{
					
					printf("===SKIP %s %s \r\n", $position_name, $gps_time);
				}
				//exit();
				printf("=============== \r\n");
			}
			
					$title_name = "PENGECEKAN SELESAI!!";
					$message = urlencode(
								"".$title_name." \n".
								"".$companyid." \n".
								"Periode: ".$startdate." - ".$enddate." \n".
								"Total Rows: ".$total_source." \n"
								
								);
					sleep(2);		
					$sendtelegram = $this->telegram_direct("-457733874",$message);
					printf("===SENT TELEGRAM OK\r\n");
			
		}
		else
		{
			printf("===========TIDAK ADA DATA LOCATION======== \r\n"); 
		}
		
	}
	
	//redzone
	function redzone($userid="", $orderby="", $reporttype="", $pjo="all", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "redzone2";
		}else{
			 $report_type = "redzone";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "redzone_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		if($pjo != "all"){
			$this->db->where("vehicle_company", $pjo);
		}
		//$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);								
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						//$this->dbhist->where("gps_speed >", 0);   
						$this->dbhist->where("gps_status", "A");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						//$this->dbhist2->where("gps_speed >", 0);    						
                        $this->dbhist2->where("gps_status", "A");
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						/*
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist3->order_by("gps_time","asc");
						$this->dbhist3->group_by("gps_time");						
                        $this->dbhist3->where("gps_name", $vehicle_device[0]);
                        $this->dbhist3->where("gps_time >=", $sdate);
                        $this->dbhist3->where("gps_time <=", $edate);
						$this->dbhist3->where("gps_speed >", 0); 					
						//$this->dbhist3->where("gps_status", "A");
                        $this->dbhist3->from($tablehist);
                        $q3 = $this->dbhist3->get();
                        $rows3 = $q2->result();
						
						$rows = array_merge($rows1, $rows2, $rows3);
						*/
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								$redzone_area = array("ATU area");
								$insert = 0;
								if (in_array($position_name, $redzone_area)){
									$insert = 1;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "redzone";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
									if($insert == 1){
										printf("DETECTED : %s %s \r\n",$location_report_location, $location_report_coordinate);
										$this->dbtrans->insert($dbtable,$datainsert);
										printf("OK \r\n");
										$i++;
										
									}else{
										printf(".");
									}
								
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
			if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." ".$pjo." - "."REDZONE";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","redzone");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	//by location
	function location($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location2";
		}else{
			 $report_type = "location";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);								
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed >", 0);   
						$this->dbhist->where("gps_status", "A");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed >", 0);    						
                        $this->dbhist2->where("gps_status", "A");
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						/*
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist3->order_by("gps_time","asc");
						$this->dbhist3->group_by("gps_time");						
                        $this->dbhist3->where("gps_name", $vehicle_device[0]);
                        $this->dbhist3->where("gps_time >=", $sdate);
                        $this->dbhist3->where("gps_time <=", $edate);
						$this->dbhist3->where("gps_speed >", 0); 					
						//$this->dbhist3->where("gps_status", "A");
                        $this->dbhist3->from($tablehist);
                        $q3 = $this->dbhist3->get();
                        $rows3 = $q2->result();
						
						$rows = array_merge($rows1, $rows2, $rows3);
						*/
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
			if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (MOVE)";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_idle($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_idle2";
		}else{
			 $report_type = "location_idle";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);						
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000100000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000100000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								//printf("===POSITION : %s \r\n", $position_name);
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Direction : %s \r\n", $direction);
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_idle";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
					
							
				}
			}
		}
		
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (IDLE)";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name","location_idle");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	}
	
	function location_off($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_off2";
		}else{
			 $report_type = "location_off";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);	
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000000000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000000000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_off";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
				}
			}
		}
	
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (OFF)";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location_off");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_pervehicle_all($userid="",$vdevice="",$vhost="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		$this->location_pervehicle($userid,$vdevice,$vhost,$orderby,$reporttype,$startdate,$enddate);
		$this->location_idle_pervehicle($userid,$vdevice,$vhost,$orderby,$reporttype,$startdate,$enddate);
		$this->location_off_pervehicle($userid,$vdevice,$vhost,$orderby,$reporttype,$startdate,$enddate);
		
	}
	
	function location_pervehicle($userid="",$vdevice="",$vhost="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location2";
		}else{
			 $report_type = "location";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_device", $vdevice."@".$vhost);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{ 
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);								
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed >", 0);   
						$this->dbhist->where("gps_status", "A");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                 
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed >", 0);    						
                        $this->dbhist2->where("gps_status", "A");
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						/*
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist3->order_by("gps_time","asc");
						$this->dbhist3->group_by("gps_time");						
                        $this->dbhist3->where("gps_name", $vehicle_device[0]);
                        $this->dbhist3->where("gps_time >=", $sdate);
                        $this->dbhist3->where("gps_time <=", $edate);
						$this->dbhist3->where("gps_speed >", 0); 					
						//$this->dbhist3->where("gps_status", "A");
                        $this->dbhist3->from($tablehist);
                        $q3 = $this->dbhist3->get();
                        $rows3 = $q2->result();
						
						$rows = array_merge($rows1, $rows2, $rows3);
						*/
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							/*printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");*/
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
	
	}
	
	function location_idle_pervehicle($userid="", $vdevice="", $vhost="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_idle2";
		}else{
			 $report_type = "location_idle";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_device", $vdevice."@".$vhost);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);						
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000100000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000100000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								//printf("===POSITION : %s \r\n", $position_name);
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Direction : %s \r\n", $direction);
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_idle";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							/*printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");*/
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
					
							
				}
			}
		}
		
		
	}
	
	function location_off_pervehicle($userid="", $vdevice="", $vhost="",$orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_off2";
		}else{
			 $report_type = "location_off";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_device", $vdevice."@".$vhost);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);	
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000000000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000000000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_off";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							/*printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");*/
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
				}
			}
		}
	
		
	
	}
	
	function location_pagi($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location2";
		}else{
			 $report_type = "location";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 06:00:00", strtotime("today"));
            $datefilename = date("Ymd", strtotime("today"));
			$month = date("F", strtotime("today"));
			$year = date("Y", strtotime("today"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 06:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 11:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 11:00:00", strtotime("today"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);								
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed >", 0);   
						$this->dbhist->where("gps_status", "A");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed >", 0);    						
                        $this->dbhist2->where("gps_status", "A");
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						/*
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist3->order_by("gps_time","asc");
						$this->dbhist3->group_by("gps_time");						
                        $this->dbhist3->where("gps_name", $vehicle_device[0]);
                        $this->dbhist3->where("gps_time >=", $sdate);
                        $this->dbhist3->where("gps_time <=", $edate);
						$this->dbhist3->where("gps_speed >", 0); 					
						//$this->dbhist3->where("gps_status", "A");
                        $this->dbhist3->from($tablehist);
                        $q3 = $this->dbhist3->get();
                        $rows3 = $q2->result();
						
						$rows = array_merge($rows1, $rows2, $rows3);
						*/
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
			if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (MOVE) PAGI";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_idle_pagi($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_idle2";
		}else{
			 $report_type = "location_idle";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 06:00:00", strtotime("today"));
            $datefilename = date("Ymd", strtotime("today"));
			$month = date("F", strtotime("today"));
			$year = date("Y", strtotime("today"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 06:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 11:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 11:00:00", strtotime("today"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);						
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000100000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000100000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								//printf("===POSITION : %s \r\n", $position_name);
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Direction : %s \r\n", $direction);
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_idle";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
					
							
				}
			}
		}
		
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (IDLE) PAGI";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name","location_idle");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	}
	
	function location_off_pagi($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_off2";
		}else{
			 $report_type = "location_off";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 06:00:00", strtotime("today"));
            $datefilename = date("Ymd", strtotime("today"));
			$month = date("F", strtotime("today"));
			$year = date("Y", strtotime("today"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 06:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 11:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 11:00:00", strtotime("today"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);	
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000000000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000000000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_off";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
				}
			}
		}
	
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (OFF) PAGI";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location_off");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_sore($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location2";
		}else{
			 $report_type = "location";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 18:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 18:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:00:00", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);								
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        //$this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed >", 0);   
						$this->dbhist->where("gps_status", "A");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed >", 0);    						
                        $this->dbhist2->where("gps_status", "A");
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						/*
						//$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist3->order_by("gps_time","asc");
						$this->dbhist3->group_by("gps_time");						
                        $this->dbhist3->where("gps_name", $vehicle_device[0]);
                        $this->dbhist3->where("gps_time >=", $sdate);
                        $this->dbhist3->where("gps_time <=", $edate);
						$this->dbhist3->where("gps_speed >", 0); 					
						//$this->dbhist3->where("gps_status", "A");
                        $this->dbhist3->from($tablehist);
                        $q3 = $this->dbhist3->get();
                        $rows3 = $q2->result();
						
						$rows = array_merge($rows1, $rows2, $rows3);
						*/
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
						}
					}
				}
			}
		}
	
			if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (MOVE) SORE";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_idle_sore($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_idle2";
		}else{
			 $report_type = "location_idle";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 18:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 18:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:00:00", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);						
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000100000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000100000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								//printf("===POSITION : %s \r\n", $position_name);
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Direction : %s \r\n", $direction);
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_idle";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
					
							
				}
			}
		}
		
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (IDLE) SORE";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name","location_idle");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	}
	
	function location_off_sore($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "location_off2";
		}else{
			 $report_type = "location_off";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 18:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 18:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:00:00", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:00:00", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        //print_r($startdate." ".$enddate);exit();
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		$vtype = array("VT200","VT200BIB");
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where_in("vehicle_type", $vtype);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);	
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist2 = $this->load->database("gpsarchive",true);
						//$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
						//$this->dbhist2 = $this->load->database("gpshistory_goblin_old",true);							
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)"); 
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
						$this->dbhist->where("gps_speed", 0);   
						$this->dbhist->where("gps_status", "A");
						$this->dbhist->where("gps_info_io_port", "0000000000");
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");
						$this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");						
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);
						$this->dbhist2->where("gps_speed", 0);    						
                        $this->dbhist2->where("gps_status", "A");
						$this->dbhist2->where("gps_info_io_port", "0000000000");
						$this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						
						$rows = array_merge($rows1, $rows2);
						$rows = $this->array_sort($rows, 'gps_time', SORT_ASC);
                        $trows = count($rows);
							
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						//detail data
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{	
								$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
								if(isset($position)){
									$ex_position = explode(",",$position->display_name);
									if(count($ex_position)>0){
										$position_name = $ex_position[0];
									}else{
										$position_name = $ex_position[0];
									}
								}else{
									$position_name = $position->display_name;
								}
								
								$direction = $rows[$i]->gps_course;
								$jalur = $this->get_jalurname_new($direction);
								
								//printf("===Jalur : %s \r\n", $jalur);
								$gpsspeed_kph = $rows[$i]->gps_speed*1.852;
								
								
								if($rows[$i]->gps_status == "A"){
									$gps_status = "OK";
								}else{
									$gps_status = "NOT OK";
								}
								
								$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($rowgeofence);exit();
								
								if($rowgeofence == false){
									$geofence_id = 0;
									$geofence_name = "";
									$geofence_speed = 0;
									$geofence_speed_muatan = "";
									$geofence_type = "";
									
								
								}else{
									$geofence_id = $rowgeofence->geofence_id;
									$geofence_name = $rowgeofence->geofence_name;
									$geofence_speed = $rowgeofence->geofence_speed;
									$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
									$geofence_type = $rowgeofence->geofence_type;
									
								}
								
								$location_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$location_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$location_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$location_report_imei = $rowvehicle[$x]->vehicle_mv03;
								$location_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$location_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$location_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$location_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$location_report_type = $reporttype;
								$location_report_name = "location_off";
								$location_report_speed = $gpsspeed_kph;
								$location_report_gpsstatus = $gps_status;
								$location_report_gps_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
								$location_report_geofence_id = $geofence_id;
								$location_report_geofence_name = $geofence_name;
								$location_report_geofence_type = $geofence_type;
								$location_report_jalur = $jalur;
								$location_report_direction = $rows[$i]->gps_course;
								$location_report_location = $position_name;
								$location_report_coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
								$location_report_odometer = $rows[$i]->gps_odometer;
								$location_report_latitude = $rows[$i]->gps_latitude_real;
								$location_report_longitude = $rows[$i]->gps_longitude_real;
								$location_report_fuel_data = $rows[$i]->gps_mvd;
								
								$location_report_gsm = "";
								$location_report_sat = "";
								$parse_msgori = explode("&&", $rows[$i]->gps_msg_ori);
								$gps_looping_master = explode(",",$parse_msgori[1]);
								
								if(count($gps_looping_master)>0){
									
									if(isset($gps_looping_master[16])){
										if($gps_looping_master[16] > 31){
											$location_report_gsm = 31;
										}else{
											$location_report_gsm = $gps_looping_master[16];
										}
									}
									
									if(isset($gps_looping_master[9])){
										$location_report_sat = $gps_looping_master[9]; 
									}
									
								}
								
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_vehicle_id"] = $location_report_vehicle_id;
								$datainsert["location_report_vehicle_device"] = $location_report_vehicle_device;
								$datainsert["location_report_imei"] = $location_report_imei;
								$datainsert["location_report_vehicle_no"] = $location_report_vehicle_no;
								$datainsert["location_report_vehicle_name"] = $location_report_vehicle_name;
								$datainsert["location_report_vehicle_type"] = $location_report_vehicle_type;
								$datainsert["location_report_vehicle_company"] = $location_report_vehicle_company;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_name"] = $location_report_name;
								$datainsert["location_report_speed"] = $location_report_speed;
								$datainsert["location_report_gpsstatus"] = $location_report_gpsstatus;
								$datainsert["location_report_gps_time"] = $location_report_gps_time;
								$datainsert["location_report_geofence_id"] = $location_report_geofence_id;
								$datainsert["location_report_geofence_name"] = $location_report_geofence_name;
								$datainsert["location_report_geofence_type"] = $location_report_geofence_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_direction"] = $location_report_direction;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_coordinate"] = $location_report_coordinate;
								$datainsert["location_report_latitude"] = $location_report_latitude;
								$datainsert["location_report_longitude"] = $location_report_longitude;
								$datainsert["location_report_odometer"] = $location_report_odometer;
								$datainsert["location_report_fuel_data"] = $location_report_fuel_data;
								$datainsert["location_report_gsm"] = $location_report_gsm;
								$datainsert["location_report_sat"] = $location_report_sat;
								
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								$i++;
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							unset($data);
						   
							printf("============================================ \r\n");
							
							
							
						}
					}
				}
			}
		}
	
		if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."LOCATION (OFF) SORE";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("location_report_id");
								$this->dbtrip->where("location_report_gps_time >=",$startdate);
								$this->dbtrip->where("location_report_gps_time <=",$enddate);
								$this->dbtrip->where("location_report_name ","location_off");
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct("-495868829",$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
	
	}
	
	function location_pagi_all($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		$this->location_pagi($userid,$orderby,$reporttype,$startdate,$enddate);
		$this->location_idle_pagi($userid,$orderby,$reporttype,$startdate,$enddate);
		$this->location_off_pagi($userid,$orderby,$reporttype,$startdate,$enddate);
		
	}
	function location_sore_all($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		$this->location_sore($userid,$orderby,$reporttype,$startdate,$enddate);
		$this->location_idle_sore($userid,$orderby,$reporttype,$startdate,$enddate);
		$this->location_off_sore($userid,$orderby,$reporttype,$startdate,$enddate);
		
	}
	//fuel by location
	function fuel_bylocation($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "fuel_location";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "fuel_location_";
        $report_source = "location_";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
        
        //$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        //$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
		$sdate = date("Y-m-d H:i:s", strtotime($startdate)); //sudh wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate)); //sudah wita
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		$this->db->where("vehicle_fuel_capacity >", 0);
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
      
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
			$vehicle_full_cap = $rowvehicle[$x]->vehicle_fuel_capacity;
			$vehicle_full_volt = $rowvehicle[$x]->vehicle_fuel_volt;
			
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist3 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						$typedata = array("location","location_idle","location_off");
						// select by report location
						$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbtrans->where("location_report_gps_time >=", $sdate);
                        $this->dbtrans->where("location_report_gps_time <=", $edate);
						$this->dbtrans->where("location_report_gpsstatus", "OK");
						$this->dbtrans->where("location_report_fuel_data >", 0); 
						$this->dbtrans->where_in("location_report_name", $typedata);
						//$this->dbtrans->where("location_report_location <>", "POOL KMB 2");
						//$this->dbtrans->where("location_report_jalur <>", "");
						//$this->dbtrans->like("location_report_location", "KM");						
                        $this->dbtrans->order_by("location_report_gps_time","asc");
						$this->dbtrans->group_by("location_report_gps_time");
					    $this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						//print_r($rows);exit();
                        $data = array();
                        $nopol = "";
                        $on = false;
                        $trows = count($rows);
						$total_history = $trows;
						
                        printf("TOTAL DATA : %s \r\n",$trows);
					
						if($trows > 0){
							
							
							////-------------KONDISI BY LOCATION (MOVE)-------------////
							if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{
								
								//if($rows[$i]->gps_speed == 0) continue;
								if($nopol != $rowvehicle[$x]->vehicle_no)
								{ //new vehicle
									if($on && $i!=0)
									{ 
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
			
										
									}
							
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_name == "location")
									{                                
										$trip_no = 1;                    
										$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
										
										$on = true;
								
										if($i==$trows-1)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
										}
									}
									else
									{
										$trip_no = 1;
										$on = false;
									}
								}
								else
								{ //same vehicle //hanya data on
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_name == "location")
									{
										
										if(!$on)
										{    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
											
										}
										$on = true;    
										if($i==$trows-1 && $on)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
										}                                    
									}
									//edit off
									else
									{            
										if($on)
										{
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
										}
										$on = false;
									}
								}
								$nopol = $rowvehicle[$x]->vehicle_no;
							}
							
							//Write Data On
							$i=1;
							$new = "";
							printf("WRITE DATA MOVE : ");
							foreach($data as $vehicle_no=>$val)
							{
								if($new != $vehicle_no)
								{
									$cumm = 0;
									$trip_no = 1;
								}
								
								foreach($val as $no=>$report)
								{
									$mileage = $report['end_mileage']- $report['start_mileage'];
								   // if($mileage != 0) // edit 0 km engine ON
								   // {
										$duration = get_time_difference($report['start_time'], $report['end_time']);
										
										$start_1 = dbmaketime($report['start_time']);
										$end_1 = dbmaketime($report['end_time']);
										$duration_sec = $end_1 - $start_1;
										
										$show = "";
										if($duration[0]!=0)
										{
											$show .= $duration[0] ." Day ";
										}
										if($duration[1]!=0)
										{
											$show .= $duration[1] ." Hour ";
										}
										if($duration[2]!=0)
										{
											$show .= $duration[2] ." Min ";
										}
										if($show == "")
										{
											$show .= "0 Min";
										}
										$tm = round(($mileage/1000),2);
										$cumm += $tm;
										printf("|%s|",$i);
										
										$notrip = $trip_no++;
									 
										//mileage
										$xme = $tm;
										$xxme = explode(".",$xme);
										if (isset($xxme[1]))
										{
											$xsub = substr($xxme[1],0,2); 
											$x_mile = $xxme[0].".".$xsub;     
										}
										else
										{
											$x_mile = $xxme[0];
										}
								
										//cummulative
										$xcum = $cumm;
										$xxcum = explode(".",$xcum);
										if (isset($xxcum[1]))
										{
											$xcumsub = substr($xxcum[1],0,2); 
											$x_cum = $xxcum[0].".".$xcumsub;     
										}
										else
										{
											$x_cum = $xxcum[0];
										}
									
											$geofence_start = $report['start_geofence_location'];
											$geofence_end = $report['end_geofence_location'];
											
											$geofence_start_type = $report['start_geofence_type'];
											$geofence_end_type = $report['end_geofence_type'];
											
											
											
											//fuel cons
											$ad1_volt_start = $report['start_fuel_data'];
											$ad1_volt_end = $report['end_fuel_data'];
					
											//ultrasonic fuel
											$fullcap_start              = $vehicle_full_cap; // liter
											$fullpercent_start          = 100; // percentage
											$fullvolt_start     		= $vehicle_full_volt;
											$currentvolt_start       	= $ad1_volt_start;
											
											$fullcap_end            	 = $vehicle_full_cap; // liter
											$fullpercent_end       		 = 100; // percentage
											$fullvolt_end          		 = $vehicle_full_volt;
											$currentvolt_end       		 = $ad1_volt_end;

											$percenvoltase_start   = $currentvolt_start * ($fullpercent_start / $fullvolt_start); // persentase yg didapat dari perubahan voltase;
											$sisaliterbensin_start = ($percenvoltase_start * $fullcap_start) / $fullpercent_start;
											
											$percenvoltase_end   = $currentvolt_end * ($fullpercent_end / $fullvolt_end); // persentase yg didapat dari perubahan voltase;
											$sisaliterbensin_end = ($percenvoltase_end * $fullcap_end) / $fullpercent_end;
											
											
											$fuel_delta_liter = $sisaliterbensin_start - $sisaliterbensin_end;
											
												if($fuel_delta_liter > 0){
													$trip_mileage_status = "CONS";	
												}else{
													$trip_mileage_status = "X";
													$deltaliter = abs($fuel_delta_liter);
													
													if($deltaliter > 10){
														$trip_mileage_status = "FILL";
													}else{
														$trip_mileage_status = "XX";
													}
												}

											unset($datainsert);
											$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
											$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
											$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
											$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
											$datainsert["trip_mileage_trip_no"] = $notrip;
											$datainsert["trip_mileage_engine"] = $report['engine'];
											$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
											$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
											$datainsert["trip_mileage_duration"] = $show;
											$datainsert["trip_mileage_duration_sec"] = $duration_sec;
											$datainsert["trip_mileage_trip_mileage"] = $x_mile;
											$datainsert["trip_mileage_km"] = $x_mile;
											$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
											$datainsert["trip_mileage_location_start"] = $report['start_position'];
											$datainsert["trip_mileage_location_end"] = $report['end_position'];
											$datainsert["trip_mileage_geofence_start"] = $geofence_start;
											$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
											$datainsert["trip_mileage_geofence_end"] = $geofence_end;
											$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
											$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
											$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
											$datainsert["trip_mileage_door_start"] = "";
											$datainsert["trip_mileage_door_end"] = "";
											$datainsert["trip_mileage_lat"] = $report['start_latitude'];
											$datainsert["trip_mileage_lng"] = $report['start_longitude'];
											$datainsert["trip_mileage_totaldata"] = $trows;
											
											$datainsert["trip_mileage_fuel_data_start"] = $report['start_fuel_data'];
											$datainsert["trip_mileage_fuel_data_end"] = $report['end_fuel_data'];
											$datainsert["trip_mileage_fuel_cons_start"] = $sisaliterbensin_start;
											$datainsert["trip_mileage_fuel_cons_end"] = $sisaliterbensin_end;
											
											$datainsert["trip_mileage_odo_start"] = $report['start_mileage'];
											$datainsert["trip_mileage_odo_end"] = $report['end_mileage'];
											
											$datainsert["trip_mileage_fuel_delta_liter"] = $fuel_delta_liter;
											$datainsert["trip_mileage_status"] = $trip_mileage_status;
											
										if($duration_sec > 0 ){
											$this->dbtrip = $this->load->database("tensor_report",TRUE);
											$this->dbtrip->insert($dbtable,$datainsert);
											printf("OK");
										}else{
											printf(".");
										}
										
										$i++;
									
								}
							}
							
								unset($data);
					
								printf("FINISH DATA MOVE: %s \r\n",$rowvehicle[$x]->vehicle_device);
								printf("============================================ \r\n");
							}
							
							
							////-------------KONDISI BY LOCATION (IDLE)-------------////
							if ($trows > 0){
								for($i=0;$i<$trows;$i++)
								{
									
									//if($rows[$i]->gps_speed == 0) continue;
									if($nopol != $rowvehicle[$x]->vehicle_no)
									{ //new vehicle
										if($on && $i!=0)
										{ 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
				
											
										}
								
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_name == "location_idle")
										{                                
											$trip_no = 1;                    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 2;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
											
											$on = true;
									
											if($i==$trows-1)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}
										}
										else
										{
											$trip_no = 1;
											$on = false;
										}
									}
									else
									{ //same vehicle //hanya data on
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_name == "location_idle")
										{
											
											if(!$on)
											{    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 2;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
												
											}
											$on = true;    
											if($i==$trows-1 && $on)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}                                    
										}
										//edit off
										else
										{            
											if($on)
											{
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}
											$on = false;
										}
									}
									$nopol = $rowvehicle[$x]->vehicle_no;
								}
								
								//Write Data On
								$i=1;
								$new = "";
								printf("WRITE DATA IDLE : ");
								foreach($data as $vehicle_no=>$val)
								{
									if($new != $vehicle_no)
									{
										$cumm = 0;
										$trip_no = 1;
									}
									
									foreach($val as $no=>$report)
									{
										$mileage = $report['end_mileage']- $report['start_mileage'];
									   // if($mileage != 0) // edit 0 km engine ON
									   // {
											$duration = get_time_difference($report['start_time'], $report['end_time']);
											
											$start_1 = dbmaketime($report['start_time']);
											$end_1 = dbmaketime($report['end_time']);
											$duration_sec = $end_1 - $start_1;
											
											$show = "";
											if($duration[0]!=0)
											{
												$show .= $duration[0] ." Day ";
											}
											if($duration[1]!=0)
											{
												$show .= $duration[1] ." Hour ";
											}
											if($duration[2]!=0)
											{
												$show .= $duration[2] ." Min ";
											}
											if($show == "")
											{
												$show .= "0 Min";
											}
											$tm = round(($mileage/1000),2);
											$cumm += $tm;
											printf("|%s|",$i);
											
											$notrip = $trip_no++;
										 
											//mileage
											$xme = $tm;
											$xxme = explode(".",$xme);
											if (isset($xxme[1]))
											{
												$xsub = substr($xxme[1],0,2); 
												$x_mile = $xxme[0].".".$xsub;     
											}
											else
											{
												$x_mile = $xxme[0];
											}
									
											//cummulative
											$xcum = $cumm;
											$xxcum = explode(".",$xcum);
											if (isset($xxcum[1]))
											{
												$xcumsub = substr($xxcum[1],0,2); 
												$x_cum = $xxcum[0].".".$xcumsub;     
											}
											else
											{
												$x_cum = $xxcum[0];
											}
										
												$geofence_start = $report['start_geofence_location'];
												$geofence_end = $report['end_geofence_location'];
												
												$geofence_start_type = $report['start_geofence_type'];
												$geofence_end_type = $report['end_geofence_type'];
												
												//fuel cons
												$ad1_volt_start = $report['start_fuel_data'];
												$ad1_volt_end = $report['end_fuel_data'];
						
												//ultrasonic fuel
												$fullcap_start              = $vehicle_full_cap; // liter
												$fullpercent_start          = 100; // percentage
												$fullvolt_start     		= $vehicle_full_volt;
												$currentvolt_start       	= $ad1_volt_start;
												
												$fullcap_end            	 = $vehicle_full_cap; // liter
												$fullpercent_end       		 = 100; // percentage
												$fullvolt_end          		 = $vehicle_full_volt;
												$currentvolt_end       		 = $ad1_volt_end;

												$percenvoltase_start   = $currentvolt_start * ($fullpercent_start / $fullvolt_start); // persentase yg didapat dari perubahan voltase;
												$sisaliterbensin_start = ($percenvoltase_start * $fullcap_start) / $fullpercent_start;
												
												$percenvoltase_end   = $currentvolt_end * ($fullpercent_end / $fullvolt_end); // persentase yg didapat dari perubahan voltase;
												$sisaliterbensin_end = ($percenvoltase_end * $fullcap_end) / $fullpercent_end;
												
												$fuel_delta_liter = $sisaliterbensin_start - $sisaliterbensin_end;
												
												
												if($fuel_delta_liter > 0){
													$trip_mileage_status = "CONS";	
												}else{
													$trip_mileage_status = "X";
													$deltaliter = abs($fuel_delta_liter);
													
													if($deltaliter > 10){
														$trip_mileage_status = "FILL";
													}else{
														$trip_mileage_status = "XX";
													}
												}
												
												
												if(isset($report['start_latitude'])){
													unset($datainsert);
													$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
													$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
													$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
													$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
													$datainsert["trip_mileage_trip_no"] = $notrip;
													$datainsert["trip_mileage_engine"] = $report['engine'];
													$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
													$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
													$datainsert["trip_mileage_duration"] = $show;
													$datainsert["trip_mileage_duration_sec"] = $duration_sec;
													$datainsert["trip_mileage_trip_mileage"] = $x_mile;
													$datainsert["trip_mileage_km"] = $x_mile;
													$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
													$datainsert["trip_mileage_location_start"] = $report['start_position'];
													$datainsert["trip_mileage_location_end"] = $report['end_position'];
													$datainsert["trip_mileage_geofence_start"] = $geofence_start;
													$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
													$datainsert["trip_mileage_geofence_end"] = $geofence_end;
													$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
													$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
													$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
													$datainsert["trip_mileage_door_start"] = "";
													$datainsert["trip_mileage_door_end"] = "";
													$datainsert["trip_mileage_lat"] = $report['start_latitude'];
													$datainsert["trip_mileage_lng"] = $report['start_longitude'];
													$datainsert["trip_mileage_totaldata"] = $trows;
													
													$datainsert["trip_mileage_fuel_data_start"] = $report['start_fuel_data'];
													$datainsert["trip_mileage_fuel_data_end"] = $report['end_fuel_data'];
													$datainsert["trip_mileage_fuel_cons_start"] = $sisaliterbensin_start;
													$datainsert["trip_mileage_fuel_cons_end"] = $sisaliterbensin_end;
													
													$datainsert["trip_mileage_odo_start"] = $report['start_mileage'];
													$datainsert["trip_mileage_odo_end"] = $report['end_mileage'];
													
													$datainsert["trip_mileage_fuel_delta_liter"] = $fuel_delta_liter;
													$datainsert["trip_mileage_status"] = $trip_mileage_status;
													
													if($duration_sec > 0 ){
														$this->dbtrip = $this->load->database("tensor_report",TRUE);
														$this->dbtrip->insert($dbtable,$datainsert);
														printf("OK");
													}else{
														printf(".");
													}
												}
												
											
											$i++;
										
									}
								}
								
									unset($data);
						
									printf("FINISH DATA IDLE : %s \r\n",$rowvehicle[$x]->vehicle_device);
									printf("============================================ \r\n");
							}
							
							
							////-------------KONDISI BY LOCATION (OFF)-------------////
							if ($trows > 0){
								for($i=0;$i<$trows;$i++)
								{
									
									//if($rows[$i]->gps_speed == 0) continue;
									if($nopol != $rowvehicle[$x]->vehicle_no)
									{ //new vehicle
										if($on && $i!=0)
										{ 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
				
											
										}
								
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_name == "location_off")
										{                                
											$trip_no = 1;                    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 3;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
											
											$on = true;
									
											if($i==$trows-1)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}
										}
										else
										{
											$trip_no = 1;
											$on = false;
										}
									}
									else
									{ //same vehicle //hanya data on
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_name == "location_off")
										{
											
											if(!$on)
											{    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 3;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_fuel_data'] = $rows[$i]->location_report_fuel_data;
												
											}
											$on = true;    
											if($i==$trows-1 && $on)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}                                    
										}
										//edit off
										else
										{            
											if($on)
											{
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_fuel_data'] = $rows[$i]->location_report_fuel_data;
											}
											$on = false;
										}
									}
									$nopol = $rowvehicle[$x]->vehicle_no;
								}
								
								//Write Data On
								$i=1;
								$new = "";
								printf("WRITE DATA OFF : ");
								foreach($data as $vehicle_no=>$val)
								{
									if($new != $vehicle_no)
									{
										$cumm = 0;
										$trip_no = 1;
									}
									
									foreach($val as $no=>$report)
									{
										$mileage = $report['end_mileage']- $report['start_mileage'];
									   // if($mileage != 0) // edit 0 km engine ON
									   // {
											$duration = get_time_difference($report['start_time'], $report['end_time']);
											
											$start_1 = dbmaketime($report['start_time']);
											$end_1 = dbmaketime($report['end_time']);
											$duration_sec = $end_1 - $start_1;
											
											$show = "";
											if($duration[0]!=0)
											{
												$show .= $duration[0] ." Day ";
											}
											if($duration[1]!=0)
											{
												$show .= $duration[1] ." Hour ";
											}
											if($duration[2]!=0)
											{
												$show .= $duration[2] ." Min ";
											}
											if($show == "")
											{
												$show .= "0 Min";
											}
											$tm = round(($mileage/1000),2);
											$cumm += $tm;
											printf("|%s|",$i);
											
											$notrip = $trip_no++;
										 
											//mileage
											$xme = $tm;
											$xxme = explode(".",$xme);
											if (isset($xxme[1]))
											{
												$xsub = substr($xxme[1],0,2); 
												$x_mile = $xxme[0].".".$xsub;     
											}
											else
											{
												$x_mile = $xxme[0];
											}
									
											//cummulative
											$xcum = $cumm;
											$xxcum = explode(".",$xcum);
											if (isset($xxcum[1]))
											{
												$xcumsub = substr($xxcum[1],0,2); 
												$x_cum = $xxcum[0].".".$xcumsub;     
											}
											else
											{
												$x_cum = $xxcum[0];
											}
										
												$geofence_start = $report['start_geofence_location'];
												$geofence_end = $report['end_geofence_location'];
												
												$geofence_start_type = $report['start_geofence_type'];
												$geofence_end_type = $report['end_geofence_type'];
												
												//fuel cons
												$ad1_volt_start = $report['start_fuel_data'];
												$ad1_volt_end = $report['end_fuel_data'];
						
												//ultrasonic fuel
												$fullcap_start              = $vehicle_full_cap; // liter
												$fullpercent_start          = 100; // percentage
												$fullvolt_start     		= $vehicle_full_volt;
												$currentvolt_start       	= $ad1_volt_start;
												
												$fullcap_end            	 = $vehicle_full_cap; // liter
												$fullpercent_end       		 = 100; // percentage
												$fullvolt_end          		 = $vehicle_full_volt;
												$currentvolt_end       		 = $ad1_volt_end;

												$percenvoltase_start   = $currentvolt_start * ($fullpercent_start / $fullvolt_start); // persentase yg didapat dari perubahan voltase;
												$sisaliterbensin_start = ($percenvoltase_start * $fullcap_start) / $fullpercent_start;
												
												$percenvoltase_end   = $currentvolt_end * ($fullpercent_end / $fullvolt_end); // persentase yg didapat dari perubahan voltase;
												$sisaliterbensin_end = ($percenvoltase_end * $fullcap_end) / $fullpercent_end;
												
												$fuel_delta_liter = $sisaliterbensin_start - $sisaliterbensin_end;
												
												
												if($fuel_delta_liter > 0){
													$trip_mileage_status = "CONS";	
												}else{
													$trip_mileage_status = "X";
													$deltaliter = abs($fuel_delta_liter);
													
													if($deltaliter > 10){
														$trip_mileage_status = "FILL";
													}else{
														$trip_mileage_status = "XX";
													}
												}
												
												//OFF
												if($report['engine'] == 3 && $trip_mileage_status == "CONS"){ 
													$trip_mileage_status = "XX";
												}
																							
												
												if(isset($report['start_latitude'])){
													unset($datainsert);
													$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
													$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
													$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
													$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
													$datainsert["trip_mileage_trip_no"] = $notrip;
													$datainsert["trip_mileage_engine"] = $report['engine'];
													$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
													$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
													$datainsert["trip_mileage_duration"] = $show;
													$datainsert["trip_mileage_duration_sec"] = $duration_sec;
													$datainsert["trip_mileage_trip_mileage"] = $x_mile;
													$datainsert["trip_mileage_km"] = $x_mile;
													$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
													$datainsert["trip_mileage_location_start"] = $report['start_position'];
													$datainsert["trip_mileage_location_end"] = $report['end_position'];
													$datainsert["trip_mileage_geofence_start"] = $geofence_start;
													$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
													$datainsert["trip_mileage_geofence_end"] = $geofence_end;
													$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
													$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
													$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
													$datainsert["trip_mileage_door_start"] = "";
													$datainsert["trip_mileage_door_end"] = "";
													$datainsert["trip_mileage_lat"] = $report['start_latitude'];
													$datainsert["trip_mileage_lng"] = $report['start_longitude'];
													$datainsert["trip_mileage_totaldata"] = $trows;
													
													$datainsert["trip_mileage_fuel_data_start"] = $report['start_fuel_data'];
													$datainsert["trip_mileage_fuel_data_end"] = $report['end_fuel_data'];
													$datainsert["trip_mileage_fuel_cons_start"] = $sisaliterbensin_start;
													$datainsert["trip_mileage_fuel_cons_end"] = $sisaliterbensin_end;
													
													$datainsert["trip_mileage_odo_start"] = $report['start_mileage'];
													$datainsert["trip_mileage_odo_end"] = $report['end_mileage'];
													
													$datainsert["trip_mileage_fuel_delta_liter"] = $fuel_delta_liter;
													$datainsert["trip_mileage_status"] = $trip_mileage_status;
													
													if($duration_sec > 0 ){
														$this->dbtrip = $this->load->database("tensor_report",TRUE);
														$this->dbtrip->insert($dbtable,$datainsert);
														printf("OK");
													}else{
														printf(".");
													}
												}
												
											
											$i++;
										
									}
								}
								
									unset($data);
						
									printf("FINISH DATA OFF : %s \r\n",$rowvehicle[$x]->vehicle_device);
									printf("============================================ \r\n");
							}
								
								
						}	
						
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0){
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
		
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT FUEL BY LOCATION DONE %s\r\n",$finish_time);
	
	if($total_process != 0){
		
		//Send Email
		$cron_name = $cron_username." - "."FUEL BY LOCATION";
		$this->dbtrip = $this->load->database("tensor_report",TRUE);
        $this->dbtrip->select("trip_mileage_id");
        $this->dbtrip->where("trip_mileage_start_time >=",$startdate);
        $this->dbtrip->where("trip_mileage_end_time <=",$enddate);
        $qtrip = $this->dbtrip->get($dbtable);
        $rtrip = $qtrip->result();
		$total_data = count($rtrip);
		
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
        $this->db->select("company_id,company_telegram_cron");
        $this->db->where("company_id",$company_username);
        $qcompany = $this->db->get("company");
        $rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_cron;
		}else{
			$telegram_group = 0;
		}
		
		$message =  urlencode(
					"".$cron_name." \n".
					"Periode: ".$startdate." to ".$enddate." \n".
					"Total Data: ".$total_data." \n".
					"Start: ".$startproses." \n".
					"Finish: ".$finish_time." \n"
					);
					
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		unset($mail);
		$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
		$mail['message'] = 
"
Cron Report Status :

Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
Start Cron : ".$start_time."
End Cron   : ".$finish_time."
Total Data : ".$total_data."
End Data   : "."( ".$z." / ".$total_process." )"."
Status     : Finish

Thanks

";
		$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
		$mail['bcc'] = "report.lacakmobil@yahoo.com";
		$mail['sender'] = "cron@lacak-mobil.com";
		//lacakmobilmail($mail);
		
		$this->dbtrip->close();
		$this->dbtrip->cache_delete_all();
	}
			
		printf("Send Email OK");
        
    }
	
	function fuel_bylocation_rev($startdate="", $enddate="")  //fuel report cleansing
	{
		$report = "fuel_location_";
		$report_new = "fuel_location_clean_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
		
		$datastatus = array("CONS","FILL","OFF");
		
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		$this->dbreport->where_in("trip_mileage_status", $datastatus);
		$this->dbreport->where("trip_mileage_vehicle_id", "69969039493669@TK510");
		$this->dbreport->order_by("trip_mileage_start_time","asc");
		$this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA REPORT : %s \r\n", count($rows));
			
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				$vehicle_dev = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$vehicle_name = $rows[$x]->trip_mileage_vehicle_name;
				$vehicle_type = $rows[$x]->trip_mileage_vehicle_type;
				$notrip = $rows[$x]->trip_mileage_trip_no;
				$engine = $rows[$x]->trip_mileage_engine;
				$sdate = $rows[$x]->trip_mileage_start_time;
				$edate = $rows[$x]->trip_mileage_end_time;
				$show = $rows[$x]->trip_mileage_duration;
				$duration_sec = $rows[$x]->trip_mileage_duration_sec;
				$x_mile = $rows[$x]->trip_mileage_trip_mileage;
				$trip_mileage_km = $rows[$x]->trip_mileage_km;
				$x_cum = $rows[$x]->trip_mileage_cummulative_mileage;
				
				$position_start = $rows[$x]->trip_mileage_location_start;
				$position_end = $rows[$x]->trip_mileage_location_end;
				$geofence_start = $rows[$x]->trip_mileage_geofence_start;
				$geofence_start_type = $rows[$x]->trip_mileage_geofence_start_type;
				$geofence_end = $rows[$x]->trip_mileage_geofence_end;
				$geofence_end_type = $rows[$x]->trip_mileage_geofence_end_type;
				$coordinate_start = $rows[$x]->trip_mileage_coordinate_start;
				$coordinate_end = $rows[$x]->trip_mileage_coordinate_end;
				$latitude_start = $rows[$x]->trip_mileage_lat;
				$longitude_start = $rows[$x]->trip_mileage_lng;
				
				$totaldata = $rows[$x]->trip_mileage_totaldata;
				
				$fuel_data_start = $rows[$x]->trip_mileage_fuel_data_start;
				$fuel_data_end = $rows[$x]->trip_mileage_fuel_data_end;
				$fuel_cons_start = $rows[$x]->trip_mileage_fuel_cons_start;
				$fuel_cons_end = $rows[$x]->trip_mileage_fuel_cons_end;
				
				$odo_start = $rows[$x]->trip_mileage_odo_start;
				$odo_end = $rows[$x]->trip_mileage_odo_start;
				
				$fuel_delta_liter = $rows[$x]->trip_mileage_fuel_delta_liter;
				$trip_mileage_status = $rows[$x]->trip_mileage_status;
				
				//config
				$skipdata = 0;
				$limit_idle = 4*60; //5 menit
				$limit_time = 10*60; //10 menit
				$limit_fuel_idle = 1.5; //liter
				$limit_find = 100; //data before
				
				printf("DATA ID : %s %s %s : %s \r\n", $id_report, $sdate, $edate, $trip_mileage_status);
				printf("DURATION : %s %s limit %s \r\n", $show, $duration_sec, $limit_time);
				
				if($trip_mileage_status == "CONS")
				{
					if($duration_sec < $limit_idle){
						printf("SKIP IDLE #1 < 5min : %s \r\n", $trip_mileage_status);
						$skipdata = 1;
						
					}
					else
					{
						//jika > 5 min && < 10 min maka fuel tidak boleh lebih dari 1.5
						if(($duration_sec >= $limit_idle) && ($duration_sec <= $limit_time) && ($fuel_delta_liter > 0 && $fuel_delta_liter < $limit_fuel_idle))
						{
							printf("SKIP IDLE #2 %s, DUR: %s \r\n", $fuel_delta_liter, $duration_sec);
							$skipdata = 1;
							
						}
						else
						{
							printf("IDLE FUEL CONS %s, DUR: %s \r\n", $fuel_delta_liter, $duration_sec);
						}
						
					}
					
				}
				
				else if($trip_mileage_status == "FILL")
				{
					//MOVE
					if($engine == 1)
					{
						printf("MOVE FIIL: %s, LITER %s, STATUS: %s \r\n", $vehicle_no, $fuel_delta_liter, $engine);
						//print_r("DISINI");exit();
						//cari data speed nol sebelumnya , ambil datetime nya
						$find_before = $this->get_data_before($vehicle_dev,$sdate,$edate,$dbtable,$limit_find);
						//print_r($find_before);exit();
						if($find_before != "xx")
						{
							//print_r($find_before);exit();
							
							$sdate = $find_before->trip_mileage_start_time;
							$edate = $find_before->trip_mileage_end_time;
							$engine = $find_before->trip_mileage_engine;
							$x_mile = $find_before->trip_mileage_trip_mileage;
							$trip_mileage_km = $find_before->trip_mileage_km;
							$show = $find_before->trip_mileage_duration;
							$duration_sec = $find_before->trip_mileage_duration_sec;
							$position_start = $find_before->trip_mileage_location_start;
							$position_end = $find_before->trip_mileage_location_end;
							
							$geofence_start = $find_before->trip_mileage_geofence_start;
							$geofence_start_type = $find_before->trip_mileage_geofence_start_type;
							$geofence_end = $find_before->trip_mileage_geofence_end;
							$geofence_end_type = $find_before->trip_mileage_geofence_end_type;
							
							//khusus fuel pakai data lama!!
							
							$coordinate_start = $find_before->trip_mileage_coordinate_start;
							$coordinate_end = $find_before->trip_mileage_coordinate_end;
							$odo_start = $find_before->trip_mileage_odo_start;
							$odo_end = $find_before->trip_mileage_odo_end;
							$trip_mileage_status = "FILL2";
						}
						
						printf("ABNORMAL: %s, LITER %s, STATUS: %s \r\n", $vehicle_no, $fuel_delta_liter, $engine);
					}
					else
					{
						printf("NORMAL: %s, LITER %s, STATUS: %s \r\n", $vehicle_no, $fuel_delta_liter, $engine);
					}
				}
				else 
				{
					printf("NORMAL: %s, LITER %s , STATUS: %s \r\n", $vehicle_no, $fuel_delta_liter, $engine);
					
				}
								
				if($skipdata == 0)
				{
					//insert semua data kondisi baru ke table baru
					unset($datainsert);
					$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
					$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
					$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
					$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
					$datainsert["trip_mileage_trip_no"] = $notrip;
					$datainsert["trip_mileage_engine"] = $engine;
					$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($sdate));
					$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($edate));
					$datainsert["trip_mileage_duration"] = $show;
					$datainsert["trip_mileage_duration_sec"] = $duration_sec;
					$datainsert["trip_mileage_trip_mileage"] = $x_mile;
					$datainsert["trip_mileage_km"] = $trip_mileage_km;
					$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
					$datainsert["trip_mileage_location_start"] = $position_start;
					$datainsert["trip_mileage_location_end"] = $position_end;
					$datainsert["trip_mileage_geofence_start"] = $geofence_start;
					$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
					$datainsert["trip_mileage_geofence_end"] = $geofence_end;
					$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
					$datainsert["trip_mileage_coordinate_start"] = $coordinate_start;
					$datainsert["trip_mileage_coordinate_end"] = $coordinate_end;
					$datainsert["trip_mileage_door_start"] = "";
					$datainsert["trip_mileage_door_end"] = "";
					$datainsert["trip_mileage_lat"] = $latitude_start;
					$datainsert["trip_mileage_lng"] = $longitude_start;
					$datainsert["trip_mileage_totaldata"] = $totaldata;
														
					$datainsert["trip_mileage_fuel_data_start"] = $fuel_data_start;
					$datainsert["trip_mileage_fuel_data_end"] = $fuel_data_end;
					$datainsert["trip_mileage_fuel_cons_start"] = $fuel_cons_start;
					$datainsert["trip_mileage_fuel_cons_end"] = $fuel_cons_end;
														
					$datainsert["trip_mileage_odo_start"] = $odo_start;
					$datainsert["trip_mileage_odo_end"] = $odo_end;
														
					$datainsert["trip_mileage_fuel_delta_liter"] = $fuel_delta_liter;
					$datainsert["trip_mileage_status"] = $trip_mileage_status;				
					
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("===========OK======== \r\n"); 
				}else{
					printf("===========SKIP INS======== \r\n"); 
				}
				
				
				
			}
		}else{
			printf("===========TIDAK ADA DATA FUEL BY LOCATION======== \r\n"); 
		}
		
		printf("===========FINISSHHH======== \r\n"); 
		
	}
	
	//get new alarm / send telegram
	function fuel_telegram($userid)
	{
		printf("==GET NEW FUEL DATA >> START \r\n");
		$nowdate = date("Y-m-d H:i:s");
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		$this->db->where("vehicle_fuel_capacity >", 0);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
       
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
		
		$this->dbtrans = $this->load->database("webtracking_ts",true);
		$z = 0;
		
        for($x=0;$x<count($rowvehicle);$x++)
        {
			$z = $z+1;
			$startdate = date("Y-m-d 00:00:00");
			$enddate = date("Y-m-d 23:59:59");
			
			$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
			$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate))); //wita
			
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, $z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
			
			$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
            $vehicle_no = $rowvehicle[$x]->vehicle_no;
			$vehicle_dev = $rowvehicle[$x]->vehicle_device;
			$vehicle_name = $rowvehicle[$x]->vehicle_name;
			$vehicle_type = $rowvehicle[$x]->vehicle_type;
			$vehicle_full_cap = $rowvehicle[$x]->vehicle_fuel_capacity;
			$vehicle_full_volt = $rowvehicle[$x]->vehicle_fuel_volt;
			
			unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						//$this->dbhist2 = $this->load->database("gpshistory",true);
						
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						//$this->dbhist2 = $this->load->database("gpshistory",true);
								
					}
					
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek config last check
					$this->dbtrans->order_by("config_id","desc");
					$this->dbtrans->where("config_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("config_name","FUEL");
					$this->dbtrans->where("config_status",1);
					$qrpt = $this->dbtrans->get("ts_fuel_config");
                    $rrpt = $qrpt->row();
					$total_rrpt = count($rrpt);
                    if ($total_rrpt == 0)
                    {
                        printf("BELUM ADA LAST CHECK %s \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
						
                    }
                    else
                    {
						printf("SUDAH ADA LAST CHECK %s %s \r\n", $rowvehicle[$x]->vehicle_device,$rrpt->config_lastcheck);  
						$sdate = $rrpt->config_lastcheck;
						//print_r($sdate);exit();
					}
					
						//start here calc
						$this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");
						$this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time >", $sdate);
						$this->dbhist->where("gps_mvd >", 0);
						$this->dbhist->where("gps_speed", 0);
						$this->dbhist->where("gps_status", "A");
                     	$this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows = $q->result();
						$trows = count($rows);
						printf("TOTAL DATA : %s \r\n",$trows);	
					
						//CHECK FUEL by GPS MVD
						if ($trows > 0)
						{
							$problem = 0;
							$limit_abnormal = 10;
							$limit_time = 5*60;
							$limit_km = 0.3;
							printf("LIMIT ABNORMAL : %s L \r\n",$limit_abnormal);
							printf("LIMIT TIME : %s s \r\n",$limit_time);	
							
							printf("PROSES DATA %s > %s \r\n", $rowvehicle[$x]->vehicle_no, $sdate); 
							for($i=0;$i<$trows;$i++)
							{
								printf("DATA %s/%s \r\n", $i+1, $trows); 
								//master looping data gps
								$lastrows = $trows-1;
								if($i != $lastrows)
								{
									$time_start = strtotime($rows[$i]->gps_time);
									$time_end = strtotime($rows[$i+1]->gps_time);
									$delta_time = $time_end - $time_start;
									
									$odo_start = $rows[$i]->gps_odometer/1000;
									$odo_end = $rows[$i+1]->gps_odometer/1000;
									$delta_odo = $odo_end - $odo_start;
									
									printf("===TIME DELTA %s %s : %s s \r\n", $rows[$i]->gps_time,$rows[$i+1]->gps_time,$delta_time);
									
									$ad1_volt_start = $rows[$i]->gps_mvd;
									$ad1_volt_end = $rows[$i+1]->gps_mvd;
									
									//ultrasonic fuel
									$fullcap_start              = $vehicle_full_cap; // liter
									$fullpercent_start          = 100; // percentage
									$fullvolt_start     		= $vehicle_full_volt;
									$currentvolt_start       	= $ad1_volt_start;
												
									$fullcap_end            	 = $vehicle_full_cap; // liter
									$fullpercent_end       		 = 100; // percentage
									$fullvolt_end          		 = $vehicle_full_volt;
									$currentvolt_end       		 = $ad1_volt_end;

									$percenvoltase_start   = $currentvolt_start * ($fullpercent_start / $fullvolt_start); // persentase yg didapat dari perubahan voltase;
									$sisaliterbensin_start = ($percenvoltase_start * $fullcap_start) / $fullpercent_start;
												
									$percenvoltase_end   = $currentvolt_end * ($fullpercent_end / $fullvolt_end); // persentase yg didapat dari perubahan voltase;
									$sisaliterbensin_end = ($percenvoltase_end * $fullcap_end) / $fullpercent_end;
									
									$fuel_delta_liter = $sisaliterbensin_start - $sisaliterbensin_end;
								
									printf("===FUEL CONS : %s L \r\n", $fuel_delta_liter);
												
									if($fuel_delta_liter > 0){
										//normal mode
										$fuel_status = "CONS";
										// jika konsumsi bahan bakar > limit namum odo tidak bergerak , dan waktu kurang dari limir
										if( ($fuel_delta_liter > $limit_abnormal) && ($delta_odo < $limit_km) && ($delta_time < $limit_time) ){
											printf("===ABNORMAL \r\n");
											$problem = 1;
										}else{
											printf("===NORMAL \r\n");
											$problem = 0;
										}
										
									}else{
										//skip mode
										printf("===SKIP INVALID DATA : %s L \r\n", $fuel_delta_liter);
										$problem = 0;
									}
									
									$lastcheck = $rows[$i]->gps_time;
								}
								else
								{
									//lastrow jadi lastcheck
									//ambil row terakhir dari data GPS
									$lastcheck = $rows[$i]->gps_time;
									
								}
					
								//jika ada indikasi maka info ini kirim ke telegram
								if($problem == 1)
								{
									
									$title_name = "FUEL CONSUMPTION ABNORMAL";
									$vehicle_device = $rows[$i]->gps_name."@".$rows[$i]->gps_host;
									$data_vehicle = $this->getvehicle($vehicle_device);
									$vehicle_id = $data_vehicle->vehicle_id;
									$vehicle_no = $data_vehicle->vehicle_no;
									$vehicle_name = $data_vehicle->vehicle_name;
									$vehicle_company = $data_vehicle->vehicle_company;
									$vehicle_dblive = $data_vehicle->vehicle_dbname_live;
									//$telegram_group = $this->get_telegramgroup_overspeed($data_vehicle->vehicle_company);
									$telegram_group = "-495868829";
									
									$driver = $this->getdriver($vehicle_id);
									if($driver == false){
										$driver_name = "-";
									}else{
										$driver_ex = explode("-",$driver);
										$driver_name = $driver_ex[1];
									}
									
									$position = $this->getPosition_other($rows[$i]->gps_longitude_real,$rows[$i]->gps_latitude_real);
										if(isset($position)){
											$ex_position = explode(",",$position->display_name);
											if(count($ex_position)>0){
												$position_name = $ex_position[0];
											}else{
												$position_name = $ex_position[0];
											}
										}else{
											$position_name = $position->display_name;
										}
									
									$gps_time = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time))); //sudah wita
									$coordinate = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									//$url = "http://maps.google.com/maps?z=12&t=m&q=loc:".$coordinate;
									$url = "https://www.google.com/maps/search/?api=1&query=".$coordinate;
									$gpsspeed_kph = round($rows[$i]->gps_speed*1.852,0);
									$direction = $rows[$i]->gps_course;
									$jalur = $this->get_jalurname_new($direction);
									if($jalur == ""){
										$jalur = $rows[$i]->gps_last_road_type;
									}
									printf("===Jalur : %s \r\n", $jalur);
									
									$rowgeofence = $this->getGeofence_location_live($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $vehicle_dblive);
												
													if($rowgeofence == false){
														$geofence_id = 0;
														$geofence_name = "";
														$geofence_speed = 0;
														$geofence_speed_muatan = "";
														$geofence_type = "";
														$geofence_speed_limit = 0;
													
													}else{
														$geofence_id = $rowgeofence->geofence_id;
														$geofence_name = $rowgeofence->geofence_name;
														$geofence_speed = $rowgeofence->geofence_speed;
														$geofence_speed_muatan = $rowgeofence->geofence_speed_muatan;
														$geofence_type = $rowgeofence->geofence_type;
														
														if($jalur == "muatan"){
															$geofence_speed_limit = $geofence_speed_muatan;
														}else if($jalur == "kosongan"){
															$geofence_speed_limit = $geofence_speed;
														}else{
															$geofence_speed_limit = 0;
														}
													}
									
									$message = urlencode(
												"".$title_name." \n".
												"Time: ".$gps_time." \n".
												"Vehicle No: ".$vehicle_no." ".$vehicle_name." \n".
												"Driver: ".$driver_name." \n".
												"Position: ".$position_name." \n".
												"Coordinate: ".$url." \n".
												"Fuel Consumption(l): ".$fuel_delta_liter." \n".
												"Duration(sec): ".$delta_time." \n".
												"Distance(km): ".$delta_odo." \n"
												);
												
									$logs_content = json_encode(urldecode($message));
									//insert to logs fuel alert
									$data_insert["logs_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
									$data_insert["logs_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
									$data_insert["logs_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
									$data_insert["logs_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
									$data_insert["logs_user"] = $rowvehicle[$x]->user_id;
									$data_insert["logs_name"] = $title_name;
									$data_insert["logs_time_start"] = date("Y-m-d H:i:s", $time_start);
									$data_insert["logs_time_end"] = date("Y-m-d H:i:s", $time_end);
									$data_insert["logs_duration"] = $delta_time;
									$data_insert["logs_cons"] = $fuel_delta_liter;
									$data_insert["logs_fuel_start"] = $sisaliterbensin_start;
									$data_insert["logs_fuel_end"] = $sisaliterbensin_end;
									$data_insert["logs_odo_start"] = $odo_start;
									$data_insert["logs_odo_end"] = $odo_end;
									$data_insert["logs_km"] = $delta_odo;
									$data_insert["logs_location"] = $position_name;
									$data_insert["logs_coordinate"] = $coordinate;
									$data_insert["logs_geofence"] = $geofence_name;
									$data_insert["logs_arah"] = $jalur;
									$data_insert["logs_created"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("ts_fuel_logs",$data_insert);
												
									//printf("===Message : %s \r\n", $message);
									sleep(2);			
									$sendtelegram = $this->telegram_direct($telegram_group,$message);
									printf("===SENT TELEGRAM OK\r\n");	
									
								}
								
								
								$i++;
							}
						
							printf("PREPARE UPDATE CONFIG ON WEBTRACKING TS \r\n");
							$data_config["config_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_config["config_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_config["config_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_config["config_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
							$data_config["config_user"] = $rowvehicle[$x]->user_id;
							$data_config["config_name"] = "FUEL";
							$data_config["config_status"] = 1;
							$data_config["config_lastcheck"] = $lastcheck;
							if ($total_rrpt == 0){
								$this->dbtrans->insert("ts_fuel_config",$data_config);
								printf("INSERT LAST CHECK : %s %s \r\n", $rowvehicle[$x]->vehicle_device, $lastcheck);
							}else{
								$this->dbtrans->order_by("config_id","desc");
								$this->dbtrans->where("config_vehicle_id",$rowvehicle[$x]->vehicle_id);
								$this->dbtrans->where("config_name","FUEL");
								$this->dbtrans->where("config_status",1);
								$this->dbtrans->limit(1);
								$this->dbtrans->update("ts_fuel_config",$data_config);
								printf("UPDATE LAST CHECK : %s %s \r\n", $rowvehicle[$x]->vehicle_device, $lastcheck);
							}
				
							printf("DELETE CACHE HISTORY \r\n");
							$this->dbhist->cache_delete_all();
							$this->dbtrans->cache_delete_all();
							printf("============================================ \r\n");
						
						}else{
							printf("BELUM ADA GPS TERBARU %s \r\n", $rowvehicle[$x]->vehicle_no);     
						}
						
						

                    
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
		
		$finish_time = date("Y-m-d H:i:s");
		$this->db->close();
		$this->db->cache_delete_all();
		
			
		$enddate = date("Y-m-d H:i:s");
		printf("===FINISH %s to %s \r\n", $nowdate, $enddate);
		
		
	}
	
	//operational by location
	function operational_bylocation($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional_location";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_location_";
        $report_source = "location_";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
        
        //$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        //$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
		$sdate = date("Y-m-d H:i:s", strtotime($startdate)); //sudh wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate)); //sudah wita
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                   
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{ 
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist3 = $this->load->database("gpshistory_rhino",true);
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						//$this->dbhist3 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						// select by report location
						$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbtrans->where("location_report_gps_time >=", $sdate);
                        $this->dbtrans->where("location_report_gps_time <=", $edate);
						$this->dbtrans->where("location_report_gpsstatus", "OK");
						$this->dbtrans->where("location_report_name", "location");
						$this->dbtrans->where("location_report_speed >", 0);
						//$this->dbtrans->where("location_report_location <>", "POOL KMB 2");
						//$this->dbtrans->where("location_report_jalur <>", "");
						//$this->dbtrans->like("location_report_location", "KM");						
                        $this->dbtrans->order_by("location_report_gps_time","asc");
						$this->dbtrans->group_by("location_report_gps_time");
					    $this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						
                        $data = array();
                        $nopol = "";
                        $on = false;
                        $trows = count($rows);
						$total_history = $trows;
						
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						if($trows > 0){
							
							
							////==================ARAH DATA================//////////
							$feature_arah = array();
							
							$totalkosongan = 0;
							$totalmuatan = 0;
							$totalother = 0;
								
							if($total_history == 0){
								$jalur_gps = "";
								$totaldata = $total_history;
								$feature_arah["kosongan"] = $totalkosongan;
								$feature_arah["muatan"] = $totalmuatan;
								$feature_arah["other"] = $totalother;
							}else{
								
								for($i=0; $i < $total_history; $i++)
								{	
									$jalur_gps = $this->get_jalurname_new($rows[$i]->location_report_direction);
									
									if($jalur_gps == "kosongan"){
										$totalkosongan += 1;
									}
									else if($jalur_gps == "muatan"){
										$totalmuatan += 1;
									}
									else{
										$totalother += 1;
									}
									$feature_arah["kosongan"] = $totalkosongan;
									$feature_arah["muatan"] = $totalmuatan;
									$feature_arah["other"] = $totalother;
								}
								
							}
							$response_arah = json_encode($feature_arah);
							
							////-------------KONDISI BY LOCATION (KM) KOSONGAN-------------////
							if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{
								
								//if($rows[$i]->gps_speed == 0) continue;
								if($nopol != $rowvehicle[$x]->vehicle_no)
								{ //new vehicle
									if($on && $i!=0)
									{ 
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
			
										
									}
							
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_jalur == "kosongan")
									{                                
										$trip_no = 1;                    
										$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
										
										$on = true;
								
										if($i==$trows-1)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}
									}
									else
									{
										$trip_no = 1;
										$on = false;
									}
								}
								else
								{ //same vehicle //hanya data on
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_jalur == "kosongan")
									{
										
										if(!$on)
										{    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											
										}
										$on = true;    
										if($i==$trows-1 && $on)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}                                    
									}
									//edit off
									else
									{            
										if($on)
										{
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}
										$on = false;
									}
								}
								$nopol = $rowvehicle[$x]->vehicle_no;
							}
							
							//Write Data On
							$i=1;
							$new = "";
							printf("WRITE DATA KOSONGAN : ");
							foreach($data as $vehicle_no=>$val)
							{
								if($new != $vehicle_no)
								{
									$cumm = 0;
									$trip_no = 1;
								}
								
								foreach($val as $no=>$report)
								{
									$mileage = $report['end_mileage']- $report['start_mileage'];
								   // if($mileage != 0) // edit 0 km engine ON
								   // {
										$duration = get_time_difference($report['start_time'], $report['end_time']);
										
										$start_1 = dbmaketime($report['start_time']);
										$end_1 = dbmaketime($report['end_time']);
										$duration_sec = $end_1 - $start_1;
										
										$show = "";
										if($duration[0]!=0)
										{
											$show .= $duration[0] ." Day ";
										}
										if($duration[1]!=0)
										{
											$show .= $duration[1] ." Hour ";
										}
										if($duration[2]!=0)
										{
											$show .= $duration[2] ." Min ";
										}
										if($show == "")
										{
											$show .= "0 Min";
										}
										$tm = round(($mileage/1000),2);
										$cumm += $tm;
										printf("|%s|",$i);
										
										$notrip = $trip_no++;
									 
										//mileage
										$xme = $tm;
										$xxme = explode(".",$xme);
										if (isset($xxme[1]))
										{
											$xsub = substr($xxme[1],0,2); 
											$x_mile = $xxme[0].".".$xsub;     
										}
										else
										{
											$x_mile = $xxme[0];
										}
								
										//cummulative
										$xcum = $cumm;
										$xxcum = explode(".",$xcum);
										if (isset($xxcum[1]))
										{
											$xcumsub = substr($xxcum[1],0,2); 
											$x_cum = $xxcum[0].".".$xcumsub;     
										}
										else
										{
											$x_cum = $xxcum[0];
										}
									
											$geofence_start = $report['start_geofence_location'];
											$geofence_end = $report['end_geofence_location'];
											
											$geofence_start_type = $report['start_geofence_type'];
											$geofence_end_type = $report['end_geofence_type'];
											
											if($x_mile > 0){
												$trip_mileage_status = "MOVE";	
											}else{
												$trip_mileage_status = "IDLE";	
											}
											
											unset($datainsert);
											$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
											$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
											$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
											$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
											$datainsert["trip_mileage_trip_no"] = $notrip;
											$datainsert["trip_mileage_engine"] = $report['engine'];
											$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
											$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
											$datainsert["trip_mileage_duration"] = $show;
											$datainsert["trip_mileage_duration_sec"] = $duration_sec;
											$datainsert["trip_mileage_trip_mileage"] = $x_mile;
											$datainsert["trip_mileage_km"] = $x_mile;
											$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
											$datainsert["trip_mileage_location_start"] = $report['start_position'];
											$datainsert["trip_mileage_location_end"] = $report['end_position'];
											$datainsert["trip_mileage_geofence_start"] = $geofence_start;
											$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
											$datainsert["trip_mileage_geofence_end"] = $geofence_end;
											$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
											$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
											$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
											$datainsert["trip_mileage_door_start"] = "";
											$datainsert["trip_mileage_door_end"] = "";
											$datainsert["trip_mileage_lat"] = $report['start_latitude'];
											$datainsert["trip_mileage_lng"] = $report['start_longitude'];
											$datainsert["trip_mileage_totaldata"] = $trows;
											
											
											$datainsert["trip_mileage_status"] = $trip_mileage_status;
											$datainsert["trip_mileage_arah_data"] = $response_arah;
											$datainsert["trip_mileage_arah_status"] = "kosongan";
											
											/*$datainsert["trip_mileage_speed_data"] = $response_spd;
											$datainsert["trip_mileage_speed_status"] = $trip_mileage_speed_status;
											$datainsert["trip_mileage_speed_avg"] = round($speed_avg,1);*/
											
										if($duration_sec > 0 ){
											$this->dbtrip = $this->load->database("tensor_report",TRUE);
											$this->dbtrip->insert($dbtable,$datainsert);
											printf("OK");
										}else{
											printf(".");
										}
										
										$i++;
									
								}
							}
							
								unset($data);
					
								printf("FINISH FOR ARAH KOSONGAN : %s \r\n",$rowvehicle[$x]->vehicle_device);
								printf("============================================ \r\n");
							}
							
							
						////-------------KONDISI BY LOCATION (KM) MUATAN-------------////
						if ($trows > 0){
							for($i=0;$i<$trows;$i++)
							{
								
								//if($rows[$i]->gps_speed == 0) continue;
								if($nopol != $rowvehicle[$x]->vehicle_no)
								{ //new vehicle
									if($on && $i!=0)
									{ 
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
			
										
									}
							
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_jalur == "muatan")
									{                                
										$trip_no = 1;                    
										$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
										
										$on = true;
								
										if($i==$trows-1)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}
									}
									else
									{
										$trip_no = 1;
										$on = false;
									}
								}
								else
								{ //same vehicle //hanya data on
									//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
									if($rows[$i]->location_report_jalur == "muatan")
									{
										
										if(!$on)
										{    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											
										}
										$on = true;    
										if($i==$trows-1 && $on)
										{                                                
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}                                    
									}
									//edit off
									else
									{            
										if($on)
										{
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
										}
										$on = false;
									}
								}
								$nopol = $rowvehicle[$x]->vehicle_no;
							}
							
							//Write Data On
							$i=1;
							$new = "";
							printf("WRITE DATA MUATAN : ");
							foreach($data as $vehicle_no=>$val)
							{
								if($new != $vehicle_no)
								{
									$cumm = 0;
									$trip_no = 1;
								}
								
								foreach($val as $no=>$report)
								{
									$mileage = $report['end_mileage']- $report['start_mileage'];
								   // if($mileage != 0) // edit 0 km engine ON
								   // {
										$duration = get_time_difference($report['start_time'], $report['end_time']);
										
										$start_1 = dbmaketime($report['start_time']);
										$end_1 = dbmaketime($report['end_time']);
										$duration_sec = $end_1 - $start_1;
										
										$show = "";
										if($duration[0]!=0)
										{
											$show .= $duration[0] ." Day ";
										}
										if($duration[1]!=0)
										{
											$show .= $duration[1] ." Hour ";
										}
										if($duration[2]!=0)
										{
											$show .= $duration[2] ." Min ";
										}
										if($show == "")
										{
											$show .= "0 Min";
										}
										$tm = round(($mileage/1000),2);
										$cumm += $tm;
										printf("|%s|",$i);
										
										$notrip = $trip_no++;
									 
										//mileage
										$xme = $tm;
										$xxme = explode(".",$xme);
										if (isset($xxme[1]))
										{
											$xsub = substr($xxme[1],0,2); 
											$x_mile = $xxme[0].".".$xsub;     
										}
										else
										{
											$x_mile = $xxme[0];
										}
								
										//cummulative
										$xcum = $cumm;
										$xxcum = explode(".",$xcum);
										if (isset($xxcum[1]))
										{
											$xcumsub = substr($xxcum[1],0,2); 
											$x_cum = $xxcum[0].".".$xcumsub;     
										}
										else
										{
											$x_cum = $xxcum[0];
										}
									
											$geofence_start = $report['start_geofence_location'];
											$geofence_end = $report['end_geofence_location'];
											
											$geofence_start_type = $report['start_geofence_type'];
											$geofence_end_type = $report['end_geofence_type'];
											
											if($x_mile > 0){
												$trip_mileage_status = "MOVE";	
											}else{
												$trip_mileage_status = "IDLE";	
											}
											
											if(isset($report['start_latitude'])){
												unset($datainsert);
												$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
												$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
												$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
												$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
												$datainsert["trip_mileage_trip_no"] = $notrip;
												$datainsert["trip_mileage_engine"] = $report['engine'];
												$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
												$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
												$datainsert["trip_mileage_duration"] = $show;
												$datainsert["trip_mileage_duration_sec"] = $duration_sec;
												$datainsert["trip_mileage_trip_mileage"] = $x_mile;
												$datainsert["trip_mileage_km"] = $x_mile;
												$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
												$datainsert["trip_mileage_location_start"] = $report['start_position'];
												$datainsert["trip_mileage_location_end"] = $report['end_position'];
												$datainsert["trip_mileage_geofence_start"] = $geofence_start;
												$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
												$datainsert["trip_mileage_geofence_end"] = $geofence_end;
												$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
												$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
												$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
												$datainsert["trip_mileage_door_start"] = "";
												$datainsert["trip_mileage_door_end"] = "";
												$datainsert["trip_mileage_lat"] = $report['start_latitude'];
												$datainsert["trip_mileage_lng"] = $report['start_longitude'];
												$datainsert["trip_mileage_totaldata"] = $trows;
												
												
												$datainsert["trip_mileage_status"] = $trip_mileage_status;
												$datainsert["trip_mileage_arah_data"] = $response_arah;
												$datainsert["trip_mileage_arah_status"] = "muatan";
												
												/*$datainsert["trip_mileage_speed_data"] = $response_spd;
												$datainsert["trip_mileage_speed_status"] = $trip_mileage_speed_status;
												$datainsert["trip_mileage_speed_avg"] = round($speed_avg,1);*/
												
												if($duration_sec > 0 ){
													$this->dbtrip = $this->load->database("tensor_report",TRUE);
													$this->dbtrip->insert($dbtable,$datainsert);
													printf("OK");
												}else{
													printf(".");
												}
											}
											
										
										$i++;
									
								}
							}
							
								unset($data);
					
								printf("FINISH FOR ARAH MUATAN : %s \r\n",$rowvehicle[$x]->vehicle_device);
								printf("============================================ \r\n");
							}
							
						}else{
							printf("SKIP PROCESS : %s \r\n", $trows);
							printf("SKIP VEHICLE : %s \r\n", $rowvehicle[$x]->vehicle_no);
						}
						
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0){
							$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
		//============get speed avg ==================// //dimatikan sementara tunggu validasi
		//$this->speed_avg_from_operasional($startdate,$enddate);
        
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL BY LOCATION DONE %s\r\n",$finish_time);
	
	if($total_process != 0){
		
		//Send Email
		$cron_name = $cron_username." - "."OPERATIONAL BY LOCATION REPORT";
		$this->dbtrip = $this->load->database("tensor_report",TRUE);
        $this->dbtrip->select("trip_mileage_id");
        $this->dbtrip->where("trip_mileage_start_time >=",$startdate);
        $this->dbtrip->where("trip_mileage_end_time <=",$enddate);
        $qtrip = $this->dbtrip->get($dbtable);
        $rtrip = $qtrip->result();
		$total_data = count($rtrip);
		
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
        $this->db->select("company_id,company_telegram_cron");
        $this->db->where("company_id",$company_username);
        $qcompany = $this->db->get("company");
        $rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_cron;
		}else{
			$telegram_group = 0;
		}
		
		$message =  urlencode(
					"".$cron_name." \n".
					"Periode: ".$startdate." to ".$enddate." \n".
					"Total Data: ".$total_data." \n".
					"Start: ".$startproses." \n".
					"Finish: ".$finish_time." \n"
					);
					
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		unset($mail);
		$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
		$mail['message'] = 
"
Cron Report Status :

Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
Start Cron : ".$start_time."
End Cron   : ".$finish_time."
Total Data : ".$total_data."
End Data   : "."( ".$z." / ".$total_process." )"."
Status     : Finish

Thanks

";
		$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
		$mail['bcc'] = "report.lacakmobil@yahoo.com";
		$mail['sender'] = "cron@lacak-mobil.com";
		//lacakmobilmail($mail);
		
		$this->dbtrip->close();
		$this->dbtrip->cache_delete_all();
	}
			
		printf("Send Email OK");
        
    }
	
	//operational by location
	function operational_bylocation_idle($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL IDLE KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional_location_idle";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_location_";
        $report_source = "location_";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
        
        //$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        //$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
		$sdate = date("Y-m-d H:i:s", strtotime($startdate)); //sudh wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate)); //sudah wita
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist3 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						//get data location (KM) pada saat report dibawah
						// select by report location
						$this->dbtrans->select("location_report_location");
						$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbtrans->where("location_report_gps_time >=", $sdate);
                        $this->dbtrans->where("location_report_gps_time <=", $edate);
						$this->dbtrans->where("location_report_gpsstatus", "OK");
						$this->dbtrans->where("location_report_name", "location_idle");
						$this->dbtrans->where("location_report_speed", 0);
						$this->dbtrans->where("location_report_location <>", "POOL TMS");
						$this->dbtrans->where("location_report_jalur <>", "");
						$this->dbtrans->like("location_report_location", "KM");						
                        $this->dbtrans->order_by("location_report_gps_time","asc");
						$this->dbtrans->group_by("location_report_location");
					    $this->dbtrans->from($dbtable_source);
                        $q_loc = $this->dbtrans->get();
                        $rows_loc = $q_loc->result();
						$trows_loc = count($rows_loc);
					
						
						// select by report location
						$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbtrans->where("location_report_gps_time >=", $sdate);
                        $this->dbtrans->where("location_report_gps_time <=", $edate);
						$this->dbtrans->where("location_report_gpsstatus", "OK");
						$this->dbtrans->where("location_report_name", "location_idle");
						$this->dbtrans->where("location_report_speed", 0);
						$this->dbtrans->where("location_report_location <>", "POOL TMS");
						$this->dbtrans->where("location_report_jalur <>", "");
						$this->dbtrans->like("location_report_location", "KM");						
                        $this->dbtrans->order_by("location_report_gps_time","asc");
						$this->dbtrans->group_by("location_report_gps_time");
					    $this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						
                        $data = array();
                        $nopol = "";
                        $on = false;
                        $trows = count($rows);
						$total_history = $trows;
						
                        printf("TOTAL DATA : %s \r\n",$trows);
						
						if($trows_loc > 0){
							
							////-------------KONDISI BY LOCATION (KM) KOSONGAN-------------////
							for($u=0;$u<$trows_loc;$u++){
									
									if ($trows > 0){
									for($i=0;$i<$trows;$i++)
									{
										
										//if($rows[$i]->gps_speed == 0) continue;
										if($nopol != $rowvehicle[$x]->vehicle_no)
										{ //new vehicle
											if($on && $i!=0)
											{ 
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
					
												
											}
									
											//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
											if($rows[$i]->location_report_jalur == "kosongan" && $rows[$i]->location_report_location == $rows_loc[$u]->location_report_location)
											{                                
												$trip_no = 1;                    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
												
												$on = true;
										
												if($i==$trows-1)
												{                                                
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												}
											}
											else
											{
												$trip_no = 1;
												$on = false;
											}
										}
										else
										{ //same vehicle //hanya data on
											//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
											if($rows[$i]->location_report_jalur == "kosongan" && $rows[$i]->location_report_location == $rows_loc[$u]->location_report_location)
											{
												
												if(!$on)
												{    
													$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
													
												}
												$on = true;    
												if($i==$trows-1 && $on)
												{                                                
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												}                                    
											}
											//edit off
											else
											{            
												if($on)
												{
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
													$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												}
												$on = false;
											}
										}
										$nopol = $rowvehicle[$x]->vehicle_no;
									}
								
									if(count($data)>0){
										
										//Write Data On
										$i=1;
										$new = "";
										printf("WRITE DATA KOSONGAN : ");
										foreach($data as $vehicle_no=>$val)
										{
											if($new != $vehicle_no)
											{
												$cumm = 0;
												$trip_no = 1;
											}
											
											foreach($val as $no=>$report)
											{
												$mileage = $report['end_mileage']- $report['start_mileage'];
											   // if($mileage != 0) // edit 0 km engine ON
											   // {
													$duration = get_time_difference($report['start_time'], $report['end_time']);
													
													$start_1 = dbmaketime($report['start_time']);
													$end_1 = dbmaketime($report['end_time']);
													$duration_sec = $end_1 - $start_1;
													
													$show = "";
													if($duration[0]!=0)
													{
														$show .= $duration[0] ." Day ";
													}
													if($duration[1]!=0)
													{
														$show .= $duration[1] ." Hour ";
													}
													if($duration[2]!=0)
													{
														$show .= $duration[2] ." Min ";
													}
													if($show == "")
													{
														$show .= "0 Min";
													}
													$tm = round(($mileage/1000),2);
													$cumm += $tm;
													printf("|%s|",$i);
													
													$notrip = $trip_no++;
												 
													//mileage
													$xme = $tm;
													$xxme = explode(".",$xme);
													if (isset($xxme[1]))
													{
														$xsub = substr($xxme[1],0,2); 
														$x_mile = $xxme[0].".".$xsub;     
													}
													else
													{
														$x_mile = $xxme[0];
													}
											
													//cummulative
													$xcum = $cumm;
													$xxcum = explode(".",$xcum);
													if (isset($xxcum[1]))
													{
														$xcumsub = substr($xxcum[1],0,2); 
														$x_cum = $xxcum[0].".".$xcumsub;     
													}
													else
													{
														$x_cum = $xxcum[0];
													}
												
														$geofence_start = $report['start_geofence_location'];
														$geofence_end = $report['end_geofence_location'];
														
														$geofence_start_type = $report['start_geofence_type'];
														$geofence_end_type = $report['end_geofence_type'];
														
														if($x_mile > 0){
															$trip_mileage_status = "MOVE";	
														}else{
															$trip_mileage_status = "IDLE";	
														}
														
														unset($datainsert);
														$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
														$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
														$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
														$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
														$datainsert["trip_mileage_trip_no"] = $notrip;
														$datainsert["trip_mileage_engine"] = $report['engine'];
														$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
														$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
														$datainsert["trip_mileage_duration"] = $show;
														$datainsert["trip_mileage_duration_sec"] = $duration_sec;
														$datainsert["trip_mileage_trip_mileage"] = $x_mile;
														$datainsert["trip_mileage_km"] = $x_mile;
														$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
														$datainsert["trip_mileage_location_start"] = $report['start_position'];
														$datainsert["trip_mileage_location_end"] = $report['end_position'];
														$datainsert["trip_mileage_geofence_start"] = $geofence_start;
														$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
														$datainsert["trip_mileage_geofence_end"] = $geofence_end;
														$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
														$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
														$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
														$datainsert["trip_mileage_door_start"] = "";
														$datainsert["trip_mileage_door_end"] = "";
														$datainsert["trip_mileage_lat"] = $report['start_latitude'];
														$datainsert["trip_mileage_lng"] = $report['start_longitude'];
														$datainsert["trip_mileage_totaldata"] = $trows;
														
														
														$datainsert["trip_mileage_status"] = $trip_mileage_status;
														//$datainsert["trip_mileage_arah_data"] = $response_arah;
														$datainsert["trip_mileage_arah_status"] = "kosongan";
														
														/*$datainsert["trip_mileage_speed_data"] = $response_spd;
														$datainsert["trip_mileage_speed_status"] = $trip_mileage_speed_status;
														$datainsert["trip_mileage_speed_avg"] = round($speed_avg,1);*/
														
													if($duration_sec > 0 ){
														//$this->dbtrip = $this->load->database("tensor_report",TRUE);
														//$this->dbtrip->insert($dbtable,$datainsert);
														printf("OK");
													}else{
														printf(".");
													}
													
													$i++;
												
											}
										}
									
										unset($data);
							
										printf("FINISH FOR ARAH KOSONGAN : %s \r\n",$rowvehicle[$x]->vehicle_device);
										printf("============================================ \r\n");
									}	
									else
									{
										printf("NO DATA KOSONGAN : %s \r\n",$rowvehicle[$x]->vehicle_device);
										printf("============================================ \r\n");
									}
								}
								
								
							}
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							////-------------KONDISI BY LOCATION (KM) MUATAN-------------////
							
							
							
								
								
						}else{
								printf("SKIP PROCESS : %s \r\n", $trows);
								printf("SKIP VEHICLE : %s \r\n", $rowvehicle[$x]->vehicle_no);
						}
							
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0){
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL BY LOCATION DONE %s\r\n",$finish_time);
	
	if($total_process != 0){
		
		//Send Email
		$cron_name = $cron_username." - "."OPERATIONAL BY LOCATION REPORT";
		$this->dbtrip = $this->load->database("tensor_report",TRUE);
        $this->dbtrip->select("trip_mileage_id");
        $this->dbtrip->where("trip_mileage_start_time >=",$startdate);
        $this->dbtrip->where("trip_mileage_end_time <=",$enddate);
        $qtrip = $this->dbtrip->get($dbtable);
        $rtrip = $qtrip->result();
		$total_data = count($rtrip);
		
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
        $this->db->select("company_id,company_telegram_cron");
        $this->db->where("company_id",$company_username);
        $qcompany = $this->db->get("company");
        $rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_cron;
		}else{
			$telegram_group = 0;
		}
		
		$message =  urlencode(
					"".$cron_name." \n".
					"Periode: ".$startdate." to ".$enddate." \n".
					"Total Data: ".$total_data." \n".
					"Start: ".$startproses." \n".
					"Finish: ".$finish_time." \n"
					);
					
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		unset($mail);
		$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
		$mail['message'] = 
"
Cron Report Status :

Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
Start Cron : ".$start_time."
End Cron   : ".$finish_time."
Total Data : ".$total_data."
End Data   : "."( ".$z." / ".$total_process." )"."
Status     : Finish

Thanks

";
		$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
		$mail['bcc'] = "report.lacakmobil@yahoo.com";
		$mail['sender'] = "cron@lacak-mobil.com";
		//lacakmobilmail($mail);
		
		$this->dbtrip->close();
		$this->dbtrip->cache_delete_all();
	}
			
		printf("Send Email OK");
        
    }
	
	//operational by location breakdown from move - low
	function operational_bylocation_idle_breakdown($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional_location";
		$report_type_new = "operasional_location_idle_breakdown";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_location_";
        $report_source = "location_";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
        
        //$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        //$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
		$sdate = date("Y-m-d H:i:s", strtotime($startdate)); //sudh wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate)); //sudah wita
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist3 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type_new);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
							
							printf("PROSES ALL JALUR \r\n");
							// select by report location kosongan
							$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
							$this->dbtrans->where("location_report_gps_time >=", $sdate);
							$this->dbtrans->where("location_report_gps_time <=", $edate);
							$this->dbtrans->where("location_report_view", "IDLE");
							//$this->dbtrans->where("location_report_location", $rowsgroup[$y]->location_report_location);
							//$this->dbtrans->where("location_report_geofence_type", "road");
							$this->dbtrans->where("location_report_speed", 0);
							//$this->dbtrans->where("location_report_jalur","kosongan");
							$this->dbtrans->order_by("location_report_gps_time","asc");
							$this->dbtrans->group_by("location_report_gps_time");
							$this->dbtrans->from($dbtable_source);
							$q = $this->dbtrans->get();
							$rows = $q->result();
							
							$data = array();
							$nopol = "";
							$on = false;
							$trows = count($rows);
							$total_history = $trows;
							
							if($trows > 0)
							{
								////-------------KONDISI BY LOCATION (KM) ALL JALUR-------------////
								if ($trows > 0){
								for($i=0;$i<$trows;$i++)
								{
									
									//if($rows[$i]->gps_speed == 0) continue;
									if($nopol != $rowvehicle[$x]->vehicle_no)
									{ //new vehicle
										if($on && $i!=0)
										{ 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
										}
								
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_event == "A")
										{                                
											$trip_no = 1;                    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_jalur'] = $rows[$i]->location_report_jalur;
											$on = true;
									
											if($i==$trows-1)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
												
											}
										}
										else
										{
											$trip_no = 1;
											$on = false;
										}
									}
									else
									{ //same vehicle //hanya data on
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_event == "A")
										{
											
											if(!$on)
											{    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_jalur'] = $rows[$i]->location_report_jalur;
											}
											$on = true;    
											if($i==$trows-1 && $on)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
											}                                    
										}
										//edit off
										else
										{            
											if($on)
											{
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
											}
											$on = false;
										}
									}
									$nopol = $rowvehicle[$x]->vehicle_no;
								}
								
									//Write Data On
									$i=1;
									$new = "";
									printf("WRITE DATA ALL : ");
									foreach($data as $vehicle_no=>$val)
									{
										if($new != $vehicle_no)
										{
											$cumm = 0;
											$trip_no = 1;
										}
										
										foreach($val as $no=>$report)
										{
											$mileage = $report['end_mileage']- $report['start_mileage'];
										   // if($mileage != 0) // edit 0 km engine ON
										   // {
												$duration = get_time_difference($report['start_time'], $report['end_time']);
												
												$start_1 = dbmaketime($report['start_time']);
												$end_1 = dbmaketime($report['end_time']);
												$duration_sec = $end_1 - $start_1;
												
												$show = "";
												if($duration[0]!=0)
												{
													$show .= $duration[0] ." Day ";
												}
												if($duration[1]!=0)
												{
													$show .= $duration[1] ." Hour ";
												}
												if($duration[2]!=0)
												{
													$show .= $duration[2] ." Min ";
												}
												if($show == "")
												{
													$show .= "0 Min";
												}
												$tm = round(($mileage/1000),2);
												$cumm += $tm;
												printf("|%s|",$i);
												
												$notrip = $trip_no++;
											 
												//mileage
												$xme = $tm;
												$xxme = explode(".",$xme);
												if (isset($xxme[1]))
												{
													$xsub = substr($xxme[1],0,2); 
													$x_mile = $xxme[0].".".$xsub;     
												}
												else
												{
													$x_mile = $xxme[0];
												}
										
												//cummulative
												$xcum = $cumm;
												$xxcum = explode(".",$xcum);
												if (isset($xxcum[1]))
												{
													$xcumsub = substr($xxcum[1],0,2); 
													$x_cum = $xxcum[0].".".$xcumsub;     
												}
												else
												{
													$x_cum = $xxcum[0];
												}
											
													$geofence_start = $report['start_geofence_location'];
													$geofence_end = $report['end_geofence_location'];
													
													$geofence_start_type = $report['start_geofence_type'];
													$geofence_end_type = $report['end_geofence_type'];
													
													if($x_mile > 0){
														$trip_mileage_status = "IDLE2";	
													}else{
														$trip_mileage_status = "IDLE2";	
													}
													
													unset($datainsert);
													$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
													$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
													$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
													$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
													$datainsert["trip_mileage_trip_no"] = $notrip;
													$datainsert["trip_mileage_engine"] = $report['engine'];
													$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
													$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
													$datainsert["trip_mileage_duration"] = $show;
													$datainsert["trip_mileage_duration_sec"] = $duration_sec;
													$datainsert["trip_mileage_trip_mileage"] = $x_mile;
													$datainsert["trip_mileage_km"] = $x_mile;
													$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
													$datainsert["trip_mileage_location_start"] = $report['start_position'];
													$datainsert["trip_mileage_location_end"] = $report['end_position'];
													$datainsert["trip_mileage_geofence_start"] = $geofence_start;
													$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
													$datainsert["trip_mileage_geofence_end"] = $geofence_end;
													$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
													$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
													$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
													$datainsert["trip_mileage_door_start"] = "";
													$datainsert["trip_mileage_door_end"] = "";
													$datainsert["trip_mileage_lat"] = $report['start_latitude'];
													$datainsert["trip_mileage_lng"] = $report['start_longitude'];
													$datainsert["trip_mileage_totaldata"] = $trows;
													$datainsert["trip_mileage_km_status"] = 1; //hardcode
													
													$datainsert["trip_mileage_speed_status_rev"] = 0;
													$datainsert["trip_mileage_speed_avg_rev"] = 0;
													$datainsert["trip_mileage_status"] = $trip_mileage_status;
													//$datainsert["trip_mileage_arah_data"] = $response_arah;
													$datainsert["trip_mileage_arah_status"] = $report['start_jalur'];
													
													
												if($duration_sec > 0 ){
													$this->dbtrip = $this->load->database("tensor_report",TRUE);
													$this->dbtrip->insert($dbtable,$datainsert);
													printf("OK");
												}else{
													printf(".");
												}
												
												$i++;
											
										}
									}
									
									unset($data);
							
									printf("FINISH FOR ALL JALUR : %s \r\n",$rowvehicle[$x]->vehicle_device);
									printf("============================================ \r\n");
								}
								
							}
							else
							{
								printf("SKIP PROCESS : %s \r\n", $trows);
								printf("SKIP ALL JALUR : %s \r\n", $rowvehicle[$x]->vehicle_no);
							}
							
							//end kosongan
							
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type_new;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0){
							$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
        
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL BY LOCATION IDLE BREAKDOWN DONE %s\r\n",$finish_time);
	
		if($total_process != 0)
		{
			
			//Send Email
			$cron_name = $cron_username." - "."OPERATIONAL BY LOCATION IDLE BREAKDOWN";
			$this->dbtrip = $this->load->database("tensor_report",TRUE);
			$this->dbtrip->select("trip_mileage_id");
			$this->dbtrip->where("trip_mileage_start_time >=",$startdate);
			$this->dbtrip->where("trip_mileage_end_time <=",$enddate);
			$qtrip = $this->dbtrip->get($dbtable);
			$rtrip = $qtrip->result();
			$total_data = count($rtrip);
			
			//get telegram group by company
			$this->db = $this->load->database("default",TRUE);
			$this->db->select("company_id,company_telegram_cron");
			$this->db->where("company_id",$company_username);
			$qcompany = $this->db->get("company");
			$rcompany = $qcompany->row();
			if(count($rcompany)>0){
				$telegram_group = $rcompany->company_telegram_cron;
			}else{
				$telegram_group = 0;
			}
			
			$message =  urlencode(
						"".$cron_name." \n".
						"Periode: ".$startdate." to ".$enddate." \n".
						"Total Data: ".$total_data." \n".
						"Start: ".$startproses." \n".
						"Finish: ".$finish_time." \n"
						);
						
			$sendtelegram = $this->telegram_direct($telegram_group,$message);
			printf("===SENT TELEGRAM OK\r\n");
			
			unset($mail);
			$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
			$mail['message'] = 
	"
	Cron Report Status :

	Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
	Start Cron : ".$start_time."
	End Cron   : ".$finish_time."
	Total Data : ".$total_data."
	End Data   : "."( ".$z." / ".$total_process." )"."
	Status     : Finish

	Thanks

	";
			$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
			$mail['bcc'] = "report.lacakmobil@yahoo.com";
			$mail['sender'] = "cron@lacak-mobil.com";
			//lacakmobilmail($mail);
			
			$this->dbtrip->close();
			$this->dbtrip->cache_delete_all();
		}
			
		printf("Send Email OK");
        
    }
	
	//operational by location breakdown from move - low
	function operational_bylocation_move_breakdown($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional_location";
		$report_type_new = "operasional_location_move_breakdown";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_location_";
        $report_source = "location_";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
        
        //$sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        //$edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
		$sdate = date("Y-m-d H:i:s", strtotime($startdate)); //sudh wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate)); //sudah wita
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device <> ", "69969039633231@TK510");
		$this->db->where("vehicle_device <> ", "58042081195547@GT08S");
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n"); 
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist2 = $this->load->database("gpshistory_rhino",true);
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);
						$this->dbhist3 = $this->load->database("gpshistory_rhino",true);						
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type_new);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
							
							printf("PROSES ALL JALUR \r\n");
							// select by report location kosongan
							$this->dbtrans->where("location_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
							$this->dbtrans->where("location_report_gps_time >=", $sdate);
							$this->dbtrans->where("location_report_gps_time <=", $edate);
							$this->dbtrans->where("location_report_view", "MOVE");
							//$this->dbtrans->where("location_report_location", $rowsgroup[$y]->location_report_location);
							//$this->dbtrans->where("location_report_geofence_type", "road");
							$this->dbtrans->where("location_report_speed >", 0);
							//$this->dbtrans->where("location_report_jalur","kosongan");
							$this->dbtrans->order_by("location_report_gps_time","asc");
							$this->dbtrans->group_by("location_report_gps_time");
							$this->dbtrans->from($dbtable_source);
							$q = $this->dbtrans->get();
							$rows = $q->result();
							
							$data = array();
							$nopol = "";
							$on = false;
							$trows = count($rows);
							$total_history = $trows;
							
							if($trows > 0)
							{
								////-------------KONDISI BY LOCATION (KM) ALL JALUR-------------////
								if ($trows > 0){
								for($i=0;$i<$trows;$i++)
								{
									
									//if($rows[$i]->gps_speed == 0) continue;
									if($nopol != $rowvehicle[$x]->vehicle_no)
									{ //new vehicle
										if($on && $i!=0)
										{ 
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i-1]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
										}
								
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_event == "A")
										{                                
											$trip_no = 1;                    
											$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
											$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_jalur'] = $rows[$i]->location_report_jalur;
											$on = true;
									
											if($i==$trows-1)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
												
											}
										}
										else
										{
											$trip_no = 1;
											$on = false;
										}
									}
									else
									{ //same vehicle //hanya data on
										//if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
										if($rows[$i]->location_report_event == "A")
										{
											
											if(!$on)
											{    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = 1;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_jalur'] = $rows[$i]->location_report_jalur;
											}
											$on = true;    
											if($i==$trows-1 && $on)
											{                                                
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
											}                                    
										}
										//edit off
										else
										{            
											if($on)
											{
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = $rows[$i]->location_report_gps_time;    
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $rows[$i]->location_report_location; 
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $rows[$i]->location_report_geofence_name;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->location_report_odometer;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->location_report_coordinate;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->location_report_latitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->location_report_longitude;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_type'] = $rows[$i]->location_report_geofence_type;
												$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_jalur'] = $rows[$i]->location_report_jalur;
											}
											$on = false;
										}
									}
									$nopol = $rowvehicle[$x]->vehicle_no;
								}
								
									//Write Data On
									$i=1;
									$new = "";
									printf("WRITE DATA ALL : ");
									foreach($data as $vehicle_no=>$val)
									{
										if($new != $vehicle_no)
										{
											$cumm = 0;
											$trip_no = 1;
										}
										
										foreach($val as $no=>$report)
										{
											$mileage = $report['end_mileage']- $report['start_mileage'];
										   // if($mileage != 0) // edit 0 km engine ON
										   // {
												$duration = get_time_difference($report['start_time'], $report['end_time']);
												
												$start_1 = dbmaketime($report['start_time']);
												$end_1 = dbmaketime($report['end_time']);
												$duration_sec = $end_1 - $start_1;
												
												$show = "";
												if($duration[0]!=0)
												{
													$show .= $duration[0] ." Day ";
												}
												if($duration[1]!=0)
												{
													$show .= $duration[1] ." Hour ";
												}
												if($duration[2]!=0)
												{
													$show .= $duration[2] ." Min ";
												}
												if($show == "")
												{
													$show .= "0 Min";
												}
												$tm = round(($mileage/1000),2);
												$cumm += $tm;
												printf("|%s|",$i);
												
												$notrip = $trip_no++;
											 
												//mileage
												$xme = $tm;
												$xxme = explode(".",$xme);
												if (isset($xxme[1]))
												{
													$xsub = substr($xxme[1],0,2); 
													$x_mile = $xxme[0].".".$xsub;     
												}
												else
												{
													$x_mile = $xxme[0];
												}
										
												//cummulative
												$xcum = $cumm;
												$xxcum = explode(".",$xcum);
												if (isset($xxcum[1]))
												{
													$xcumsub = substr($xxcum[1],0,2); 
													$x_cum = $xxcum[0].".".$xcumsub;     
												}
												else
												{
													$x_cum = $xxcum[0];
												}
											
													$geofence_start = $report['start_geofence_location'];
													$geofence_end = $report['end_geofence_location'];
													
													$geofence_start_type = $report['start_geofence_type'];
													$geofence_end_type = $report['end_geofence_type'];
													
													if($x_mile > 0){
														$trip_mileage_status = "MOVE2";	
													}else{
														$trip_mileage_status = "MOVE2";	
													}
													
													unset($datainsert);
													$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
													$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
													$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
													$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
													$datainsert["trip_mileage_trip_no"] = $notrip;
													$datainsert["trip_mileage_engine"] = $report['engine'];
													$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
													$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
													$datainsert["trip_mileage_duration"] = $show;
													$datainsert["trip_mileage_duration_sec"] = $duration_sec;
													$datainsert["trip_mileage_trip_mileage"] = $x_mile;
													$datainsert["trip_mileage_km"] = $x_mile;
													$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
													$datainsert["trip_mileage_location_start"] = $report['start_position'];
													$datainsert["trip_mileage_location_end"] = $report['end_position'];
													$datainsert["trip_mileage_geofence_start"] = $geofence_start;
													$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type;
													$datainsert["trip_mileage_geofence_end"] = $geofence_end;
													$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type;
													$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
													$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
													$datainsert["trip_mileage_door_start"] = "";
													$datainsert["trip_mileage_door_end"] = "";
													$datainsert["trip_mileage_lat"] = $report['start_latitude'];
													$datainsert["trip_mileage_lng"] = $report['start_longitude'];
													$datainsert["trip_mileage_totaldata"] = $trows;
													$datainsert["trip_mileage_km_status"] = 1; //hardcode
													
													$datainsert["trip_mileage_speed_status_rev"] = "low";
													$datainsert["trip_mileage_speed_avg_rev"] = 0;
													$datainsert["trip_mileage_status"] = $trip_mileage_status;
													//$datainsert["trip_mileage_arah_data"] = $response_arah;
													$datainsert["trip_mileage_arah_status"] = $report['start_jalur'];
													
													
												if($duration_sec > 0 ){
													$this->dbtrip = $this->load->database("tensor_report",TRUE);
													$this->dbtrip->insert($dbtable,$datainsert);
													printf("OK");
												}else{
													printf(".");
												}
												
												$i++;
											
										}
									}
									
									unset($data);
							
									printf("FINISH FOR ALL JALUR : %s \r\n",$rowvehicle[$x]->vehicle_device);
									printf("============================================ \r\n");
								}
								
							}
							else
							{
								printf("SKIP PROCESS : %s \r\n", $trows);
								printf("SKIP ALL JALUR : %s \r\n", $rowvehicle[$x]->vehicle_no);
							}
							
							//end kosongan
							
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type_new;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0){
							$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
		
        
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL BY LOCATION MOVE BREAKDOWN DONE %s\r\n",$finish_time);
	
		if($total_process != 0)
		{
			
			//Send Email
			$cron_name = $cron_username." - "."OPERATIONAL BY LOCATION MOVE BREAKDOWN";
			$this->dbtrip = $this->load->database("tensor_report",TRUE);
			$this->dbtrip->select("trip_mileage_id");
			$this->dbtrip->where("trip_mileage_start_time >=",$startdate);
			$this->dbtrip->where("trip_mileage_end_time <=",$enddate);
			$qtrip = $this->dbtrip->get($dbtable);
			$rtrip = $qtrip->result();
			$total_data = count($rtrip);
			
			//get telegram group by company
			$this->db = $this->load->database("default",TRUE);
			$this->db->select("company_id,company_telegram_cron");
			$this->db->where("company_id",$company_username);
			$qcompany = $this->db->get("company");
			$rcompany = $qcompany->row();
			if(count($rcompany)>0){
				$telegram_group = $rcompany->company_telegram_cron;
			}else{
				$telegram_group = 0;
			}
			
			$message =  urlencode(
						"".$cron_name." \n".
						"Periode: ".$startdate." to ".$enddate." \n".
						"Total Data: ".$total_data." \n".
						"Start: ".$startproses." \n".
						"Finish: ".$finish_time." \n"
						);
						
			$sendtelegram = $this->telegram_direct($telegram_group,$message);
			printf("===SENT TELEGRAM OK\r\n");
			
			unset($mail);
			$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
			$mail['message'] = 
	"
	Cron Report Status :

	Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
	Start Cron : ".$start_time."
	End Cron   : ".$finish_time."
	Total Data : ".$total_data."
	End Data   : "."( ".$z." / ".$total_process." )"."
	Status     : Finish

	Thanks

	";
			$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
			$mail['bcc'] = "report.lacakmobil@yahoo.com";
			$mail['sender'] = "cron@lacak-mobil.com";
			//lacakmobilmail($mail);
			
			$this->dbtrip->close();
			$this->dbtrip->cache_delete_all();
		}
			
		printf("Send Email OK");
        
    }
	
	function speed_avg_from_operasional($startdate="", $enddate="", $vehicleno="") //#3 /final
	{
		$report = "operasional_location_";
		$report_source = "location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		printf("===PERIODE : %s s/d %s\r\n", $startdate, $enddate);
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			break;
		}
		
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_trip_mileage,trip_mileage_duration,
								 trip_mileage_status,trip_mileage_coordinate_start,trip_mileage_coordinate_end,trip_mileage_speed_avg,trip_mileage_duration_sec,trip_mileage_km,
								 trip_mileage_km_new,trip_mileage_km_status");
		if($vehicleno != ""){
			$this->dbreport->where("trip_mileage_vehicle_no", $vehicleno);
		}
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		$this->dbreport->where("trip_mileage_engine", "1");
        $this->dbreport->order_by("trip_mileage_start_time","asc");
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		$total_rows = count($rows);
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));
			$sort_no = 0;
			for($x=0;$x<count($rows);$x++)
			{	
				$sort_no = $sort_no+1;
				printf("===DATA %s of %s \r\n", $sort_no, $total_rows);	
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$sdate = $rows[$x]->trip_mileage_start_time;
				$edate = $rows[$x]->trip_mileage_end_time;
				$trip_status = $rows[$x]->trip_mileage_status;
				$distance_km = $rows[$x]->trip_mileage_km;
				$distance_km_new = $rows[$x]->trip_mileage_km_new;
				$distance_status = $rows[$x]->trip_mileage_km_status;
				$distance_meter = $rows[$x]->trip_mileage_trip_mileage*1000;
				$duration_sec = $rows[$x]->trip_mileage_duration_sec;
				$duration_jam = $rows[$x]->trip_mileage_duration_sec/3600;
				$speed_avg_old = $rows[$x]->trip_mileage_speed_avg;
				$minutes = round(($rows[$x]->trip_mileage_duration_sec/60),0, PHP_ROUND_HALF_DOWN);
				$duration_minutes = $rows[$x]->trip_mileage_duration;
				printf("GET DATA  : %s \r\n", $vehicle_no);
				printf("REPORT DATE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				printf("MINUTES DT : %s \r\n", $minutes);
				printf("MINUTES : %s \r\n", $duration_minutes);
				
				//metode old avg data
				/*$result_gpsspeed = $this->get_data_speed_avg($deviceid,$sdate,$edate,$dbtable_source);
				
				$ex_speed = explode("|",$result_gpsspeed);
				$speed_status = $ex_speed[0];
				$speed_avg = round($ex_speed[1],2);
				$result_speed = json_decode($ex_speed[2],true);
				$result_speed_encode = json_encode($ex_speed[2],true);
				printf("SPEED : <20 (%s) >20 (%s) \r\n", $result_speed["low"], $result_speed["high"]);
				*/
				//metode old avg data
				
				//kecepatan rata-rata = jarak tempuh/waktu
				/*
				
				Jarak tempuh = 110 km
				Waktu tempuh =2 jam
				Kecepatan rata-rata = 110/2 = 55 km/jam.
				
				
				Jarak tempuh = 200 m
				Waktu tempuh =25 detik
				Kecepatan rata-rata = 200/25 = 8 m/detik.
				
				*/
				
				//detik
				/*
				$speed_avg_meter = $distance_meter/$duration_sec;
				$speed_avg = $speed_avg_meter/1000;
				*/
				//jika abnormal (hitung pakai KM NEW
				if($distance_status == 2){
					$distance_km_data = $distance_km_new;
				}else{ 
					$distance_km_data = $distance_km;
				}
				
				//km //old
				//$speed_avg_km = $distance_km_data/$duration_jam;
				
				//new from rumus excel 
				if($minutes > 0){
					$speed_avg_km = ($distance_km_data / ($minutes/60) );
				}else{
					
					$speed_avg_km = 0;
				}
				
				$speed_avg = $speed_avg_km;
				printf("SPEED AVG : %s \r\n", $speed_avg);
				if($speed_avg >= 20){ //pembulatan mulai 21 baru high edited ke 20
					$speed_status = "high";
				}else {
					$speed_status = "low";
				}
				
				printf("SPEED AVG OLD : %s \r\n", $speed_avg_old);
				printf("SPEED STATUS : %s \r\n", $speed_status);
				
				$speed_avg = round($speed_avg,2);
				
				$compare = $speed_avg_old - $speed_avg;
				$compare_fix = str_replace("-", "", $compare);
				
				printf("COMPARE : %s \r\n", $compare_fix);
				
				
				if($compare_fix > 7 && $compare_fix < 30){
					$abnormal = 1;
				}else if($compare_fix > 31 && $compare_fix < 50){
					$abnormal = 2;
				}else if($compare_fix > 51 && $compare_fix < 99999){
					$abnormal = 3;
				}else{
					$abnormal = 0;
				}
				
				/*if($speed_avg > 30 && $speed_avg > 30){
					$abnormal = 1;
				}else if($speed_avg > 31 && $speed_avg > 50){
					$abnormal = 2;
				}else if($speed_avg > 51 && $speed_avg > 99999){
					$abnormal = 3;
				}else{
					$abnormal = 0;
				}*/
				
				unset($data);
				$data["trip_mileage_speed_status_rev"] = $speed_status;
				$data["trip_mileage_speed_avg_rev"] = $speed_avg;
				$data["trip_mileage_speed_abnormal"] = $abnormal;
				
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				printf("======OK====== \r\n"); 
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	//operational
	function operational($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_no_engine'));
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_others'));
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        $limitdata_gps = 40000;
		printf("LIMIT DATA GPS : %s \r\n",$limitdata_gps);
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");    
                        $this->dbhist->where("gps_info_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
                        $this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");
						$this->dbhist->limit($limitdata_gps);
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");    
                        $this->dbhist2->where("gps_info_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);    
                        $this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");
						$this->dbhist2->limit($limitdata_gps);
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						$rows = array_merge($rows1, $rows2); //limit data rows = 10000
                
                        $data = array();
                        $nopol = "";
                        $on = false;
                        $trows = count($rows);
        
                        printf("TOTAL DATA : %s \r\n",$trows);
					if($trows < $limitdata_gps){
						
						////-------------KONDISI ON-------------////
						if ($trows > 0){
						for($i=0;$i<$trows;$i++)
                        {
                            //if($rows[$i]->gps_speed == 0) continue;
                            if($nopol != $rowvehicle[$x]->vehicle_no)
                            { //new vehicle
                                if($on && $i!=0)
                                { 
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] =  $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i-1]->gps_longitude_real, $rows[$i-1]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->gps_info_distance;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
		
									
                                }
                        
                                if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
                                {                                
                                    $trip_no = 1;                    
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
									
                                    $on = true;
                            
                                    if($i==$trows-1)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                }
                                else
                                {
                                    $trip_no = 1;
                                    $on = false;
                                }
                            }
                            else
                            { //same vehicle //hanya data on
                                if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
                                {
									
                                    if(!$on)
                                    {    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
										
                                    }
                                    $on = true;    
                                    if($i==$trows-1 && $on)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }                                    
                                }
								//edit off
                                else
                                {            
                                    if($on)
                                    {
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                    $on = false;
                                }
                            }
                            $nopol = $rowvehicle[$x]->vehicle_no;
                        }
                        
                        //Write Data On
                        $i=1;
                        $new = "";
                        printf("WRITE DATA ON : ");
                        foreach($data as $vehicle_no=>$val)
                        {
                            if($new != $vehicle_no)
                            {
                                $cumm = 0;
                                $trip_no = 1;
                            }
							
                            foreach($val as $no=>$report)
                            {
                                $mileage = $report['end_mileage']- $report['start_mileage'];
                               // if($mileage != 0) // edit 0 km engine ON
                               // {
                                    $duration = get_time_difference($report['start_time'], $report['end_time']);
									
									$start_1 = dbmaketime($report['start_time']);
									$end_1 = dbmaketime($report['end_time']);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
                                    $tm = round(($mileage/1000),2);
                                    $cumm += $tm;
                                    printf("|%s|",$i);
									
									$notrip = $trip_no++;
								 
                                    //mileage
                                    $xme = $tm;
                                    $xxme = explode(".",$xme);
                                    if (isset($xxme[1]))
                                    {
                                        $xsub = substr($xxme[1],0,2); 
                                        $x_mile = $xxme[0].".".$xsub;     
                                    }
                                    else
                                    {
                                        $x_mile = $xxme[0];
                                    }
                            
                                    //cummulative
                                    $xcum = $cumm;
                                    $xxcum = explode(".",$xcum);
                                    if (isset($xxcum[1]))
                                    {
                                        $xcumsub = substr($xxcum[1],0,2); 
                                        $x_cum = $xxcum[0].".".$xcumsub;     
                                    }
                                    else
                                    {
                                        $x_cum = $xxcum[0];
                                    }
								
										$geofence_start = $report['start_geofence_location'];
										$geofence_end = $report['end_geofence_location'];
										$geofence_start_type = $this->get_geofence_type($geofence_start,$rowvehicle[$x]->vehicle_dbname_live);
										$geofence_end_type = $this->get_geofence_type($geofence_end,$rowvehicle[$x]->vehicle_dbname_live);
										
										if($geofence_start_type == false){
											$geofence_start_type_name = "0";
										}else{
											$geofence_start_type_name = $geofence_start_type;
										}
										
										if($geofence_end_type == false){
											$geofence_end_type_name = "0";
										}else{
											$geofence_end_type_name = $geofence_end_type;
										}
										
										if($geofence_start == "0"){
											$geofence_start_type_name = "0";
										}
										
										if($geofence_end == "0"){
											$geofence_end_type_name = "0";
										}
							
									
								if(isset($report['vehicle_name'])){
									
										$ex_position_start = explode(",",$report['start_position']->display_name);
										$ex_position_end = explode(",",$report['end_position']->display_name);
										
										unset($datainsert);
										$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
										$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
										$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
										$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
										$datainsert["trip_mileage_trip_no"] = $notrip;
										$datainsert["trip_mileage_engine"] = $report['engine'];
										$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
										$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
										$datainsert["trip_mileage_duration"] = $show;
										$datainsert["trip_mileage_duration_sec"] = $duration_sec;
										$datainsert["trip_mileage_trip_mileage"] = $x_mile;
										$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
										$datainsert["trip_mileage_location_start"] = $ex_position_start[0];
										$datainsert["trip_mileage_location_end"] = $ex_position_end[0];
										$datainsert["trip_mileage_geofence_start"] = $geofence_start;
										$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type_name;
										$datainsert["trip_mileage_geofence_end"] = $geofence_end;
										$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type_name;
										$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
										$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
										$datainsert["trip_mileage_door_start"] = $report['start_door'];
										$datainsert["trip_mileage_door_end"] = $report['end_door'];
										$datainsert["trip_mileage_lat"] = $report['start_latitude'];
										$datainsert["trip_mileage_lng"] = $report['start_longitude'];
										$datainsert["trip_mileage_totaldata"] = $trows;
										
									if($duration_sec > 0 ){
										$this->dbtrip = $this->load->database("tensor_report",TRUE);
										$this->dbtrip->insert($dbtable,$datainsert);
										
										printf("OK");
									}
									
								}

                                    $i++;
								//}
                            }
                        }
						
                        unset($data);
            
                        printf("FINISH FOR VEHICLE ON : %s \r\n",$rowvehicle[$x]->vehicle_device);
                        printf("============================================ \r\n");
						}
						
						////---------------KONDISI OFF---------------///
						if ($trows > 0){
                        for($i=0;$i<$trows;$i++)
                        {
                            //if($rows[$i]->gps_speed == 0) continue;
                            if($nopol != $rowvehicle[$x]->vehicle_no)
                            { //new vehicle
                                if($on && $i!=0)
                                { 
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition($rows[$i-1]->gps_longitude, $rows[$i-1]->gps_ew, $rows[$i-1]->gps_latitude, $rows[$i-1]->gps_ns);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i-1]->gps_longitude_real, $rows[$i-1]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->gps_info_distance;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
									
                                }
                        
                                if(substr($rows[$i]->gps_info_io_port, 4, 1) == 0)
                                {                                
                                    $trip_no = 1;                    
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
                                    
									$on = true;
                            
                                    if($i==$trows-1)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                }
                                else
                                {
                                    $trip_no = 1;
                                    $on = false;
                                }
                            }
                            else
                            { //same vehicle //hanya data off
                                if(substr($rows[$i]->gps_info_io_port, 4, 1) == 0)
                                {
									//print_r(substr($rows[$i]->gps_info_io_port, 4, 1));exit();
                                    if(!$on)
                                    {    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                    $on = true;    
                                    if($i==$trows-1 && $on)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }                                    
                                }
								//edit off
                                else
                                {            
                                    if($on)
                                    {
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                    $on = false;
                                }
                            }
                            $nopol = $rowvehicle[$x]->vehicle_no;
                        }
                        
                        //Write Data off //kondisi tidak ada data ?
                        $i=1;
                        $new = "";
                        printf("WRITE DATA OFF : ");
                        foreach($data as $vehicle_no=>$val)
                        {
                            if($new != $vehicle_no)
                            {
                                $cumm = 0;
                                $trip_no = 1;
                            }
							
                            foreach($val as $no=>$report_off)
                            {
                                $mileage = $report_off['end_mileage']- $report_off['start_mileage'];
                               // if($mileage != 0) // edit 0 km engine off
                               // {
                                    $duration = get_time_difference($report_off['start_time'], $report_off['end_time']);
									
									$start_1 = dbmaketime($report_off['start_time']);
									$end_1 = dbmaketime($report_off['end_time']);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
                                    $tm = round(($mileage/1000),2);
                                    $cumm += $tm;
                                    printf("|%s|",$i);
									
									$notrip = $trip_no++;
								 
                                    //mileage
                                    $xme = $tm;
                                    $xxme = explode(".",$xme);
                                    if (isset($xxme[1]))
                                    {
                                        $xsub = substr($xxme[1],0,2); 
                                        $x_mile = $xxme[0].".".$xsub;     
                                    }
                                    else
                                    {
                                        $x_mile = $xxme[0];
                                    }
                            
                                    //cummulative
                                    $xcum = $cumm;
                                    $xxcum = explode(".",$xcum);
                                    if (isset($xxcum[1]))
                                    {
                                        $xcumsub = substr($xxcum[1],0,2); 
                                        $x_cum = $xxcum[0].".".$xcumsub;     
                                    }
                                    else
                                    {
                                        $x_cum = $xxcum[0];
                                    }
									$geofence_start_off = $report_off['start_geofence_location'];
									$geofence_end_off = $report_off['end_geofence_location'];
									
									$geofence_start_type_off = $this->get_geofence_type($geofence_start_off,$rowvehicle[$x]->vehicle_dbname_live);
									$geofence_end_type_off = $this->get_geofence_type($geofence_end_off,$rowvehicle[$x]->vehicle_dbname_live);
									
									if($geofence_start_type_off == false){
										$geofence_start_type_name_off = 0;
									}else{
										$geofence_start_type_name_off = $geofence_start_type_off;
									}
										
									if($geofence_end_type_off == false){
										$geofence_end_type_name_off = 0;
									}else{
										$geofence_end_type_name_off = $geofence_end_type_off;
									}
									
									if($geofence_start_off == "0"){
											$geofence_start_type_name_off = "0";
										}
										
									if($geofence_end_off == "0"){
											$geofence_end_type_name_off = "0";
										}

									//edit flag engine OFF , nol km, lebih dari 10 menit
								if (isset($report_off['vehicle_name'])){
										
										$ex_position_start2 = explode(",",$report_off['start_position']->display_name);
										$ex_position_end2 = explode(",",$report_off['end_position']->display_name);
									
										unset($datainsert);
										$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
										$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
										$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
										$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
										$datainsert["trip_mileage_trip_no"] = $notrip;
										$datainsert["trip_mileage_engine"] = $report_off['engine'];
										$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report_off['start_time']));
										$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report_off['end_time']));
										$datainsert["trip_mileage_duration"] = $show;
										$datainsert["trip_mileage_duration_sec"] = $duration_sec;
										$datainsert["trip_mileage_trip_mileage"] = $x_mile;
										$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
										$datainsert["trip_mileage_location_start"] = $ex_position_start2[0];
										$datainsert["trip_mileage_location_end"] = $ex_position_end2[0];
										$datainsert["trip_mileage_geofence_start"] = $geofence_start_off;
										$datainsert["trip_mileage_geofence_end"] = $geofence_end_off;
										$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type_name_off;
										$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type_name_off;
										$datainsert["trip_mileage_coordinate_start"] = $report_off['start_coordinate'];
										$datainsert["trip_mileage_coordinate_end"] = $report_off['end_coordinate'];
										$datainsert["trip_mileage_door_start"] = $report_off['start_door'];
										$datainsert["trip_mileage_door_end"] = $report_off['end_door'];
										$datainsert["trip_mileage_lat"] = $report['start_latitude'];
										$datainsert["trip_mileage_lng"] = $report['start_longitude'];
										$datainsert["trip_mileage_totaldata"] = $trows;
									
									if($duration_sec > 0 ){
										$this->dbtrip = $this->load->database("tensor_report",TRUE);
										$this->dbtrip->insert($dbtable,$datainsert);
										printf("OK");
									}
								}
                                    $i++;
                             // }
                            }
                        }
                        printf("FINISH FOR VEHICLE OFF : %s \r\n",$rowvehicle[$x]->vehicle_device);
						printf("============================================ \r\n");
						}
						
					}else{
						printf("TO MANY : %s \r\n", $trows);
						printf("LIMIT %s DATA SKIP VEHICLE : %s \r\n",$limitdata_gps, $rowvehicle[$x]->vehicle_no);
					}
						
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0 && $trows < $limitdata_gps){
							$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
        
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL DONE %s\r\n",$finish_time);
	
	if($total_process != 0){
		
		//Send Email
		$cron_name = $cron_username." - "."OPERATIONAL REPORT";
		$this->dbtrip = $this->load->database("tensor_report",TRUE);
        $this->dbtrip->select("trip_mileage_id");
        $this->dbtrip->where("trip_mileage_start_time >=",$startdate);
        $this->dbtrip->where("trip_mileage_end_time <=",$enddate);
        $qtrip = $this->dbtrip->get($dbtable);
        $rtrip = $qtrip->result();
		$total_data = count($rtrip);
		
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
        $this->db->select("company_id,company_telegram_cron");
        $this->db->where("company_id",$company_username);
        $qcompany = $this->db->get("company");
        $rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_cron;
		}else{
			$telegram_group = 0;
		}
		
		$message =  urlencode(
					"".$cron_name." \n".
					"Periode: ".$startdate." to ".$enddate." \n".
					"Total Data: ".$total_data." \n".
					"Start: ".$startproses." \n".
					"Finish: ".$finish_time." \n"
					);
					
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		unset($mail);
		$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
		$mail['message'] = 
"
Cron Report Status :

Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
Start Cron : ".$start_time."
End Cron   : ".$finish_time."
Total Data : ".$total_data."
End Data   : "."( ".$z." / ".$total_process." )"."
Status     : Finish

Thanks

";
		$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
		$mail['bcc'] = "report.lacakmobil@yahoo.com";
		$mail['sender'] = "cron@lacak-mobil.com";
		//lacakmobilmail($mail);
		
		$this->dbtrip->close();
		$this->dbtrip->cache_delete_all();
	}
			
		printf("Send Email OK");
        
    }
	
	function update_geofence_from_operasional($startdate="", $enddate="" ,$vehicleno="")  
	{
		$report = "operasional_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,trip_mileage_coordinate_end");
		if($vehicleno != ""){
			$this->dbreport->where("trip_mileage_vehicle_no", $vehicleno);
		}
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
        $this->dbreport->order_by("trip_mileage_id","asc");
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));	
			
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				
				$cordinate1 = explode(",",$rows[$x]->trip_mileage_coordinate_start);
				$latitude1 = $cordinate1[0];
				$longitude1 = $cordinate1[1];
				
				$cordinate2 = explode(",",$rows[$x]->trip_mileage_coordinate_end);
				$latitude2 = $cordinate2[0];
				$longitude2 = $cordinate2[1];
				
				printf("===PROCESS ID: %s START: %s END: %s DATE: %s %s \r\n", $id_report, $rows[$x]->trip_mileage_coordinate_start, $rows[$x]->trip_mileage_coordinate_end, 
																		 date("Y-m-d", strtotime($startdate)), date("Y-m-d", strtotime($enddate)) );
				
				$converted_gps1 = $this->getGeofence_location_live_report($longitude1, $latitude1, "webtracking_gps_borneo_live");
				$converted_gps_street1 = $this->getPosition_other($longitude1, $latitude1);
				$ex_position_start = explode(",",$converted_gps_street1->display_name);
				printf("===GEOFENCE START LOCATION : %s \r\n", $converted_gps1);	
				printf("===STREET START LOCATION : %s \r\n", $ex_position_start[0]);	
				
				
				
				// coordinate 2 = END
				
				$converted_gps2 = $this->getGeofence_location_live_report($longitude2, $latitude2, "webtracking_gps_borneo_live");
				$converted_gps_street2 = $this->getPosition_other($longitude2, $latitude2);
				$ex_position_end = explode(",",$converted_gps_street2->display_name);
				printf("===GEOFENCE END LOCATION : %s \r\n", $converted_gps2);	
				printf("===STREET END LOCATION : %s \r\n", $ex_position_end[0]);	
				
				
				unset($data);
				$data["trip_mileage_geofence_start"] = $converted_gps1;
				$data["trip_mileage_location_start"] = $ex_position_start[0];
				$data["trip_mileage_geofence_end"] = $converted_gps2;
				$data["trip_mileage_location_end"] = $ex_position_end[0];
				
				printf("UPDATE GEOFENCE NAME : %s, %s, %s, %s, %s \r\n", $rows[$x]->trip_mileage_id, $converted_gps1, $converted_gps2, $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time); 
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				
				
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function check_move_from_operasional($startdate="", $enddate="" ,$dbhistory="", $vehicleno="")  
	{
		$report = "operasional_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
		
		if($dbhistory == ""){
			$dbhistory = "gpshistory";
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,trip_mileage_coordinate_end");
		if($vehicleno != ""){
			$this->dbreport->where("trip_mileage_vehicle_no", $vehicleno);
		}
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		$this->dbreport->where("trip_mileage_engine", "1");
        $this->dbreport->order_by("trip_mileage_id","asc");
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));	
			
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$sdate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_start_time))); //wita
				$edate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_end_time))); //wita
				printf("GET DATA  : %s \r\n", $vehicle_no);
				printf("REPORT DATE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				printf("GPS DATE : %s to %s \r\n", $sdate, $edate);
				
				$data_vehicle = $this->getvehicle($deviceid);
				$result_gps = $this->get_data_history($data_vehicle,$sdate,$edate,$dbhistory);
				
				$ex_result_gps = explode("|",$result_gps);
				
				$status = $ex_result_gps[0];
				$totaldata = $ex_result_gps[1];
				$totalkm = $ex_result_gps[2];
				
				printf("RESULT : %s %s %s \r\n", $status, $totaldata, $totalkm);
				
				unset($data);
				$data["trip_mileage_status"] = $status;
				$data["trip_mileage_totalgps"] = $totaldata;
				$data["trip_mileage_km"] = $totalkm;
			
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function check_move_from_operasional_bylocation_minus($startdate="", $enddate="" ,$dbhistory="", $vehicleno="")  //XXX optional
	{
		$report = "operasional_location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
		
		if($dbhistory == ""){
			$dbhistory = "gpshistory";
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,
								 trip_mileage_coordinate_end,trip_mileage_trip_mileage,trip_mileage_duration,trip_mileage_km");
		if($vehicleno != ""){
			$this->dbreport->where("trip_mileage_vehicle_no", $vehicleno);
		}
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		$this->dbreport->where("trip_mileage_engine", "1");
		$this->dbreport->where("trip_mileage_km <", 0);
        $this->dbreport->order_by("trip_mileage_start_time","asc");
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));	
			
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$sdate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_start_time))); //wita
				$edate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_end_time))); //wita
				printf("GET DATA  : %s \r\n", $vehicle_no);
				printf("REPORT DATE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				//printf("GPS DATE : %s to %s \r\n", $sdate, $edate);
				printf("FROM : %s %s %s \r\n", $rows[$x]->trip_mileage_coordinate_start, $rows[$x]->trip_mileage_coordinate_end, $rows[$x]->trip_mileage_duration);
				
				$ex_start = explode(",",$rows[$x]->trip_mileage_coordinate_start);
				$lat1 = $ex_start[0];
				$long1 = $ex_start[1];
				
				$ex_end = explode(",",$rows[$x]->trip_mileage_coordinate_end);
				$lat2 = $ex_end[0];
				$long2 = $ex_end[1];
				
				
							//Apigoogle
							$apikey = "AIzaSyDjkxkZrIVJbT6Bv2nmJlK9OvNYTBcA2z0";
							$eta_data = $this->getETA($lat1, $long1, $lat2, $long2, $apikey);
							//print_r($eta_data);
							
							if($eta_data['status'] == "OK"){
								$duration_text = $eta_data['rows'][0]['elements'][0]['duration']['text'];
								$duration_value = $eta_data['rows'][0]['elements'][0]['duration']['value'];
								$distance_text = $eta_data['rows'][0]['elements'][0]['distance']['text'];
								$distance_value = $eta_data['rows'][0]['elements'][0]['distance']['value'];
								
								$newdistance_api = round(($distance_value/1000),2); //km
								$newduration_api = $duration_value/60;
								
								printf("GET DISTANCE API : %s %s \r\n", $newdistance_api , $newduration_api);
								
							}else{
								printf("API ERROR : %s \r\n", $eta_data);
							}
							
							if($newdistance_api > 0 ){
								$status = "MOVE";
							}else{
								$status = "IDLE";
							}
				
				unset($data);
				$data["trip_mileage_status"] = $status;
				$data["trip_mileage_km"] = $newdistance_api;
				//$data["trip_mileage_km_v2"] = $newdistance_api;
				//$data["trip_mileage_km_rev"] = 1;
			
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				printf("===========OK======== \r\n"); 
				
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function check_move_from_operasional_bylocation_abnormal($startdate="", $enddate="" ,$dbhistory="", $iddata="")  //XXX dari google api tidak valid ??? XX
	{
		$report = "operasional_location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
		
		if($dbhistory == ""){
			$dbhistory = "gpshistory";
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,
								 trip_mileage_coordinate_end,trip_mileage_trip_mileage,trip_mileage_duration");
								 
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		if($iddata != ""){
			$this->dbreport->where("trip_mileage_id", $iddata);
		}else{
			
			
			$this->dbreport->where("trip_mileage_engine", "1");
			$this->dbreport->where("trip_mileage_duration_sec >", 60);
			$this->dbreport->where("trip_mileage_speed_abnormal", 1);
			$this->dbreport->where("trip_mileage_location_start !=", "POOL TMS");
			$this->dbreport->like("trip_mileage_location_start", "KM");
			$this->dbreport->order_by("trip_mileage_start_time","asc");
		}
		
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));
		
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$sdate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_start_time))); //wita
				$edate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_end_time))); //wita
				printf("GET DATA  : %s \r\n", $vehicle_no);
				printf("REPORT DATE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				//printf("GPS DATE : %s to %s \r\n", $sdate, $edate);
				printf("FROM : %s %s %s \r\n", $rows[$x]->trip_mileage_coordinate_start, $rows[$x]->trip_mileage_coordinate_end, $rows[$x]->trip_mileage_duration);
				
				$ex_start = explode(",",$rows[$x]->trip_mileage_coordinate_start);
				$lat1 = $ex_start[0];
				$long1 = $ex_start[1];
				
				$ex_end = explode(",",$rows[$x]->trip_mileage_coordinate_end);
				$lat2 = $ex_end[0];
				$long2 = $ex_end[1];
				
				
							//Apigoogle
							$apikey = "AIzaSyDjkxkZrIVJbT6Bv2nmJlK9OvNYTBcA2z0";
							$eta_data = $this->getETA($lat1, $long1, $lat2, $long2, $apikey);
							//print_r($eta_data);
							
							if($eta_data['status'] == "OK"){
								$duration_text = $eta_data['rows'][0]['elements'][0]['duration']['text'];
								$duration_value = $eta_data['rows'][0]['elements'][0]['duration']['value'];
								$distance_text = $eta_data['rows'][0]['elements'][0]['distance']['text'];
								$distance_value = $eta_data['rows'][0]['elements'][0]['distance']['value'];
								
								$newdistance_api = round(($distance_value/1000),2); //km
								$newduration_api = $duration_value/60;
								
								printf("GET DISTANCE API : %s %s \r\n", $newdistance_api , $newduration_api);
								
							}else{
								printf("API ERROR : %s \r\n", $eta_data);
							}
							
							if($newdistance_api > 0 ){
								$status = "MOVE";
							}else{
								$status = "IDLE";
							}
				
				unset($data);
				$data["trip_mileage_status"] = $status;
				$data["trip_mileage_km"] = $newdistance_api;
				$data["trip_mileage_km_rev"] = 1;
			
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				printf("===========OK======== \r\n"); 
				sleep(1);
				
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function duration_rev($source_id="", $dest_id="", $dbtable="")  //optional
	{	
		printf("===STARTING GET DATA  %s %s \r\n", $source_id, $dest_id);
		$this->dbreport = $this->load->database("tensor_report",true); 
		
		$this->dbreport->where("trip_mileage_id",$dest_id);
        $this->dbreport->from($dbtable);
        $q_dest = $this->dbreport->get();
        $row_dest = $q_dest->row();
		$total_dest = count($row_dest);
		
		$this->dbreport->where("trip_mileage_id",$source_id);
        $this->dbreport->from($dbtable);
        $q_source = $this->dbreport->get();
        $row_source = $q_source->row();
		$total_source = count($row_source);
		
		//print_r($total_source." ".$total_dest);exit();
		
		if($total_dest > 0 && $total_source > 0){
				
				$old_starttime = $row_source->trip_mileage_start_time;
				$old_endtime = $row_source->trip_mileage_end_time;
				
				$new_starttime = $row_dest->trip_mileage_start_time;
				$new_endtime = $row_dest->trip_mileage_end_time;
				
				$duration = get_time_difference($old_starttime, $new_starttime); //starttime data kedua jadi endtime data pertama !!
									
									$start_1 = dbmaketime($old_starttime);
									$end_1 = dbmaketime($new_starttime);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
									
								$rev_duration = $show;
								$rev_duration_sec = $duration_sec;
								
				printf("===REV DATA %s %s %s %s %s \r\n", $row_source->trip_mileage_id, $old_starttime, $new_starttime, $rev_duration, $rev_duration_sec);
				
				unset($data);
				$data["trip_mileage_end_time"] = $new_starttime;
				$data["trip_mileage_duration"] = $rev_duration;
				$data["trip_mileage_duration_sec"] = $rev_duration_sec;
				$data["trip_mileage_duration_rev"] = 1;
				
				$this->dbreport->where("trip_mileage_id", $row_source->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				
				printf("======OK====== \r\n"); 
			
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function gettimediff_txt($sdate="", $stime="", $edate="", $etime="") 
	{	
//		printf("===STARTING GET DATA  %s %s \r\n", $source_id, $dest_id);
		$starttime = $sdate." ".$stime;
		$endtime = $edate." ".$etime;
				$duration = get_time_difference($starttime, $endtime); 
									 
									$start_1 = dbmaketime($starttime);
									$end_1 = dbmaketime($endtime);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
									
								$rev_duration = $show;
								$rev_duration_sec = $duration_sec;
								
				printf("===RESULT DATA %s %s %s %s \r\n", $starttime, $endtime, $rev_duration, $rev_duration_sec);
				
			
		
		
	}
	
	function compare_km($startdate="", $enddate="" ,$dbhistory="", $iddata="")  //#2 after location move, idle, off 
	{
		$report = "operasional_location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
		
		if($dbhistory == ""){
			$dbhistory = "gpshistory";
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,
								 trip_mileage_coordinate_end,trip_mileage_trip_mileage,trip_mileage_duration,trip_mileage_km,trip_mileage_location_start,trip_mileage_location_end,
								 trip_mileage_km_status");
								 
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		if($iddata != ""){
			$this->dbreport->where("trip_mileage_id", $iddata);
		}else{
			
			
			$this->dbreport->where("trip_mileage_engine", "1");
			$this->dbreport->where("trip_mileage_duration_sec >", 60);
			$this->dbreport->where("trip_mileage_location_start !=", "POOL TMS");
			$this->dbreport->like("trip_mileage_location_start", "KM");
			$this->dbreport->order_by("trip_mileage_start_time","asc");
		}
		
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));
			$km_port = array("PORT BIB","PORT BIR","PORT TIA");
			$km_loc = array("KM");
			
			for($x=0;$x<count($rows);$x++)
			{
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$km_now = $rows[$x]->trip_mileage_km;
				$km_skip = 0;
				printf("GET DATA  : %s KM now: %s \r\n", $vehicle_no, $km_now);
				printf("PERIODE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				printf("LOCATION : %s to %s \r\n", $rows[$x]->trip_mileage_location_start, $rows[$x]->trip_mileage_location_end);
			
				$km_start = trim(str_replace("KM", "", $rows[$x]->trip_mileage_location_start));
				$km_end_data = $rows[$x]->trip_mileage_location_end;
				$km_end_result = substr($km_end_data, 0, 2);
				if($km_end_result == "KM"){
					$km_end = trim(str_replace("KM", "", $rows[$x]->trip_mileage_location_end));
				}else{
					if (in_array($rows[$x]->trip_mileage_location_end, $km_port)){
						$km_end = 0;
						//printf("FROM PORT %s \r\n", $km_end);
					}else{
						$km_end_data = $this->getDistance_master($rows[$x]->trip_mileage_location_end);
						$ex_km = explode("|",$km_end_data);
						$km_end = $ex_km[0];
						$km_skip = $ex_km[1];
						//printf("FROM DIST MASTER %s \r\n", $km_end);
					}
				}
				
				printf("KM START %s to KM END %s \r\n", $km_start, $km_end);
				
				$km_new = abs($km_end - $km_start);
				printf("KM NEW %s \r\n", $km_new);
				
				if($km_skip == 0){
					$compare_km = abs($km_new - $km_now);
					printf("COMPARE KM %s : %s = %s \r\n", $km_new, $km_now, $compare_km);
					if($compare_km > 1){
						$km_status = 2;//abnormal
					}else{
						$km_status = 1; //normal
					}
					
				}else{
					printf("SKIP KM %s \r\n", $rows[$x]->trip_mileage_location_end);
					$km_status = 1; //normal
				}
					printf("STATUS %s \r\n", $km_status);
					
				unset($data);
				$data["trip_mileage_km_status"] = $km_status;
				$data["trip_mileage_km_new"] = $km_new;
				$data["trip_mileage_km_var"] = $compare_km;
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				
				printf("===========OK======== \r\n"); 
				
				
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function location_breakdown_view($startdate="", $enddate="")  //rubah status report location idle ke status view aktif brdasarkan opr by location
	{
		$report = "operasional_location_";
		$report_location = "location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
		
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,trip_mileage_coordinate_start,
								 trip_mileage_coordinate_end,trip_mileage_trip_mileage,trip_mileage_duration,trip_mileage_km,trip_mileage_location_start,trip_mileage_location_end,
								 trip_mileage_km_status");
		$this->dbreport->order_by("trip_mileage_start_time","asc");
		$this->dbreport->where("trip_mileage_status", "MOVE");
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_end_time <=", $enddate);
		$this->dbreport->where("trip_mileage_engine", "1");
		$this->dbreport->where("trip_mileage_duration_sec >=", 60);
		$this->dbreport->where("trip_mileage_location_start <>", "POOL TMS");
		$this->dbreport->like("trip_mileage_location_start", "KM");
		$this->dbreport->where("trip_mileage_km_status",1); //only valid data	
		$this->dbreport->where("trip_mileage_speed_status_rev","low");
		
		$this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		
		if(count($rows)>0){
			$total_rows = count($rows);
			printf("===JUMLAH DATA OPR : %s \r\n", $total_rows);
			
			for($x=0;$x<$total_rows;$x++)
			{
				$nourut = $x+1;
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$periode_start = $rows[$x]->trip_mileage_start_time;
				$periode_end = $rows[$x]->trip_mileage_end_time;
				$periode_dur = $rows[$x]->trip_mileage_duration;
				printf("===PERIODE : %s to %s : %s (%s of %s) \r\n", $periode_start, $periode_end, $periode_dur, $nourut, $total_rows);
			
				$update_view_data = $this->getOperational_bylocation_idle($deviceid,$periode_start,$periode_end,$dbtable_location);
				$update_view_data2 = $this->getOperational_bylocation_move($deviceid,$periode_start,$periode_end,$dbtable_location);
				
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
		printf("===========SELESAI======== \r\n"); 
		
	}
	
	function getETA($latitude1, $longitude1, $latitude2, $longitude2, $apikey){
        $dataJson = file_get_contents("https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins=".$latitude1.",".$longitude1."&destinations=".$latitude2.",".$longitude2."&key=".$apikey."");
		//printf("JSON API %s \r\n", $dataJson);
		$data = json_decode($dataJson,true);
		
        return $data;
    }
	
	function check_status_from_operasional($startdate="", $enddate="" ,$dbhistory="", $vehicleno="")  
	{
		$report = "operasional_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
		
		if($dbhistory == ""){
			$dbhistory = "gpshistory";
		}
        
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("trip_mileage_id,trip_mileage_vehicle_id,trip_mileage_vehicle_no,trip_mileage_start_time,trip_mileage_end_time,
								 trip_mileage_status,trip_mileage_coordinate_start,trip_mileage_coordinate_end");
		if($vehicleno != ""){
			$this->dbreport->where("trip_mileage_vehicle_no", $vehicleno);
		}
		$this->dbreport->where("trip_mileage_start_time >=", $startdate);
		$this->dbreport->where("trip_mileage_start_time <=", $enddate);
		$this->dbreport->where("trip_mileage_engine", "1");
        $this->dbreport->order_by("trip_mileage_id","asc");
        $this->dbreport->from($dbtable);
        $q = $this->dbreport->get();
        $rows = $q->result();
		$total_rows = count($rows);
		if(count($rows)>0){
			
			printf("===JUMLAH DATA OPR : %s \r\n", count($rows));	
			$sort_no = 0;
			for($x=0;$x<count($rows);$x++)
			{	
				$sort_no = $sort_no+1;
				printf("===DATA %s of %s \r\n", $sort_no, $total_rows);	
				$id_report = $rows[$x]->trip_mileage_id;
				$deviceid = $rows[$x]->trip_mileage_vehicle_id;
				$vehicle_no = $rows[$x]->trip_mileage_vehicle_no;
				$sdate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_start_time))); //wita
				$edate = date("Y-m-d H:i:s", strtotime("-6 hour", strtotime($rows[$x]->trip_mileage_end_time))); //wita
				$trip_status = $rows[$x]->trip_mileage_status;
				printf("GET DATA  : %s \r\n", $vehicle_no);
				printf("REPORT DATE : %s to %s \r\n", $rows[$x]->trip_mileage_start_time, $rows[$x]->trip_mileage_end_time);
				printf("GPS DATE : %s to %s \r\n", $sdate, $edate);
				
				$data_vehicle = $this->getvehicle($deviceid);
				$result_gps = $this->get_data_history_direction($data_vehicle,$sdate,$edate,$trip_status,$dbhistory);
				$result_direction = json_decode($result_gps,true);
				printf("DIRECTION : KOSONGAN (%s) MUATAN (%s) \r\n", $result_direction["kosongan"], $result_direction["muatan"]);
				
				if($result_direction["kosongan"] > $result_direction["muatan"]){
					$arah_status = "kosongan";
				}else if($result_direction["muatan"] > $result_direction["kosongan"]){
					$arah_status = "muatan";
				}else if($result_direction["muatan"] == 0 && $result_direction["kosongan"] == 0){
					$arah_status = "-";
				}else if($result_direction["muatan"] == $result_direction["kosongan"]){
					$arah_status = "--";
				}
				else{
					$arah_status = "-";
				}
				printf("ARAH STATUS : %s \r\n", $arah_status);
				
				
				$result_gpsspeed = $this->get_data_history_speed($data_vehicle,$sdate,$edate,$dbhistory);
				$result_speed = json_decode($result_gpsspeed,true);
				printf("SPEED : <20 (%s) >20 (%s) \r\n", $result_speed["low"], $result_speed["high"]);
				
				if($result_speed["low"] > $result_speed["high"]){
					$speed_status = "low";
				}else if($result_speed["high"] > $result_speed["low"]){
					$speed_status = "high";
				}else if($result_speed["low"] == 0 &&  $result_speed["high"] == 0){
					$speed_status = "-";
				}else{
					$speed_status = "other";
				}
				printf("SPEED STATUS : %s \r\n", $speed_status);
				
				unset($data);
				$data["trip_mileage_arah_data"] = $result_gps;
				$data["trip_mileage_arah_status"] = $arah_status;
				
				$data["trip_mileage_speed_data"] = $result_gpsspeed;
				$data["trip_mileage_speed_status"] = $speed_status;
				
				$this->dbreport->where("trip_mileage_id", $rows[$x]->trip_mileage_id);	
				$this->dbreport->update($dbtable,$data);
				printf("======OK====== \r\n"); 
			}
		}else{
			printf("===========TIDAK ADA DATA OPERASIONAL======== \r\n"); 
		}
		
	}
	
	function get_data_history($rowvehicle,$sdate,$edate,$dbhistory)
	{
		
		//PORT Only
		if (isset($rowvehicle->vehicle_info))
		{
					$json = json_decode($rowvehicle->vehicle_info);
					if (isset($json->vehicle_ip) && isset($json->vehicle_port))
					{
						$databases = $this->config->item('databases');
						if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
						{
							$database = $databases[$json->vehicle_ip][$json->vehicle_port];
							$table = $this->config->item("external_gpstable");
							$tableinfo = $this->config->item("external_gpsinfotable");
							$this->dbhist = $this->load->database($database, TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}
						else
						{
							$table = $this->gpsmodel->getGPSTable($rowvehicle->vehicle_type);
							$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle->vehicle_type);
							$this->dbhist = $this->load->database("default", TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}

						$vehicle_device = explode("@", $rowvehicle->vehicle_device);
						$vehicle_no = $rowvehicle->vehicle_no;
						$vehicle_dev = $rowvehicle->vehicle_device;
						$vehicle_name = $rowvehicle->vehicle_name;
						$vehicle_type = $rowvehicle->vehicle_type;

						if ($rowvehicle->vehicle_type == "T5" || $rowvehicle->vehicle_type == "T5 PULSE")
						{
							$tablehist = $vehicle_device[0]."@t5_gps";
							$tablehistinfo = $vehicle_device[0]."@t5_info";
						}
						else
						{
							$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
							$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
						}
						

							$this->dbhist->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_speed");
							$this->dbhist->where("gps_name", $vehicle_device[0]);
							$this->dbhist->where("gps_speed >", 0);
							$this->dbhist->where("gps_time >=", $sdate);
							$this->dbhist->where("gps_time <=", $edate);
							$this->dbhist->order_by("gps_time","asc");
							$this->dbhist->group_by("gps_time");
							$this->dbhist->from($table);
							$q = $this->dbhist->get();
							$rows1 = $q->result();


							$this->dbhist2->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_speed");
							$this->dbhist2->where("gps_name", $vehicle_device[0]);
							$this->dbhist2->where("gps_speed >", 0);
							$this->dbhist2->where("gps_time >=", $sdate);
							$this->dbhist2->where("gps_time <=", $edate);
							$this->dbhist2->order_by("gps_time","asc");
							$this->dbhist2->group_by("gps_time");
							$this->dbhist2->from($tablehist);
							$q2 = $this->dbhist2->get();
							$rows2 = $q2->result();

							$rows = array_merge($rows1, $rows2); //limit data rows = 3000
							$trows = count($rows);
						
							$total_history = $trows;
							$data = $this->array_sort($rows, 'gps_time', SORT_ASC);
							
							if($total_history == 0){
								$status = "IDLE";
								$totaldata = $total_history;
								$totalkm = 0;
							}else{
								$milleage = 0;
								$cumm_milleage = 0;
								for($i=0; $i < $total_history; $i++)
								{	
									$last_data = $total_history-1;
									if($i < $last_data){
										
										$lat1 = $rows[$i]->gps_latitude_real;
										$lat2 = $rows[$i+1]->gps_latitude_real;
										
										$long1 =  $rows[$i]->gps_longitude_real;
										$long2 = $rows[$i+1]->gps_longitude_real;
										$milleage = round($this->getDistance($lat1, $long1, $lat2, $long2),2);
										$cumm_milleage = ($cumm_milleage + $milleage);
									}
										
								}
								
								$status = "MOVE";
								$totaldata = $total_history;
								$totalkm = $cumm_milleage;
								
							}
							
							return $status."|".$totaldata."|".$totalkm;
							
					}

				}
	}
	
	function get_data_history_direction($rowvehicle,$sdate,$edate,$status,$dbhistory)
	{
		printf("TRIP STATUS : %s \r\n", $status);
		//PORT Only
		if (isset($rowvehicle->vehicle_info))
		{
					$json = json_decode($rowvehicle->vehicle_info);
					if (isset($json->vehicle_ip) && isset($json->vehicle_port))
					{
						$databases = $this->config->item('databases');
						if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
						{
							$database = $databases[$json->vehicle_ip][$json->vehicle_port];
							$table = $this->config->item("external_gpstable");
							$tableinfo = $this->config->item("external_gpsinfotable");
							$this->dbhist = $this->load->database($database, TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}
						else
						{
							$table = $this->gpsmodel->getGPSTable($rowvehicle->vehicle_type);
							$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle->vehicle_type);
							$this->dbhist = $this->load->database("default", TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}

						$vehicle_device = explode("@", $rowvehicle->vehicle_device);
						$vehicle_no = $rowvehicle->vehicle_no;
						$vehicle_dev = $rowvehicle->vehicle_device;
						$vehicle_name = $rowvehicle->vehicle_name;
						$vehicle_type = $rowvehicle->vehicle_type;

						if ($rowvehicle->vehicle_type == "T5" || $rowvehicle->vehicle_type == "T5 PULSE")
						{
							$tablehist = $vehicle_device[0]."@t5_gps";
							$tablehistinfo = $vehicle_device[0]."@t5_info";
						}
						else
						{
							$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
							$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
						}
						

							$this->dbhist->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_course");
							$this->dbhist->where("gps_name", $vehicle_device[0]);
							if($status == "MOVE"){
								$this->dbhist->where("gps_speed >", 0);
							}
							$this->dbhist->where("gps_time >=", $sdate);
							$this->dbhist->where("gps_time <=", $edate);
							$this->dbhist->order_by("gps_time","asc");
							$this->dbhist->group_by("gps_time");
							$this->dbhist->from($table);
							$q = $this->dbhist->get();
							$rows1 = $q->result();


							$this->dbhist2->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_course");
							$this->dbhist2->where("gps_name", $vehicle_device[0]);
							if($status == "MOVE"){
								$this->dbhist2->where("gps_speed >", 0);
							}
							$this->dbhist2->where("gps_time >=", $sdate);
							$this->dbhist2->where("gps_time <=", $edate);
							$this->dbhist2->order_by("gps_time","asc");
							$this->dbhist2->group_by("gps_time");
							$this->dbhist2->from($tablehist);
							$q2 = $this->dbhist2->get();
							$rows2 = $q2->result();

							$rows = array_merge($rows1, $rows2); //limit data rows = 3000
							$trows = count($rows);
						
							$total_history = $trows;
							$data = $this->array_sort($rows, 'gps_time', SORT_ASC);
							$feature = array();
							
							$totalkosongan = 0;
							$totalmuatan = 0;
							$totalother = 0;
								
							if($total_history == 0){
								$jalur_gps = "-";
								$totaldata = $total_history;
								$feature["kosongan"] = $totalkosongan;
								$feature["muatan"] = $totalmuatan;
								$feature["other"] = $totalother;
							}else{
								
								for($i=0; $i < $total_history; $i++)
								{	
									$jalur_gps = $this->get_jalurname_new($rows[$i]->gps_course);
									
									if($jalur_gps == "kosongan"){
										$totalkosongan += 1;
									}
									else if($jalur_gps == "muatan"){
										$totalmuatan += 1;
									}
									else{
										$totalother += 1;
									}
									$feature["kosongan"] = $totalkosongan;
									$feature["muatan"] = $totalmuatan;
									$feature["other"] = $totalother;
								}
								
							}
							$response = json_encode($feature);
							
							return $response;
					}
		}
	}
	
	function get_data_history_speed($rowvehicle,$sdate,$edate,$dbhistory)
	{
		//PORT Only
		if (isset($rowvehicle->vehicle_info))
		{
					$json = json_decode($rowvehicle->vehicle_info);
					if (isset($json->vehicle_ip) && isset($json->vehicle_port))
					{
						$databases = $this->config->item('databases');
						if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
						{
							$database = $databases[$json->vehicle_ip][$json->vehicle_port];
							$table = $this->config->item("external_gpstable");
							$tableinfo = $this->config->item("external_gpsinfotable");
							$this->dbhist = $this->load->database($database, TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}
						else
						{
							$table = $this->gpsmodel->getGPSTable($rowvehicle->vehicle_type);
							$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle->vehicle_type);
							$this->dbhist = $this->load->database("default", TRUE);
							$this->dbhist2 = $this->load->database($dbhistory,true);
						}

						$vehicle_device = explode("@", $rowvehicle->vehicle_device);
						$vehicle_no = $rowvehicle->vehicle_no;
						$vehicle_dev = $rowvehicle->vehicle_device;
						$vehicle_name = $rowvehicle->vehicle_name;
						$vehicle_type = $rowvehicle->vehicle_type;

						if ($rowvehicle->vehicle_type == "T5" || $rowvehicle->vehicle_type == "T5 PULSE")
						{
							$tablehist = $vehicle_device[0]."@t5_gps";
							$tablehistinfo = $vehicle_device[0]."@t5_info";
						}
						else
						{
							$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
							$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
						}
						

							$this->dbhist->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_course");
							$this->dbhist->where("gps_name", $vehicle_device[0]);
							$this->dbhist->where("gps_speed >", 0);
							$this->dbhist->where("gps_time >=", $sdate);
							$this->dbhist->where("gps_time <=", $edate);
							$this->dbhist->order_by("gps_time","asc");
							$this->dbhist->group_by("gps_time");
							$this->dbhist->from($table);
							$q = $this->dbhist->get();
							$rows1 = $q->result();


							$this->dbhist2->select("gps_id,gps_name,gps_host,gps_speed,gps_status,gps_latitude_real,gps_longitude_real,gps_time,
												   gps_longitude,gps_latitude,gps_ew,gps_ns,gps_course");
							$this->dbhist2->where("gps_name", $vehicle_device[0]);
							$this->dbhist2->where("gps_speed >", 0);
							$this->dbhist2->where("gps_time >=", $sdate);
							$this->dbhist2->where("gps_time <=", $edate);
							$this->dbhist2->order_by("gps_time","asc");
							$this->dbhist2->group_by("gps_time");
							$this->dbhist2->from($tablehist);
							$q2 = $this->dbhist2->get();
							$rows2 = $q2->result();

							$rows = array_merge($rows1, $rows2); //limit data rows = 3000
							$trows = count($rows);
						
							$total_history = $trows;
							$data = $this->array_sort($rows, 'gps_time', SORT_ASC);
							$feature = array();
							
							$totallow = 0;
							$totalhigh = 0;
							$totalother = 0;
						
							if($total_history == 0){
								$jalur_gps = "-";
								$totaldata = $total_history;
								$feature["low"] = $totallow;
								$feature["high"] = $totalhigh;
								$feature["other"] = $totalother;
								
							
							}else{
								
								for($i=0; $i < $total_history; $i++)
								{	
									if($rows[$i]->gps_speed <= 10.8){ // (20 kph / 1.852) 
										$totallow += 1;
									}
									else if($rows[$i]->gps_speed >= 10.9){
										$totalhigh += 1;
									}
									else{
										$totalother += 1;
									}
									$feature["low"] = $totallow;
									$feature["high"] = $totalhigh;
									$feature["other"] = $totalother;
								}
								
							}
							$response = json_encode($feature);
							
							return $response;
					}
		}
	}
	
	function get_data_speed_avg($deviceid,$sdate,$edate,$dbtable_source)
	{
						// select by report location
						$this->dbtrans = $this->load->database("tensor_report",true);
						$this->dbtrans->where("location_report_vehicle_device", $deviceid);
                        $this->dbtrans->where("location_report_gps_time >=", $sdate);
                        $this->dbtrans->where("location_report_gps_time <=", $edate);
						$this->dbtrans->where("location_report_gpsstatus", "OK");
						$this->dbtrans->where("location_report_location <>", "POOL TMS");
						$this->dbtrans->where("location_report_jalur <>", "");
						$this->dbtrans->like("location_report_location", "KM");						
                        $this->dbtrans->order_by("location_report_gps_time","asc");
						$this->dbtrans->group_by("location_report_gps_time");
					    $this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						$trows = count($rows);
						
							////=====================CHECK SPEED AVG=====================///
							$total_history = $trows;
							$feature_spd = array();
							
							$totallow = 0;
							$totalhigh = 0;
							$totalother = 0;
							$totalspeed = 0;
							if($total_history == 0){
								$totaldata = $total_history;
								$feature_spd["low"] = $totallow;
								$feature_spd["high"] = $totalhigh;
								$feature_spd["other"] = $totalother;
								$trip_mileage_speed_status = "";
								$speed_avg = "";
								
							}else{
								
								for($i=0; $i < $total_history; $i++)
								{	
									if($rows[$i]->location_report_speed <= 19){
										$totallow += 1;
									}
									else if($rows[$i]->location_report_speed >= 20){
										$totalhigh += 1;
									}
									else{
										$totalother += 1;
									}
									
									$totalspeed = $totalspeed + $rows[$i]->location_report_speed;
									$feature_spd["low"] = $totallow;
									$feature_spd["high"] = $totalhigh;
									$feature_spd["other"] = $totalother;
								}
								
								$speed_avg = $totalspeed/$total_history;
								if($speed_avg > 20){
									$trip_mileage_speed_status = "high";
								}else{
									$trip_mileage_speed_status = "low";
								}					
							}
							$response_spd = json_encode($feature_spd);
							
							return $trip_mileage_speed_status."|".$speed_avg."|".$response_spd;
					
		
	}
	
	function get_data_before($vehicle_dev,$sdate,$edate,$dbtable,$limit_find)
	{
		printf("PERIODE : %s \r\n", $sdate, $edate);
		$filterdata = array("2","3");
		$limitsec = 4*60; //4menit
		// select by report location
		$this->dbtrans = $this->load->database("tensor_report",true);
		//$this->dbtrans->select("trip_mileage_start_time,trip_mileage_end_time,trip_mileage_engine,trip_mileage_vehicle_no,trip_mileage_duration_sec");
		$this->dbtrans->where("trip_mileage_start_time <", $sdate);
		$this->dbtrans->where("trip_mileage_vehicle_id", $vehicle_dev);
		$this->dbtrans->where("trip_mileage_duration_sec >", $limitsec);
        $this->dbtrans->where_in("trip_mileage_engine", $filterdata);
		$this->dbtrans->limit($limit_find);
		$this->dbtrans->order_by("trip_mileage_start_time","desc");
		$this->dbtrans->from($dbtable);
        $qbefore = $this->dbtrans->get();
        $rows_before = $qbefore->result();
		$trows_before = count($rows_before);
		
		//printf("TOTAL DATA BEFORE : %s \r\n", $trows_before);
		if($trows_before > 0){
			return $rows_before[0];
		}else{
			return "xx";
		}
		
					
		
	}
	
	//operational by geofence
	function operational_bygeofence($userid="", $orderby="", $startdate = "", $enddate = "")
    {
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT DATA OPERASIONAL KHUSUS PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        //$domain_server = "http://202.129.190.194/";
		$report = "operasional_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
        $z =0;
		//print_r($sdate." ".$edate);exit();
		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_no_engine'));
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_others'));
		$this->db->where("vehicle_device","69969039493099@TK510");
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        $limitdata_gps = 100*1000;
		printf("LIMIT DATA GPS : %s \r\n",$limitdata_gps);
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++)
        {
            printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_device, $rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            //PORT Only
            if (isset($rowvehicle[$x]->vehicle_info))
            {
                $json = json_decode($rowvehicle[$x]->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle[$x]->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle[$x]->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					
					$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
                    $vehicle_no = $rowvehicle[$x]->vehicle_no;
					$vehicle_dev = $rowvehicle[$x]->vehicle_device;
					$vehicle_name = $rowvehicle[$x]->vehicle_name;
					$vehicle_type = $rowvehicle[$x]->vehicle_type;
						
					if ($rowvehicle[$x]->vehicle_type == "T5" || $rowvehicle[$x]->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
					
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dbhist->join($tableinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");    
                        $this->dbhist->where("gps_info_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbhist->where("gps_time >=", $sdate);
                        $this->dbhist->where("gps_time <=", $edate);    
                        $this->dbhist->order_by("gps_time","asc");
						$this->dbhist->group_by("gps_time");
						$this->dbhist->limit($limitdata_gps);
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
                  
		
						$this->dbhist2->join($tablehistinfo, "gps_info_time = gps_time AND gps_info_device = CONCAT(gps_name,'@',gps_host)");    
                        $this->dbhist2->where("gps_info_device", $rowvehicle[$x]->vehicle_device);
                        $this->dbhist2->where("gps_time >=", $sdate);
                        $this->dbhist2->where("gps_time <=", $edate);    
                        $this->dbhist2->order_by("gps_time","asc");
						$this->dbhist2->group_by("gps_time");
						$this->dbhist2->limit($limitdata_gps);
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						
						$rows = array_merge($rows1, $rows2); //limit data rows = 10000
                
                        $data = array();
                        $nopol = "";
                        $on = false;
                        $trows = count($rows);
        
                        printf("TOTAL DATA : %s \r\n",$trows);
					if($trows < $limitdata_gps){
						
						////-------------KONDISI ON-------------////
						if ($trows > 0){
						for($i=0;$i<$trows;$i++)
                        {
                            //if($rows[$i]->gps_speed == 0) continue;
                            if($nopol != $rowvehicle[$x]->vehicle_no)
                            { //new vehicle
                                if($on && $i!=0)
                                { 
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] =  $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i-1]->gps_longitude_real, $rows[$i-1]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i-1]->gps_info_distance;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
		
									
                                }
								
								$geofence_data = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
								//print_r($geofence_data);exit();
                                //if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
								if($geofence_data != "0")
								{                                
                                    $trip_no = 1;                    
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                    $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
									$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
									
                                    $on = true;
                            
                                    if($i==$trows-1)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                }
                                else
                                {
                                    $trip_no = 1;
                                    $on = false;
                                }
                            }
                            else
                            { //same vehicle //hanya data on
								$geofence_data = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                //if(substr($rows[$i]->gps_info_io_port, 4, 1) == 1)
								if($geofence_data != "0")
                                {
									
                                    if(!$on)
                                    {    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no++]['start_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_mileage'] = $rows[$i]->gps_info_distance;
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['vehicle_name'] = $rowvehicle[$x]->vehicle_name;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['engine'] = substr($rows[$i]->gps_info_io_port, 4, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['start_longitude'] = $rows[$i]->gps_longitude_real;
										
                                    }
                                    $on = true;    
                                    if($i==$trows-1 && $on)
                                    {                                                
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        //$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location($rows[$i]->gps_longitude, $rows[$i]->gps_ew, $rows[$i]->gps_latitude, $rows[$i]->gps_ns, $rowvehicle[$x]->vehicle_user_id);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }                                    
                                }
								//edit off
                                else
                                {            
                                    if($on)
                                    {
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_time'] = date("d-m-Y H:i:s", strtotime("+7 hour", strtotime($rows[$i]->gps_time)));    
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_position'] = $this->getPosition_other($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_geofence_location'] = $this->getGeofence_location_live_report($rows[$i]->gps_longitude_real, $rows[$i]->gps_latitude_real, $rowvehicle[$x]->vehicle_dbname_live);
                                        $data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_mileage'] = $rows[$i]->gps_info_distance;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_coordinate'] = $rows[$i]->gps_latitude_real.",".$rows[$i]->gps_longitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_door'] = substr($rows[$i]->gps_msg_ori, 79, 1);
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_latitude'] = $rows[$i]->gps_latitude_real;
										$data[$rowvehicle[$x]->vehicle_no][$trip_no-1]['end_longitude'] = $rows[$i]->gps_longitude_real;
                                    }
                                    $on = false;
                                }
                            }
                            $nopol = $rowvehicle[$x]->vehicle_no;
                        }
                        
                        //Write Data On
                        $i=1;
                        $new = "";
                        printf("WRITE DATA ON : ");
                        foreach($data as $vehicle_no=>$val)
                        {
                            if($new != $vehicle_no)
                            {
                                $cumm = 0;
                                $trip_no = 1;
                            }
							
                            foreach($val as $no=>$report)
                            {
                                $mileage = $report['end_mileage']- $report['start_mileage'];
                               // if($mileage != 0) // edit 0 km engine ON
                               // {
                                    $duration = get_time_difference($report['start_time'], $report['end_time']);
									
									$start_1 = dbmaketime($report['start_time']);
									$end_1 = dbmaketime($report['end_time']);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
                                    $tm = round(($mileage/1000),2);
                                    $cumm += $tm;
                                    printf("|%s|",$i);
									
									$notrip = $trip_no++;
								 
                                    //mileage
                                    $xme = $tm;
                                    $xxme = explode(".",$xme);
                                    if (isset($xxme[1]))
                                    {
                                        $xsub = substr($xxme[1],0,2); 
                                        $x_mile = $xxme[0].".".$xsub;     
                                    }
                                    else
                                    {
                                        $x_mile = $xxme[0];
                                    }
                            
                                    //cummulative
                                    $xcum = $cumm;
                                    $xxcum = explode(".",$xcum);
                                    if (isset($xxcum[1]))
                                    {
                                        $xcumsub = substr($xxcum[1],0,2); 
                                        $x_cum = $xxcum[0].".".$xcumsub;     
                                    }
                                    else
                                    {
                                        $x_cum = $xxcum[0];
                                    }
								
										$geofence_start = $report['start_geofence_location'];
										$geofence_end = $report['end_geofence_location'];
										$geofence_start_type = $this->get_geofence_type($geofence_start,$rowvehicle[$x]->vehicle_dbname_live);
										$geofence_end_type = $this->get_geofence_type($geofence_end,$rowvehicle[$x]->vehicle_dbname_live);
										
										if($geofence_start_type == false){
											$geofence_start_type_name = "0";
										}else{
											$geofence_start_type_name = $geofence_start_type;
										}
										
										if($geofence_end_type == false){
											$geofence_end_type_name = "0";
										}else{
											$geofence_end_type_name = $geofence_end_type;
										}
										
										if($geofence_start == "0"){
											$geofence_start_type_name = "0";
										}
										
										if($geofence_end == "0"){
											$geofence_end_type_name = "0";
										}
							
									
								if(isset($report['vehicle_name'])){
									
										$ex_position_start = explode(",",$report['start_position']->display_name);
										$ex_position_end = explode(",",$report['end_position']->display_name);
										
										unset($datainsert);
										$datainsert["trip_mileage_vehicle_id"] = $vehicle_dev;
										$datainsert["trip_mileage_vehicle_no"] = $vehicle_no;
										$datainsert["trip_mileage_vehicle_name"] = $vehicle_name;
										$datainsert["trip_mileage_vehicle_type"] = $vehicle_type;
										$datainsert["trip_mileage_trip_no"] = $notrip;
										$datainsert["trip_mileage_engine"] = $report['engine'];
										$datainsert["trip_mileage_start_time"] = date("Y-m-d H:i:s", strtotime($report['start_time']));
										$datainsert["trip_mileage_end_time"] = date("Y-m-d H:i:s", strtotime($report['end_time']));
										$datainsert["trip_mileage_duration"] = $show;
										$datainsert["trip_mileage_duration_sec"] = $duration_sec;
										$datainsert["trip_mileage_trip_mileage"] = $x_mile;
										$datainsert["trip_mileage_cummulative_mileage"] = $x_cum;
										$datainsert["trip_mileage_location_start"] = $ex_position_start[0];
										$datainsert["trip_mileage_location_end"] = $ex_position_end[0];
										$datainsert["trip_mileage_geofence_start"] = $geofence_start;
										$datainsert["trip_mileage_geofence_start_type"] = $geofence_start_type_name;
										$datainsert["trip_mileage_geofence_end"] = $geofence_end;
										$datainsert["trip_mileage_geofence_end_type"] = $geofence_end_type_name;
										$datainsert["trip_mileage_coordinate_start"] = $report['start_coordinate'];
										$datainsert["trip_mileage_coordinate_end"] = $report['end_coordinate'];
										$datainsert["trip_mileage_door_start"] = $report['start_door'];
										$datainsert["trip_mileage_door_end"] = $report['end_door'];
										$datainsert["trip_mileage_lat"] = $report['start_latitude'];
										$datainsert["trip_mileage_lng"] = $report['start_longitude'];
										$datainsert["trip_mileage_totaldata"] = $trows;
										
									if($duration_sec > 0 ){
										$this->dbtrip = $this->load->database("tensor_report",TRUE);
										$this->dbtrip->insert($dbtable,$datainsert);
										
										printf("OK");
									}
									
								}

                                    $i++;
								//}
                            }
                        }
						
                        unset($data);
            
                        printf("FINISH FOR VEHICLE ON : %s \r\n",$rowvehicle[$x]->vehicle_device);
                        printf("============================================ \r\n");
						}
						
						
						
					}else{
						printf("TO MANY : %s \r\n", $trows);
						printf("LIMIT %s DATA SKIP VEHICLE : %s \r\n",$limitdata_gps, $rowvehicle[$x]->vehicle_no);
					}
						
						printf("PREPARE INSERT TO DB TRANSPORTER \r\n");
                        $data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
						$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
                        $data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
                        $data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
                        $data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
                        $data_insert["autoreport_data_startdate"] = $startdate;
                        $data_insert["autoreport_data_enddate"] = $enddate;
                        $data_insert["autoreport_type"] = $report_type;
                        $data_insert["autoreport_process_date"] = $process_date;
                        $data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
						if ($trows > 0 && $trows < $limitdata_gps){
							//$this->dbtrans->insert("autoreport_new",$data_insert);
							printf("INSERT CONFIG OK \r\n");
						}else{
							printf("SKIP DATA : %s \r\n", $trows);
						}
            
                        printf("DELETE CACHE HISTORY \r\n");
                        $this->dbhist->cache_delete_all();
                        $this->dbtrans->cache_delete_all();
                        unset($data);
                       
                        printf("============================================ \r\n");

                    }
                }
                else
                {
                    printf("SKIP VEHICLE ( NO VEHICLE PORT ) \r\n");
                    printf("-------------------------------------- \r\n");    
                }    
            }
            else
            {
                printf("SKIP VEHICLE ( NO VEHICLE INFO ) \r\n");
                printf("-------------------------------- \r\n");
            }
        }
        
		$finish_time = date("Y-m-d H:i:s");
        printf("AUTOREPORT DATA OPERASIONAL DONE %s\r\n",$finish_time);
	
	if($total_process != 0){
		
		//Send Email
		$cron_name = $cron_username." - "."OPERATIONAL REPORT";
		$this->dbtrip = $this->load->database("tensor_report",TRUE);
        $this->dbtrip->select("trip_mileage_id");
        $this->dbtrip->where("trip_mileage_start_time >=",$startdate);
        $this->dbtrip->where("trip_mileage_end_time <=",$enddate);
        $qtrip = $this->dbtrip->get($dbtable);
        $rtrip = $qtrip->result();
		$total_data = count($rtrip);
		
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
        $this->db->select("company_id,company_telegram_cron");
        $this->db->where("company_id",$company_username);
        $qcompany = $this->db->get("company");
        $rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_cron;
		}else{
			$telegram_group = 0;
		}
		
		$message =  urlencode(
					"".$cron_name." \n".
					"Periode: ".$startdate." to ".$enddate." \n".
					"Total Data: ".$total_data." \n".
					"Start: ".$startproses." \n".
					"Finish: ".$finish_time." \n"
					);
					
		//$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		unset($mail);
		$mail['subject'] =  $cron_name.": ".$startdate." to ".$enddate;
		$mail['message'] = 
"
Cron Report Status :

Cron Name : ".$cron_name." : ".$startdate." to ".$enddate."
Start Cron : ".$start_time."
End Cron   : ".$finish_time."
Total Data : ".$total_data."
End Data   : "."( ".$z." / ".$total_process." )"."
Status     : Finish

Thanks

";
		$mail['dest'] = "budiyanto@lacak-mobil.com,alfa@lacak-mobil.com,robi@lacak-mobil.com";
		$mail['bcc'] = "report.lacakmobil@yahoo.com";
		$mail['sender'] = "cron@lacak-mobil.com";
		//lacakmobilmail($mail);
		
		$this->dbtrip->close();
		$this->dbtrip->cache_delete_all();
	}
			
		printf("Send Email OK");
        
    }
	
	function geofencereport($userid="", $orderby="", $startdate = "", $enddate = "")
	{ 
		ini_set('memory_limit', '3G');
        printf("PROSES GEOFENCE ALERT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "operasional";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
        $report = "operasional_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate)));
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));
        $z =0;
		print_r($sdate." ".$edate);exit();

		$this->db->order_by("vehicle_id", $orderby);
		if ($name != "" && $host != "")
        {
            $dev = $name."@".$host;
            $this->db->where("vehicle_device", $dev);    
        } 
        
		if ($userid != "")
		{
			$this->db->where("user_id",$userid);
		}
       
        $this->db->join("user", "vehicle_user_id = user_id", "left outer");
        
		if ($userid == "")
		{
			$this->db->where("user_company >",0);
		}
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_no_engine'));
		$this->db->where_not_in("vehicle_type", $this->config->item('vehicle_others'));
		
        $q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
		
		$i = 0;
		foreach($rows as $row)
		{			
			
			
			printf("\r\n\r\n[%s] %02d %s %s\r\n", date("Y-m-d H:i:s"), $i, $row->vehicle_device, $row->vehicle_no);

			$this->dogeofencealert($row);
			$i++;
		}

		print("===END GEOFENCE ALERT:".$sdate." - ".$edate."\r\n");
		
	}
	
	function dogeofencealert($vehicle)
	{
		// ambil user yg setting geofence
			
		$devices = explode("@", $vehicle->vehicle_device);
		if (count($devices) < 2) 
		{
			printf("----- Invalid device\r\n");
			return;
		}
			
		// ambil data terakhir alert geofence
			
		$this->db->limit(1);
		$this->db->order_by("geofence_lastchecked", "desc");		
		$this->db->where("geoalert_vehicle", $vehicle->vehicle_device);
		$q = $this->db->get("geofence_alert");
		if ($q->num_rows() == 0)
		{
			$lastdir = -1;
			$lastchecked = mktime()-7*3600;
			$lastgeofence = -1;
		}
		else
		{
			$row = $q->row();				
			$lastdir = $row->geoalert_direction;
			$lastchecked = dbmaketime($row->geofence_lastchecked);
			$geoalert_id = $row->geoalert_id;
			$lastgeofence = $row->geoalert_geofence;
			
			if ($lastchecked < (mktime()-2*24*3600-7*3600))
			{
				$lastchecked = mktime()-2*24*3600-7*3600;
			}
		}
		
		$me = date("Y-m-d H:i:s", $lastchecked-7*3600);
		printf("Lastchecked : %s\r\n",$me);
		// ambil data gps
		$json = json_decode($vehicle->vehicle_info);
		if ($vehicle->vehicle_info)
		{
			
			if (isset($json->vehicle_ip) && isset($json->vehicle_port))
			{
				$databases = $this->config->item('databases');
			
				if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
				{
					$database = $databases[$json->vehicle_ip][$json->vehicle_port];
					echo "database: ".$database."\n";
					$tablegps = $this->config->item("external_gpstable");					
					$tablegpshist = $this->config->item("external_gpstable_history");
										
					$this->db = $this->load->database($database, TRUE);
				}
			}

			//Jika WebSocket
			if (isset($json->vehicle_ws)) 
			{	
				$database = "gpshistory2";
				$tablegps = strtolower($devices[0]."@".$devices[1]."_gps");
				$tablegpshist = strtolower($devices[0]."@".$devices[1]."_info");
				$this->db = $this->load->database($database, TRUE);	
			}
		}			

		if (! isset($tablegps))
		{		
			$table_hist = $this->config->item("table_hist");	
						
			$tablegps = $this->gpsmodel->getGPSTable($vehicle->vehicle_type);
			$tablegpshist = $table_hist[strtoupper($vehicle->vehicle_type)];
		}
		
		if (! $tablegps) 
		{
			printf("----- tabel %s tidak ada\r\n", $tablegps);
			$this->db->cache_delete_all();
			return;
		}
		
		$getgpsstart = mktime();			
		$tyesterday = mktime(-7, 59, 59, date('n', $getgpsstart), date('j', $getgpsstart), date('Y', $getgpsstart));		
		
		if ($lastchecked < $tyesterday && (!isset($json->vehicle_ws)))
		{
			printf("----- check to history\n");
			
			$sql = sprintf("SELECT * FROM (SELECT * FROM %s%s WHERE (gps_name = '%s') AND (gps_host = '%s') AND (gps_time > '%s') UNION SELECT * FROM %s%s WHERE (gps_name = '%s') AND (gps_host = '%s') AND (gps_time > '%s'))  tbl1 ORDER BY gps_time ASC "
				, $this->db->dbprefix
				, $tablegps
				, $devices[0]
				, $devices[1]
				, date("Y-m-d H:i:s", $lastchecked-7*3600)
				, $this->db->dbprefix
				, $tablegpshist
				, $devices[0]
				, $devices[1]
				, date("Y-m-d H:i:s", $lastchecked-7*3600)

			);
			$q = $this->db->query($sql);
		}
		elseif($lastchecked < $tyesterday && (isset($json->vehicle_ws)))
		{
			printf("----- Websocket vehicle check to history\n");
			
			$this->db = $this->load->database("gpshistory",true);
			$this->db->order_by("gps_time", "asc");					
			$this->db->where("gps_time >", date("Y-m-d H:i:s", $lastchecked-7*3600));
			$this->db->where("gps_name", $devices[0]);
			$this->db->where("gps_host", $devices[1]);
			$q = $this->db->get($tablegps);	
		}
		else
		{	
			if (!isset($json->vehicle_ws))
			{
				printf("----- check to current\n");
				$this->db->order_by("gps_time", "asc");					
				$this->db->where("gps_time >", date("Y-m-d H:i:s", $lastchecked-7*3600));
				$this->db->where("gps_name", $devices[0]);
				$this->db->where("gps_host", $devices[1]);
				$q = $this->db->get($tablegps);			
			}
			else
			{
				printf("----- Ambil Dari Database TMP Socket \n");
				$this->db2 = $this->load->database("gpshistory2",true);
				$this->db2->where("gps_time >", date("Y-m-d H:i:s", $lastchecked-7*3600));
				$this->db2->where("gps_name", $devices[0]);
				$this->db2->where("gps_host", $devices[1]);
				$q = $this->db2->get($tablegps);			
			}
		}
		
		if ($q->num_rows() == 0 && (isset($json->vehicle_ws)))
		{
			printf("----- Ambil Dari Database TMP Socket \n");
			$this->db2 = $this->load->database("gpshistory2",true);
			$this->db2->where("gps_time >", date("Y-m-d H:i:s", $lastchecked-7*3600));
			$this->db2->where("gps_name", $devices[0]);
			$this->db2->where("gps_host", $devices[1]);
			$q = $this->db2->get($tablegps);			
		}
			
		if ($q->num_rows() == 0) 
		{
			$this->db = $this->load->database("master", TRUE);
			
			printf("----- tidak ada sejak %s\r\n", date("d/m/Y H:i:s", $lastchecked));
			return;
		}
			
		$rowgps = $q->result();
		
		$this->db = $this->load->database("master", TRUE);
		
		printf("----- lama ambil data gps (%d): %d second\r\n", count($rowgps), mktime()-$getgpsstart);
			
		$checkarea = mktime();	
		$found = false;		
		
		for($i=0; $i < count($rowgps); $i++)
		{	
	
			if (in_array(strtoupper($vehicle->vehicle_type), $this->config->item("vehicle_others"))){
				$lat = $rowgps[$i]->gps_latitude_real;
				$lng = $rowgps[$i]->gps_longitude_real;
			}else{
				$lat = getLatitude($rowgps[$i]->gps_latitude, $rowgps[$i]->gps_ns);
				$lng = getLongitude($rowgps[$i]->gps_longitude, $rowgps[$i]->gps_ew);
			}
			
			$gps = $rowgps[$i];
			$gps->lat = $lat;
			$gps->lng = $lng;
				
			$sql = sprintf("
					SELECT 	* 
					FROM 	%sgeofence 
					WHERE 	TRUE
							AND CONTAINS(geofence_polygon, GEOMFROMTEXT('POINT(%s %s)')) 
							AND (geofence_user = '%s' )
							AND (geofence_status = 1)
					LIMIT 1 OFFSET 0", $this->db->dbprefix, $lng, $lat, $vehicle->vehicle_user_id);

			$q = $this->db->query($sql);
			
			//Timesheet Report
			//Khusus KUMIS LOGISTICS
			if ($vehicle->vehicle_user_id == "1261")
			{
				printf("----- Proses Vehicle KUMIS LOGISTICS \r\n");
				
				$sqlstreet = sprintf("
					SELECT 	street_name
					FROM 	%sstreet
					WHERE 	TRUE
							AND CONTAINS(street_line, GEOMFROMTEXT('POINT(%s %s)')) 
					LIMIT 1 OFFSET 0", $this->db->dbprefix, $lng, $lat);
				$qstreet = $this->db->query($sqlstreet);
				
				if ($qstreet->num_rows() > 0)
				{
					$rowstreet = $qstreet->row();
					$str_name = $rowstreet->street_name;
					$exs = explode(",",$str_name);
					$tlg = date("Y-m-d");
				
					if (isset($exs[0]))
					{
						//select timesheet
						$this->dbtransporter = $this->load->database("transporter",true);
						$this->dbtransporter->where("timesheet_status","1");
						$this->dbtransporter->where("timesheet_vehicle",$vehicle->vehicle_device);
						$this->dbtransporter->where("timesheet_geo_name",$exs[0]);
						$this->dbtransporter->limit(1);
						$qtime = $this->dbtransporter->get("timesheet");
						$rtimesheet = $qtime->row();
						
						if($qtime->num_rows() == 0)
						{
							printf("----- Timesheet Not In Schedule \r\n");
						}
						else
						{
						
							//Cek Data Terakhir
							$this->dbtransporter->order_by("timeplan_report_id","desc");
							$this->dbtransporter->select("timeplan_report_geo");
							$this->dbtransporter->where("timeplan_report_vehicle_device",$vehicle->vehicle_device);
							$this->dbtransporter->limit(1);
							$qreport = $this->dbtransporter->get("timeplan_report");
							$rreport = $qreport->row();
							
							if(($qtime->num_rows() == 0) || ($rreport->timeplan_report_geo != $exs[0]))
							{
								//Insert To Report
								unset($timesheet_report);						
								$timesheet_report["timeplan_report_vehicle_id"] = $vehicle->vehicle_id;
								$timesheet_report["timeplan_report_vehicle_device"] = $vehicle->vehicle_device;
								$timesheet_report["timeplan_report_company"] = $rtimesheet->timesheet_company;
								$timesheet_report["timeplan_report_route"] = $rtimesheet->timesheet_route;
								$timesheet_report["timeplan_report_geo"] = $rtimesheet->timesheet_geo_name;
								$timesheet_report["timeplan_report_driver"] = $rtimesheet->timesheet_driver;
								$timesheet_report["timeplan_report_timeplan_in"] = $rtimesheet->timesheet_time;
								$timesheet_report["timeplan_report_timeplan_out"] = $rtimesheet->timesheet_time_out;
								$timesheet_report["timeplan_report_time_in"] = date("H:i:s", dbmaketime($rowgps[$i]->gps_time)+7*3600);
								//$timesheet_report["timeplan_report_time_out"] = ;
								$timesheet_report["timeplan_cycle"] = $rtimesheet->timesheet_cycle;
								$timesheet_report["timeplan_report_date"] = date("Y-m-d H:i:s", dbmaketime($rowgps[$i]->gps_time)+7*3600);

								$this->dbtransporter->insert("timeplan_report",$timesheet_report);
								printf("----- Insert Timesheet Report OK* \r\n");
							}
							else
							{
								printf("----- Posisi Masih Sama Dengan Timesheet Sebelumnya \r\n");
							}
						}
						
						$this->dbtransporter->cache_delete_all();
						$this->dbtransporter->close();
					}
				}
			}
			//End Timesheet Report
			//Kumis Logistics
			
			if ($q->num_rows() == 0)
			{
				if ($lastdir == 2) continue;

				$found = true;
				break;
			}
			
			if ($lastdir == 1) continue;
						
			$rowgeo = $q->row();					
			$found = true;
			
			break;
		}
		
		printf("----- lama check area: %d second\r\n", mktime()-$checkarea);
		
		if (! $found) 
		{
			unset($update);
			
			$t = dbmaketime($rowgps[count($rowgps)-1]->gps_time);
			$update['geofence_lastchecked'] = date("Y-m-d H:i:s", $t+7*3600);
			
			$this->db->where("geoalert_id", $geoalert_id);
			$this->db->update("geofence_alert", $update);			
			
			if ($lastdir == 1)
			{				
				printf("----- posisi kendaraan masih didalam area geofence\r\n");
				return;				
			}
			
			printf("----- posisi kendaraan masih di luar area geofence\r\n");
			return;
		}
		
		if ($lastdir != 2)
		{
			$this->db->where("geofence_status", 1);
			$this->db->where("geofence_id", $lastgeofence);
			$q = $this->db->get("geofence");
			
			if ($q->num_rows() > 0)
			{
				$rowgeo = $q->row();
				$t = $rowgps[count($rowgps)-1]->gps_time;
				$this->addgeofencealert($vehicle, 2, $gps, $rowgeo, $t);
			}
			else
			{
				$t = $rowgps[count($rowgps)-1]->gps_time;
				$this->addgeofencealert($vehicle, 2, $gps, FALSE, $t);
			}
			
			return;
		}
		$t = $rowgps[count($rowgps)-1]->gps_time;
		$this->addgeofencealert($vehicle, 1, $gps, $rowgeo, $t);
	}	
	
	function addgeofencealert($vehicle, $direction, $gps, $geofence, $t)
	{
		unset($insert);
			
		$insert['geoalert_vehicle'] = $vehicle->vehicle_device;
		$insert['geoalert_direction'] = $direction;
		$insert['geoalert_time'] = date("Y-m-d H:i:s", dbmaketime($gps->gps_time)+7*3600);
		$insert['geoalert_lat'] = $gps->lat;
		$insert['geoalert_lng'] = $gps->lng;
		$insert['geoalert_geofence'] = ($geofence === FALSE) ? 0 : $geofence->geofence_id;
		$insert['geofence_created'] = date("Y-m-d H:i:s");
		$insert['geofence_lastchecked'] = date("Y-m-d H:i:s", dbmaketime($t)+7*3600);
			
		$this->db->insert("geofence_alert", $insert);		
		
		if ($vehicle->user_alert_geo_email == 2)
		{
			print("----- User Tidak Inginkan Terima Email Alert \r\n");
			return;
		}
		
		$hp = valid_mobiles($vehicle->user_mobile);
		
		if (in_array(strtoupper($vehicle->vehicle_type), $this->config->item("vehicle_others"))){
			$t = dbmaketime($gps->gps_time);
		}else{
			$t = dbmaketime($gps->gps_time)+7*3600;
		}
			
		if ($direction == 2)
		{
			if ($geofence === FALSE)
			{
				$geofence_name = "geofence";				
			}
			else
			{
				$geofence_name = strlen($geofence->geofence_name) ? $geofence->geofence_name : "geofence";
			}
			
			$params['content'] = sprintf($this->config->item("SMS_ALERT_GEOFENCE_OUT"), date("d/m/Y H:i:s", $t), $vehicle->vehicle_no, $geofence_name, $vehicle->user_login, $vehicle->vehicle_no);
			$contentmail = sprintf($this->config->item("MAIL_ALERT_GEOFENCE_OUT"), date("d/m/Y H:i:s", $t), $vehicle->vehicle_no, $geofence_name);
		}
		else
		{
			$geofence_name = strlen($geofence->geofence_name) ? $geofence->geofence_name : "geofence";
			$params['content'] = sprintf($this->config->item("SMS_ALERT_GEOFENCE_IN"), date("d/m/Y H:i:s", $t), $vehicle->vehicle_no, $geofence_name, $vehicle->user_login, $vehicle->vehicle_no);
			$contentmail = sprintf($this->config->item("MAIL_ALERT_GEOFENCE_IN"), date("d/m/Y H:i:s", $t), $vehicle->vehicle_no, $geofence_name);
		}
		
		if(isset($contentmail) && ($contentmail != "")){
			
			//send telegram
			$title_name = "Geofence Alert:"." ".$vehicle->vehicle_no;
			
			//get telegram group by company
			$this->db = $this->load->database("default",TRUE);
			$this->db->select("company_id,company_telegram_geofence");
			$this->db->where("company_id",$vehicle->vehicle_company);
			$qcompany = $this->db->get("company");
			$rcompany = $qcompany->row();
			if(count($rcompany)>0){
				$telegram_group = $rcompany->company_telegram_geofence;
			}else{
				$telegram_group = 0;
			}
			
			$message =  urlencode(
						"".$title_name." \n".
						   $contentmail." \n"
						);
			
			if($telegram_group != 0){
				$sendtelegram = $this->telegram_direct($telegram_group,$message);
				printf("===SENT TELEGRAM OK\r\n");
			}	
			
		}
		
		$emails = get_valid_emails($vehicle->user_mail);
		if (is_array($emails) && count($emails))
		{
			foreach($emails as $email)
			{
				unset($mail);
			
				$mail['subject'] = sprintf("Geofence Alert: %s", $vehicle->vehicle_no);
				$mail['message'] = $contentmail;
				$mail['dest'] = $email; 
				$mail['bcc'] = "owner@adilahsoft.com,report.lacakmobil@gmail.com";
				if ($vehicle->user_agent == 3)
				{
					$mail['sender'] = "support@gpsandalas.com";
				}
				else
				{
					$mail['sender'] = "support@lacak-mobil.com";
				}
			
				printf("----- sending email to %s %s %s\r\n", $mail['dest'], $mail['subject'], $mail['message']);
			
				//lacakmobilmail($mail);
			}
		}

		/*
		if (! isON($vehicle->user_sms_notifikasi, 15))
		{
			print("----- User Disable SMS Notifikasi\r\n");
			return;
		}
		

		if ($hp === FALSE) 
		{
			print("----- Invalid user mobile\r\n");
			return;
		}
		
		if ($vehicle->user_payment_period >= 12)
		{
			print("----- user tahunan tidak diperbolehkan\r\n");
			return;
		}

		$this->db->where("agent_pss", 1);
		$this->db->where("agent_id", $vehicle->user_agent);
		$q = $this->db->get("agent");

		if ($q->num_rows() == 0)
		{
			print("----- agent tidak diijinkan\r\n");
			return;
		}
		
		if ($vehicle->user_alert_geo_sms == 2)
		{
			print("----- User Tidak Inginkan Terima SMS Alert \r\n");
			return;
		}
		
		print("----- SMS DI DISABLE SEMENTARA WAKTU \r\n");
		return;
		
		 
		$params['device'] = "alert";
		$params['dest'] = $hp;	
		$xml = $this->load->view("sms/send", $params, true);
		$this->smsmodel->sendsms($xml);
		*/
		
	}
	
	function geofencealert_release()
	{
		$update['config_value'] = 0;
		
		$this->db->where("config_name", "geofencealertprocessing");
		$this->db->update("config", $update);		
	}
	
	function overspeed_breakdown($userid="",$orderby="",$typereport="",$startdate="",$enddate="")
	{
		$report = "overspeed_";
		$report_location = "location_";
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != ""){
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
		
		if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
            $month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($enddate != ""){
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
			$month = date("F", strtotime($enddate));
			$year = date("Y", strtotime($enddate));
        }
       
		//print_r($startdate." ".$enddate);exit();
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
		
		printf("===STARTING REPORT %s %s \r\n", $startdate, $enddate);
		$this->db = $this->load->database("default",true); 
		$this->db->order_by("vehicle_id",$orderby);
		$this->db->select("vehicle_id,vehicle_device,vehicle_no");
		$this->db->where("vehicle_user_id", $userid);
		//$this->db->where("vehicle_id", 72152395);
		$this->db->from("vehicle");
        $q = $this->db->get();
        $rows = $q->result();
		//print_r($rows);exit();
		
		if(count($rows)>0){
			$total_rows = count($rows);
			printf("===JUMLAH VEHICLE : %s \r\n", $total_rows);
			//exit();
			for($i=0;$i<$total_rows;$i++)
			{
				$nourut = $i+1;
				$vehicleid = $rows[$i]->vehicle_id;
				$deviceid = $rows[$i]->vehicle_device;
				$vehicle_no = $rows[$i]->vehicle_no;
				printf("===PERIODE : %s to %s : %s (%s of %s) \r\n", $startdate, $enddate, $vehicle_no, $nourut, $total_rows);
			
				$update_event_data = $this->getOverspeedEvent_location($vehicleid,$startdate,$enddate,$typereport,$dbtable);
			}
		}else{
			printf("===========TIDAK ADA DATA VEHICLE======== \r\n"); 
		}
		
		printf("===========SELESAI======== \r\n"); 
		
	}
	
	function getOverspeedEvent_location($vehicleid,$sdate,$edate,$reporttype,$dbtable){
	
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->order_by("overspeed_report_gps_time","asc");
		//$this->dbreport->select("overspeed_report_id");
		$this->dbreport->where("overspeed_report_vehicle_id", $vehicleid);
		$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
		$this->dbreport->where("overspeed_report_gps_time <=", $edate);
		$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
		$this->dbreport->where("overspeed_report_geofence_type", "road"); //khusus dijalan
		$this->dbreport->where("overspeed_report_type", $reporttype); //data fix (default) = 0
		$q = $this->dbreport->get($dbtable);
        $rows = $q->result();
		$total = count($rows);
		if($total>0){
			
			$total_event_same_loc = 0;
			$delta = 0;
			$totaldelta = 0;
			for($x=0;$x<$total;$x++)
			{
				$norut = $x+1;
				printf("===DATA OVERSPEED ke %s of %s \r\n", $norut, $total);
				$id_report = $rows[$x]->overspeed_report_id;
				
				if($norut != $total){
					$jalurnext = $rows[$x+1]->overspeed_report_jalur;
					$jalurcurrent = $rows[$x]->overspeed_report_jalur;
					
					//grouping KM stgah
					$ex_locationnext = explode(".",$rows[$x+1]->overspeed_report_location);
					$ex_locationcurrent = explode(".",$rows[$x]->overspeed_report_location);
					
					/* $locationnext = $rows[$x+1]->overspeed_report_location;
					$locationcurrent = $rows[$x]->overspeed_report_location; */
					
					$locationnext = $ex_locationnext[0];
					$locationcurrent = $ex_locationcurrent[0];
					
					$timenext = strtotime($rows[$x+1]->overspeed_report_gps_time);
					$timecurrent = strtotime($rows[$x]->overspeed_report_gps_time);
					
					/* $currentposition = $jalurcurrent.",".$locationcurrent;
					$nextposition = $jalurnext.",".$locationnext; */
					
					$currentposition = $locationcurrent;
					$nextposition = $locationnext;
					
					$delta = $timenext - $timecurrent; //sec
					//$limit_sec = 60*60; // sec to menit
					
					//if(($currentposition == $nextposition) && ($delta < $limit_sec))
					if($currentposition == $nextposition)
					{
						$event_same_loc = "A";
						$total_event_same_loc = $total_event_same_loc + 1;
						$totaldelta = $totaldelta + $delta;
						printf("===LOKASI YG SAMA : %s || %s EVENT : %s \r\n",$currentposition, $nextposition, $event_same_loc);
						$status = 0;
						$status_end = 0;
					}
					else
					{
						//jika BEDA LOKASI, INSERT LOKASI BEFORE 
						$event_same_loc = "B";
						printf("===BEDA LOKASI : %s || %s EVENT : %s \r\n",$currentposition, $nextposition, $event_same_loc);
						$status = 1;
						$status_end = 0;
						
					}
					
				}
				else
				{
					$event_same_loc = "B";
					printf("===END EVENT : %s \r\n",$event_same_loc);
					$status = 1;
					$status_end = 1;
				}
				
				//update
				if($status == 1)
				{
					
					unset($data);
					
					$data["overspeed_report_event_time"] = $totaldelta;
					if($status_end == 1){
						$data["overspeed_report_event_location"] = $nextposition;
					}else{
						$data["overspeed_report_event_location"] = $currentposition;
					}
					
					$data["overspeed_report_event_total"] = $total_event_same_loc+1;
					$data["overspeed_report_event_status"] = 1;
					$this->dbreport->where("overspeed_report_id", $id_report);
					//$this->dbreport->limit(1);	
					$this->dbreport->update($dbtable,$data);
					printf("===UPDATE OK: %s \r\n",$currentposition);
					printf("============== \r\n");
					
					//clear
					$delta = 0;
					$totaldelta = 0;
					$total_event_same_loc = 0;
				}
				else
				{
					
					unset($data);
					
					$data["overspeed_report_event_time"] = "";
					$data["overspeed_report_event_location"] = "";
					$data["overspeed_report_event_total"] = "";
					$data["overspeed_report_event_status"] = 0;
					$this->dbreport->where("overspeed_report_id", $id_report);
					//$this->dbreport->limit(1);	
					$this->dbreport->update($dbtable,$data);
					printf("===CLEAR OK: %s \r\n",$currentposition);
					printf("============== \r\n");
					
				}
			}
		}
		else
		{
			printf("===TIDAK ADA DATA OVERSPEED \r\n"); 
		}
	}
	
	function ritase_board_all($userid="", $orderby="", $typereport="", $startdate="",$enddate=""){
		
		$this->ritase_board_hour($userid,$orderby,$typereport,$startdate,$enddate);
		$this->ritase_board_company($userid,$orderby,$typereport,$startdate,$enddate);
		$this->ritase_board_vehicle($userid,$orderby,$typereport,$startdate,$enddate);
		$this->ritase_board_port($userid,$orderby,$typereport,$startdate,$enddate);
		
	}
	
	function overspeed_board_all($userid="", $orderby="", $typereport="", $startdate="",$enddate=""){
		
		$this->overspeed_breakdown($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_company($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_hour($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_level($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_street($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_vehicle($userid,$orderby,$typereport,$startdate,$enddate);
		$this->overspeed_board_sign($userid,$orderby,$typereport,$startdate,$enddate);
		
	}
	
	//Cam Board
	function cam_board_all($userid="", $orderby="", $typereport="", $startdate="",$enddate=""){
		$this->cam_board_alarm($userid,$orderby,$typereport,$startdate,$enddate);
		$this->cam_board_vehicle($userid,$orderby,$typereport,$startdate,$enddate);
		$this->cam_board_company($userid,$orderby,$typereport,$startdate,$enddate);
		//$this->cam_board_street($userid,$orderby,$typereport,$startdate,$enddate);
	}
	
	//overspeed by vehicle
	function overspeed_board_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "vehicle";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
		
		
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_type", "road"); //khusus dijalan
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["overspeed_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["overspeed_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["overspeed_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["overspeed_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//overspeed by Geofence
	function overspeed_board_geofence($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY GEOFENCE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "geofence";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->dblive = $this->load->database($dblive,true); 
		$this->dblive->select("geofence_id,geofence_name,geofence_speed,geofence_speed_muatan");
		$this->dblive->order_by("geofence_id", "asc");
		$this->dblive->where("geofence_group", $typereport);
		$this->dblive->where("geofence_user", $userid);
		$this->dblive->where("geofence_status", 1);
		$this->dblive->where("geofence_type", "road");
		$q = $this->dblive->get("geofence");
        $rowgeofence = $q->result();
			
        $total_process = count($rowgeofence);
        printf("TOTAL PROSES GEOFENCE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
		
			//kosongan
			for($x=0;$x<count($rowgeofence);$x++){
				printf("==PROCESS KOSONGAN %s %s of %s \r\n",$rowgeofence[$x]->geofence_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_name", $rowgeofence[$x]->geofence_name);
				$this->dbreport->where("overspeed_report_jalur", "kosongan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_geofence"] = $rowgeofence[$x]->geofence_name;
					$datainsert["overspeed_board_jalur"] = "kosongan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_geofence", $rowgeofence[$x]->geofence_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","kosongan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_geofence", $rowgeofence[$x]->geofence_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","kosongan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
			
			//Muatan
			for($x=0;$x<count($rowgeofence);$x++){
				printf("==PROCESS MUATAN %s %s of %s \r\n",$rowgeofence[$x]->geofence_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_name", $rowgeofence[$x]->geofence_name);
				$this->dbreport->where("overspeed_report_jalur", "muatan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_geofence"] = $rowgeofence[$x]->geofence_name;
					$datainsert["overspeed_board_jalur"] = "muatan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_geofence", $rowgeofence[$x]->geofence_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","muatan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_geofence", $rowgeofence[$x]->geofence_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","muatan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		$this->dblive->close();
		$this->dblive->cache_delete_all();
	}
	
	//overspeed by Street
	function overspeed_board_street($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY STREET >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "street";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true); 
		$this->db->select("user_id,user_dblive");
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->db = $this->load->database("default",true); 
		$this->db->group_by("street_name");
		$this->db->select("street_id,street_name");
		$this->db->order_by("street_name", "asc");
		$this->db->where("street_creator", $userid);
		$this->db->where("street_type", 1); //khusus hauling road
		//$this->db->like("street_name", "KM");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
			
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				$ex_street_name = explode(" ",$street_name);
				$street_name_alias = round($ex_street_name[1],0,PHP_ROUND_HALF_UP);
				printf("==PROCESS KOSONGAN %s alias: %s (%s of %s) \r\n",$street_name, $street_name_alias, $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_location", $street_name);
				$this->dbreport->where("overspeed_report_jalur", "kosongan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_street"] = $street_name;
					$datainsert["overspeed_board_street_alias"] = $street_name_alias;
					$datainsert["overspeed_board_jalur"] = "kosongan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_street", $street_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","kosongan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_street", $street_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","kosongan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
			//Muatan
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				$ex_street_name = explode(" ",$street_name);
				$street_name_alias = round($ex_street_name[1],0,PHP_ROUND_HALF_UP);
				printf("==PROCESS MUATAN %s alias: %s (%s of %s) \r\n",$street_name, $street_name_alias, $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_location", $street_name);
				$this->dbreport->where("overspeed_report_jalur", "muatan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_street"] = $street_name;
					$datainsert["overspeed_board_street_alias"] = $street_name_alias;
					$datainsert["overspeed_board_jalur"] = "muatan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_street", $street_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","muatan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_street", $street_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","muatan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	//overspeed by company
	function overspeed_board_company($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY COMPANY >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "company";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		
		$this->db->order_by("company_name", $orderby);
		$this->db->select("company_id,company_name");
		$this->db->where("company_created_by", $userid);
		$this->db->where("company_flag", 0);
		$q = $this->db->get("company");
        $rowcompany = $q->result();
        
        $total_process = count($rowcompany);
        printf("TOTAL PROSES COMPANY : %s \r\n",$total_process); 
        printf("============================================ \r\n");
		
		
			for($x=0;$x<count($rowcompany);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowcompany[$x]->company_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_vehicle_company", $rowcompany[$x]->company_id);
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_type", "road"); //khusus dijalan
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				//exit();
					unset($datainsert);
					/* $datainsert["overspeed_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["overspeed_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["overspeed_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type; */
					$datainsert["overspeed_board_vehicle_company"] = $rowcompany[$x]->company_id;
					$datainsert["overspeed_board_company_name"] = $rowcompany[$x]->company_name;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_vehicle_company", $rowcompany[$x]->company_id);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_vehicle_company", $rowcompany[$x]->company_id);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//overspeed by hour
	function overspeed_board_hour($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY COMPANY >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "hour";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		//get data hour (24 jam)
		$this->db = $this->load->database("webtracking_ts",true); 
		$this->db->order_by("hour_value", $orderby);
		$this->db->select("hour_value,hour_name");
		//$this->db->where("company_created_by", $userid);
		$this->db->where("hour_flag", 0);
		$q = $this->db->get("ts_hour");
        $rowmaster = $q->result();
        
        $total_process = count($rowmaster);
        printf("TOTAL PROSES HOUR : %s \r\n",$total_process); 
        printf("============================================ \r\n");
		
		
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowmaster[$x]->hour_name, $x+1, $total_process);
				$report_date = date("Y-m-d", strtotime($startdate));
				$report_hour_start = date("H:i:s", strtotime($rowmaster[$x]->hour_value.":"."00:00"));
				$report_hour_end = date("H:i:s", strtotime($rowmaster[$x]->hour_value.":"."59:59"));
				$sdate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_start));
				$edate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_end));
				//print_r($sdate_ex." ".$edate_ex);exit();
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate_ex);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate_ex);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_type", "road"); //khusus dijalan
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					/* $datainsert["overspeed_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["overspeed_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["overspeed_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type; */
					$datainsert["overspeed_board_hour_name"] = $rowmaster[$x]->hour_name;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_hour_name", $rowmaster[$x]->hour_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_hour_name", $rowmaster[$x]->hour_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//overspeed by level
	function overspeed_board_level($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY COMPANY >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "level";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		//get data hour (24 jam)
		$this->db = $this->load->database("webtracking_ts",true); 
		$this->db->order_by("level_value", $orderby);
		$this->db->select("level_value,level_name");
		//$this->db->where("company_created_by", $userid);
		$this->db->where("level_flag", 0);
		$q = $this->db->get("ts_speed_level");
        $rowmaster = $q->result();
        
        $total_process = count($rowmaster);
        printf("TOTAL PROSES LEVEL : %s \r\n",$total_process); 
        printf("============================================ \r\n");
		
		
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowmaster[$x]->level_name, $x+1, $total_process);
				/* $report_date = date("Y-m-d", strtotime($startdate));
				$report_hour_start = date("H:i:s", strtotime($rowmaster[$x]->level_value.":"."00:00"));
				$report_hour_end = date("H:i:s", strtotime($rowmaster[$x]->level_value.":"."59:59"));
				$sdate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_start));
				$edate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_end)); */
				//print_r($sdate_ex." ".$edate_ex);exit();
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_type", "road"); //khusus dijalan
				$this->dbreport->where("overspeed_report_level",$rowmaster[$x]->level_value);
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					/* $datainsert["overspeed_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["overspeed_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["overspeed_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type; */
					$datainsert["overspeed_board_level_name"] = $rowmaster[$x]->level_name;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_level_name", $rowmaster[$x]->level_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_level_name", $rowmaster[$x]->level_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//overspeed by Sign
	function overspeed_board_sign($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("OVERSPEED BY SIGN >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "sign";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		/* $this->db = $this->load->database("default",true); 
		$this->db->select("user_id,user_dblive");
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		} */
		
		$this->dbts = $this->load->database("webtracking_ts",true); 
		$this->dbts->select("*");
		$this->dbts->order_by("sign_value", "asc");
		$this->dbts->where("sign_user", $userid);
		$this->dbts->where("sign_type", 1);
		$q = $this->dbts->get("ts_sign");
        $rowsign = $q->result();
			
        $total_process = count($rowsign);
        printf("TOTAL PROSES SIGN : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowsign);$x++){
				
				printf("==PROCESS KOSONGAN %s (%s of %s) \r\n",$rowsign[$x]->sign_name,  $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_limit", $rowsign[$x]->sign_value);
				$this->dbreport->where("overspeed_report_jalur", "kosongan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_sign"] = $rowsign[$x]->sign_value;
					$datainsert["overspeed_board_sign_alias"] = $rowsign[$x]->sign_name;
					$datainsert["overspeed_board_jalur"] = "kosongan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_sign", $rowsign[$x]->sign_value);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","kosongan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_sign", $rowsign[$x]->sign_value);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","kosongan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
	
			//Muatan
			for($x=0;$x<count($rowsign);$x++){
				printf("==PROCESS MUATAN %s (%s of %s) \r\n",$rowsign[$x]->sign_name,  $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_geofence_limit", $rowsign[$x]->sign_value);
				$this->dbreport->where("overspeed_report_jalur", "muatan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_sign"] = $rowsign[$x]->sign_value;
					$datainsert["overspeed_board_sign_alias"] = $rowsign[$x]->sign_name;
					$datainsert["overspeed_board_jalur"] = "muatan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_sign", $rowsign[$x]->sign_value);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","muatan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_sign", $rowsign[$x]->sign_value);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","muatan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	
	
	function cam_board_alarm($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("CAM BY ALARM TYPE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$typereport = 0;
		
        $report_type = "evidence";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_evidence_";
		$report_new = "overspeed_board_";
		$model = "alarmtype";
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$rowmaster = $this->get_masteralarm_bycreator($userid);
		$total_process = count($rowmaster);
        printf("TOTAL MASTER ALARM : %s \r\n",$total_process);
        printf("============================================ \r\n");
		$street_register = $this->config->item('street_register');
		
		//print_r($rowmaster);exit();
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS DATA %s (%s of %s) \r\n",$rowmaster[$x]->alarmmaster_name,  $x+1, $total_process);
				
				$alarm_register = $this->get_alarmname_bymaster($rowmaster[$x]->alarmmaster_id);
				
				//get total data from table
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //ambil dari photo saja
				$this->dbreport->where_in("alarm_report_name", $alarm_register);
				$this->dbreport->where_in('alarm_report_location_start', $street_register); //new filter
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result(); 
					$total_data = count($rows);
					printf("==ALARM EVIDENCE  %s \r\n", $total_data);
				}else{
					$total_data = 0;
					printf("==ALARM EVIDENCE %s \r\n", $total_data);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_alarm"] = $rowmaster[$x]->alarmmaster_name;
					$datainsert["overspeed_board_alarm_alias"] =  $rowmaster[$x]->alarmmaster_name;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_data;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				//get last data
				$this->dbreport->where("overspeed_board_alarm", $rowmaster[$x]->alarmmaster_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_alarm", $rowmaster[$x]->alarmmaster_name);
					$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
	
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	function cam_board_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("CAM BY ALARM TYPE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$typereport = 0;
		
        $report_type = "evidence";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_evidence_";
		$report_new = "overspeed_board_";
		$model = "alarmevehicle";
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$rowmaster = $this->getall_vehicle_byuser($userid);
		$total_process = count($rowmaster);
        printf("TOTAL MASTER ALARM : %s \r\n",$total_process);
        printf("============================================ \r\n");
		
		//print_r($rowmaster);exit();
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS DATA %s (%s of %s) \r\n",$rowmaster[$x]->vehicle_no,  $x+1, $total_process);
				
				$ex_device = explode("@",$rowmaster[$x]->vehicle_device);
				$device = $ex_device[0];
				$vehicle_id = $rowmaster[$x]->vehicle_id;
				$vehicle_name = $rowmaster[$x]->vehicle_name;
				$vehicle_no = $rowmaster[$x]->vehicle_no;
				$vehicle_device =  $rowmaster[$x]->vehicle_device;
				
				$alarm_register = $this->getall_alarm_bycreator($userid);
				
				//get total data from table
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //ambil dari photo saja
				$this->dbreport->where("alarm_report_vehicle_id", $device);
				$this->dbreport->where_in("alarm_report_name", $alarm_register);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result(); 
					$total_data = count($rows);
					printf("==ALARM EVIDENCE  %s \r\n", $total_data);
				}else{
					$total_data = 0;
					printf("==ALARM EVIDENCE %s \r\n", $total_data);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_vehicle_id"] = $vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $vehicle_name;
					
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_data;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				//get last data
				$this->dbreport->where("overspeed_board_vehicle_device", $rowmaster[$x]->vehicle_device);
				$this->dbreport->where("overspeed_board_vehicle_no", $rowmaster[$x]->vehicle_no);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_vehicle_device", $rowmaster[$x]->vehicle_device);
					$this->dbreport->where("overspeed_board_vehicle_no", $rowmaster[$x]->vehicle_no);
					$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
	
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	function cam_board_company($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("CAM BY ALARM COMPANY >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$typereport = 0;
		
        $report_type = "evidence";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_evidence_";
		$report_new = "overspeed_board_";
		$model = "alarmecompany";
		
		if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$rowmaster = $this->getall_company_bycreator($userid);
		$total_process = count($rowmaster);
        printf("TOTAL MASTER COMPANY : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS DATA %s (%s of %s) \r\n",$rowmaster[$x]->company_name,  $x+1, $total_process);
				
				$company_id = $rowmaster[$x]->company_id;
				$company_name = $rowmaster[$x]->company_name;
				
				$alarm_register = $this->getall_alarm_bycreator($userid);
				
				//get total data from table
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //ambil dari photo saja
				$this->dbreport->where("alarm_report_vehicle_company", $company_id);
				$this->dbreport->where_in("alarm_report_name", $alarm_register);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result(); 
					$total_data = count($rows); //print_r($rows);exit();
					printf("==ALARM EVIDENCE  %s \r\n", $total_data);
				}else{
					$total_data = 0;
					printf("==ALARM EVIDENCE %s \r\n", $total_data);
				}
				//end query
				
					unset($datainsert);
					
					$datainsert["overspeed_board_vehicle_company"] = $rowmaster[$x]->company_id;
					$datainsert["overspeed_board_company_name"] = $rowmaster[$x]->company_name;
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_data;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				//get last data
				$this->dbreport->where("overspeed_board_vehicle_company", $rowmaster[$x]->company_id);
				$this->dbreport->where("overspeed_board_company_name", $rowmaster[$x]->company_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_vehicle_company", $rowmaster[$x]->company_id);
					$this->dbreport->where("overspeed_board_company_name", $rowmaster[$x]->company_name);
					$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
	
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	function cam_board_street($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY STREET >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "overspeed_";
		$report_new = "overspeed_board_";
		$model = "alarmstreet";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true); 
		$this->db->select("user_id,user_dblive");
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->db = $this->load->database("default",true); 
		$this->db->group_by("street_name");
		$this->db->select("street_id,street_name");
		$this->db->order_by("street_name", "asc");
		$this->db->where("street_creator", $userid);
		$this->db->where("street_type", 1); //khusus hauling road
		//$this->db->like("street_name", "KM");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
			
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				$ex_street_name = explode(" ",$street_name);
				$street_name_alias = round($ex_street_name[1],0,PHP_ROUND_HALF_UP);
				printf("==PROCESS KOSONGAN %s alias: %s (%s of %s) \r\n",$street_name, $street_name_alias, $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_location", $street_name);
				$this->dbreport->where("overspeed_report_jalur", "kosongan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_street"] = $street_name;
					$datainsert["overspeed_board_street_alias"] = $street_name_alias;
					$datainsert["overspeed_board_jalur"] = "kosongan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_street", $street_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","kosongan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_street", $street_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","kosongan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
			//Muatan
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				$ex_street_name = explode(" ",$street_name);
				$street_name_alias = round($ex_street_name[1],0,PHP_ROUND_HALF_UP);
				printf("==PROCESS MUATAN %s alias: %s (%s of %s) \r\n",$street_name, $street_name_alias, $x+1, $total_process);
				
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("overspeed_report_gps_time","asc");
				$this->dbreport->select("overspeed_report_id");
				$this->dbreport->where("overspeed_report_gps_time >=",$sdate);
				$this->dbreport->where("overspeed_report_gps_time <=", $edate);
				$this->dbreport->where("overspeed_report_speed_status", 1); //valid data
				$this->dbreport->where("overspeed_report_location", $street_name);
				$this->dbreport->where("overspeed_report_jalur", "muatan");
				$this->dbreport->where("overspeed_report_type", $typereport); //data fix (default) = 0
				$this->dbreport->where("overspeed_report_event_status", 1); // only group_by 1
				$this->dbreport->where("overspeed_report_event_total !=", 0); // only group_by 1
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_overspeed = count($rows);
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}else{
					$total_overspeed = 0;
					printf("==OVERSPEED %s \r\n", $total_overspeed);
				}
				//end query
				
					unset($datainsert);
					$datainsert["overspeed_board_vehicle_user_id"] = $userid;
					$datainsert["overspeed_board_street"] = $street_name;
					$datainsert["overspeed_board_street_alias"] = $street_name_alias;
					$datainsert["overspeed_board_jalur"] = "muatan";
					$datainsert["overspeed_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["overspeed_board_type"] = $typereport;
					$datainsert["overspeed_board_model"] = $model;
					$datainsert["overspeed_board_total"] = $total_overspeed;
					$datainsert["overspeed_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("overspeed_board_street", $street_name);
				$this->dbreport->where("overspeed_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("overspeed_board_type",$typereport);
				$this->dbreport->where("overspeed_board_model",$model);
				$this->dbreport->where("overspeed_board_jalur","muatan");
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("overspeed_board_street", $street_name);
					$this->dbreport->where("overspeed_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("overspeed_board_type",$typereport);
					$this->dbreport->where("overspeed_board_model",$model);
					$this->dbreport->where("overspeed_board_jalur","muatan");
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	
	//alarm by vehicle
	function alarm_board_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "vehicle";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_mv03 != ","0000");
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_imei", $rowvehicle[$x]->vehicle_mv03);
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //photo
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["alarm_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["alarm_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["alarm_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["alarm_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["alarm_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["alarm_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["alarm_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("alarm_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//Alarm by Geofence
	function alarm_board_geofence($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY GEOFENCE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "geofence";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->dblive = $this->load->database($dblive,true); 
		$this->dblive->select("geofence_id,geofence_name,geofence_speed,geofence_speed_muatan");
		$this->dblive->order_by("geofence_id", "asc");
		$this->dblive->where("geofence_group", $typereport);
		$this->dblive->where("geofence_user", $userid);
		$this->dblive->where("geofence_status", 1);
		$this->dblive->where("geofence_type", "road");
		$q = $this->dblive->get("geofence");
        $rowgeofence = $q->result();
			
        $total_process = count($rowgeofence);
        printf("TOTAL PROSES GEOFENCE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
		
			//kosongan
			for($x=0;$x<count($rowgeofence);$x++){
				printf("==PROCESS KOSONGAN %s %s of %s \r\n",$rowgeofence[$x]->geofence_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0);
				$this->dbreport->where("alarm_report_geofence_start", $rowgeofence[$x]->geofence_name);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $userid;
					$datainsert["alarm_board_geofence"] = $rowgeofence[$x]->geofence_name;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_geofence", $rowgeofence[$x]->geofence_name);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_geofence", $rowgeofence[$x]->geofence_name);
					$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
			}
			
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		$this->dblive->close();
		$this->dblive->cache_delete_all();
	}
	
	//Alarm by Street
	function alarm_board_street($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY STREET >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "street";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->db = $this->load->database("default",true); 
		$this->db->select("street_id,street_name");
		$this->db->order_by("street_name", "asc");
		$this->db->where("street_creator", $userid);
		$this->db->like("street_name", "KM");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
			
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				
				printf("==PROCESS KOSONGAN %s %s of %s \r\n",$street_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_location_start", $street_name);
				$this->dbreport->where("alarm_report_media", 0);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==OVERSPEED %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==OVERSPEED %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $userid;
					$datainsert["alarm_board_street"] = $street_name;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_street", $street_name);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_street", $street_name);
					$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
			
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	//Alarm by Code
	function alarm_board_code($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY TYPE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "code";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); 
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
			
		//$type_list = $this->config->item('alarm_report');
		
		$rowsalarm = $this->getalarmreport();
		
        $total_process = count($rowsalarm);
        printf("TOTAL PROSES : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowsalarm);$x++){
				
				printf("==PROCESS : %s %s of %s \r\n",$rowsalarm[$x]->alarm_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=",$edate);
				$this->dbreport->where("alarm_report_media", 0);
				$this->dbreport->where("alarm_report_speed_status", 1);
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_type", $rowsalarm[$x]->alarm_type);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $userid;
					$datainsert["alarm_board_alarmname"] = $rowsalarm[$x]->alarm_name;
					$datainsert["alarm_board_alarmtype"] = $rowsalarm[$x]->alarm_type;
					$datainsert["alarm_board_alarmlevel"] = $rowsalarm[$x]->alarm_level;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_alarmtype", $rowsalarm[$x]->alarm_type);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_alarmtype", $rowsalarm[$x]->alarm_type);
					$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
			
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	//Alarm by adas vehicle
	function alarm_board_adas_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM ADAS BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "adas_vehicle";
		$adasgroup = 2;
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_mv03 != ","0000");
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_imei", $rowvehicle[$x]->vehicle_mv03);
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //photo
				$this->dbreport->where("alarm_report_group", $adasgroup);
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_speed_status", 1);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["alarm_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["alarm_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["alarm_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["alarm_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["alarm_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["alarm_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["alarm_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("alarm_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//Alarm by adas Street
	function alarm_board_adas_street($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM BY STREET >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "adas_street";
		$adasgroup = 2;
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->select("user_id,user_dblive");
		$this->db->where("user_id", $userid);
		$q = $this->db->get("user");
        $rowuser = $q->row();
		
		if(count($rowuser)>0){ 
			$dblive = $rowuser->user_dblive;
		}else{
			printf("NO DATA USER DB LIVE : %s \r\n",$userid);
			return;
		}
		
		$this->db = $this->load->database("default",true); 
		$this->db->select("street_id,street_name");
		$this->db->order_by("street_name", "asc");
		$this->db->where("street_creator", $userid);
		$this->db->like("street_name", "KM");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
			
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowstreet);$x++){
				$street_name = str_replace(",", "", $rowstreet[$x]->street_name);
				
				printf("==PROCESS KOSONGAN %s %s of %s \r\n",$street_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_location_start", $street_name);
				$this->dbreport->where("alarm_report_media", 0);
				$this->dbreport->where("alarm_report_speed_status", 1);
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_group", $adasgroup);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==OVERSPEED %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==OVERSPEED %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $userid;
					$datainsert["alarm_board_street"] = $street_name;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_street", $street_name);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_street", $street_name);
					$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
			
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
		
	}
	
	//Alarm by Distracted
	function alarm_board_distracted_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("ALARM ADAS BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "distracted_vehicle";
		$listalarm = array("624","625","637","674","675","687");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_mv03 != ","0000");
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_imei", $rowvehicle[$x]->vehicle_mv03);
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //photo
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_speed_status", 1);
				$this->dbreport->where_in("alarm_report_type", $listalarm);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["alarm_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["alarm_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["alarm_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["alarm_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["alarm_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["alarm_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["alarm_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("alarm_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//Alarm by Distracted
	function alarm_board_distracted_vehicle_shift1($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("DISTRACTED BY VEHICLE SHIFT 1 >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "distracted_vehicle_shift_1";
		$listalarm = array("624","625","637","674","675","687");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 05:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 05:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 16:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 16:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
	
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_mv03 != ","0000");
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_imei", $rowvehicle[$x]->vehicle_mv03);
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //photo
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_speed_status", 1);
				$this->dbreport->where_in("alarm_report_type", $listalarm);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["alarm_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["alarm_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["alarm_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["alarm_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["alarm_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["alarm_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["alarm_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("alarm_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//Alarm by Distracted
	function alarm_board_distracted_vehicle_shift2($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("DISTRACTED BY VEHICLE SHIFT 2 >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "overspeed";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "alarm_";
		$report_new = "alarm_board_";
		$model = "distracted_vehicle_shift_2";
		$listalarm = array("624","625","637","674","675","687");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 18:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 18:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 05:59:59", strtotime($enddate));
			$enddate = date('Y-m-d H:i:s', strtotime("+1 day", strtotime($enddate)));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 05:59:59", strtotime("yesterday"));
			$enddate = date('Y-m-d H:i:s', strtotime("+1 day", strtotime($enddate)));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_mv03 != ","0000");
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("alarm_report_start_time","asc");
				$this->dbreport->select("alarm_report_id");
				$this->dbreport->where("alarm_report_imei", $rowvehicle[$x]->vehicle_mv03);
				$this->dbreport->where("alarm_report_start_time >=",$sdate);
				$this->dbreport->where("alarm_report_start_time <=", $edate);
				$this->dbreport->where("alarm_report_media", 0); //photo
				$this->dbreport->like("alarm_report_location_start", "KM");
				$this->dbreport->where("alarm_report_gpsstatus !=","");
				$this->dbreport->where("alarm_report_speed_status", 1);
				$this->dbreport->where_in("alarm_report_type", $listalarm);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_alarm = count($rows);
					printf("==ALARM %s \r\n", $total_alarm);
				}else{
					$total_alarm = 0;
					printf("==ALARM %s \r\n", $total_alarm);
				}
				//end query
				
					unset($datainsert);
					$datainsert["alarm_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["alarm_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["alarm_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["alarm_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["alarm_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["alarm_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["alarm_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["alarm_board_imei"] = $rowvehicle[$x]->vehicle_mv03;
					$datainsert["alarm_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["alarm_board_type"] = $typereport;
					$datainsert["alarm_board_model"] = $model;
					$datainsert["alarm_board_total"] = $total_alarm;
					$datainsert["alarm_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("alarm_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("alarm_board_type",$typereport);
				$this->dbreport->where("alarm_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("alarm_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("alarm_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("alarm_board_type",$typereport);
					$this->dbreport->where("alarm_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase report by service
	function ritase($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT RITASE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		if($reporttype == 1){
			 $report_type = "ritase2";
		}else{
			 $report_type = "ritase";
		}
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($startdate))); //wita
        $edate = date("Y-m-d H:i:s", strtotime("-7 hour", strtotime($enddate)));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                        $this->dblive = $this->load->database($rowvehicle[$x]->vehicle_dbname_live,true);
						$this->dblive->order_by("ritase_gpstime","asc");
						$this->dblive->group_by("ritase_last_site_datetime");						
                        $this->dblive->where("ritase_device", $vehicle_device[0]);
                        $this->dblive->where("ritase_last_site_datetime >=", $sdate);
                        $this->dblive->where("ritase_last_site_datetime <=", $edate);    
						$this->dblive->from("ritase");
                        $q = $this->dblive->get();
                        $rows = $q->result();
						$trows = count($rows);
						printf("TOTAL DATA : %s \r\n",$trows);
						//exit();
						//detail data
						if ($trows > 0)
						{
							for($i=0;$i<$trows;$i++)
							{	
								$position_start_name =  $rows[$i]->ritase_last_site;
								$geofence_start_name =  $rows[$i]->ritase_last_site;
								
								$position_end_name = $rows[$i]->ritase_last_dest;
								$geofence_end_name = $rows[$i]->ritase_last_dest;
								
								$ritase_report_vehicle_user_id = $rowvehicle[$x]->vehicle_user_id;
								$ritase_report_vehicle_id = $rowvehicle[$x]->vehicle_id;
								$ritase_report_vehicle_device = $rowvehicle[$x]->vehicle_device;
								$ritase_report_vehicle_no = $rowvehicle[$x]->vehicle_no;
								$ritase_report_vehicle_name = $rowvehicle[$x]->vehicle_name;
								$ritase_report_vehicle_type = $rowvehicle[$x]->vehicle_type;
								$ritase_report_vehicle_company = $rowvehicle[$x]->vehicle_company;
								$ritase_report_type = $reporttype;
								$ritase_report_name = "ritase";
								
								$ritase_report_start_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->ritase_last_site_datetime))); //sudah wita
								$ritase_report_start_location = $position_start_name;
								$ritase_report_start_geofence = $geofence_start_name;
								$ritase_report_start_coordinate = "";
								
								$ritase_report_end_time = date("Y-m-d H:i:s", strtotime("+7 hour", strtotime($rows[$i]->ritase_gpstime))); //sudah wita
								$ritase_report_end_location = $position_end_name;
								$ritase_report_end_geofence = $geofence_end_name;
								$ritase_report_end_coordinate = "";
								
								$ritase_report_driver = 0;
								$ritase_report_driver_name = "";
								
								$duration = get_time_difference($ritase_report_start_time, $ritase_report_end_time);
									
									$start_1 = dbmaketime($ritase_report_start_time);
									$end_1 = dbmaketime($ritase_report_end_time);
									$duration_sec = $end_1 - $start_1;
									
                                    $show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
									
								$ritase_report_duration = $show;
								$ritase_report_duration_sec = $duration_sec;
								
								$datainsert["ritase_report_vehicle_user_id"] = $ritase_report_vehicle_user_id;
								$datainsert["ritase_report_vehicle_id"] = $ritase_report_vehicle_id;
								$datainsert["ritase_report_vehicle_device"] = $ritase_report_vehicle_device;
								
								$datainsert["ritase_report_vehicle_no"] = $ritase_report_vehicle_no;
								$datainsert["ritase_report_vehicle_name"] = $ritase_report_vehicle_name;
								$datainsert["ritase_report_vehicle_type"] = $ritase_report_vehicle_type;
								$datainsert["ritase_report_vehicle_company"] = $ritase_report_vehicle_company;
								$datainsert["ritase_report_type"] = $ritase_report_type;
								$datainsert["ritase_report_name"] = $ritase_report_name;
								
								$datainsert["ritase_report_start_time"] = $ritase_report_start_time;
								$datainsert["ritase_report_start_location"] = $ritase_report_start_location;
								$datainsert["ritase_report_start_geofence"] = $ritase_report_start_geofence;
								$datainsert["ritase_report_start_coordinate"] = $ritase_report_start_coordinate;
								$datainsert["ritase_report_end_time"] = $ritase_report_end_time;
								$datainsert["ritase_report_end_location"] = $ritase_report_end_location;
								$datainsert["ritase_report_end_geofence"] = $ritase_report_end_geofence;
								$datainsert["ritase_report_end_coordinate"] = $ritase_report_end_coordinate;
								
								$datainsert["ritase_report_driver"] = $ritase_report_driver;
								$datainsert["ritase_report_driver_name"] = $ritase_report_driver_name;
								$datainsert["ritase_report_duration"] = $ritase_report_duration;
								$datainsert["ritase_report_duration_sec"] = $ritase_report_duration_sec;
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("============================================ \r\n");
							
						}
						else
						{
							printf("NO DATA RITASE \r\n");
						}
						
					}
				
		}
		
							if($total_process != 0){
								$finish_time = date("Y-m-d H:i:s");
								//Send Email
								$cron_name = $cron_username." - "."RITASE";
								$this->dbtrip = $this->load->database("tensor_report",TRUE);
								$this->dbtrip->select("ritase_report_id");
								$this->dbtrip->where("ritase_report_start_time >=",$sdate);
								$this->dbtrip->where("ritase_report_start_time <=",$edate);
								$qtrip = $this->dbtrip->get($dbtable);
								$rtrip = $qtrip->result();
								$total_data = count($rtrip);
								
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
								$message =  urlencode(
											"".$cron_name." \n".
											"Periode: ".$startdate." to ".$enddate." \n".
											"Total Data: ".$total_data." \n".
											"Start: ".$startproses." \n".
											"Finish: ".$finish_time." \n"
											);
											
								$sendtelegram = $this->telegram_direct($telegram_group,$message);
								printf("===SENT TELEGRAM OK\r\n");
								
								$this->dbtrip->close();
								$this->dbtrip->cache_delete_all();
							}
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	//ritase report by service
	function ritase_summary_muatan($userid="", $orderby="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT RITASE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";

		$report_type = "ritase_muatan";
		
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "ritase_";
		$report = "ritase_new_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process); 
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
			$user_dblive = $rowvehicle[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                       
						$this->dbtrans->order_by("ritase_report_start_time","asc");
						$this->dbtrans->group_by("ritase_report_start_time");
						$this->dbtrans->where("ritase_report_vehicle_id", $rowvehicle[$x]->vehicle_id);
                        $this->dbtrans->where("ritase_report_start_time >=", $sdate);
                        $this->dbtrans->where("ritase_report_start_time <=", $edate);
						$this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						$trows = count($rows);
						printf("TOTAL DATA : %s \r\n",$trows);
						//print_r($rows);
						//detail data
						if ($trows > 0)
						{
							for($i=0;$i<$trows;$i++)
							{	
								
								$ritase_report_vehicle_user_id = $rows[$i]->ritase_report_vehicle_user_id;
								$ritase_report_vehicle_id =  $rows[$i]->ritase_report_vehicle_id;
								$ritase_report_vehicle_device = $rows[$i]->ritase_report_vehicle_device;
								$ritase_report_vehicle_no = $rows[$i]->ritase_report_vehicle_no;
								$ritase_report_vehicle_name = $rows[$i]->ritase_report_vehicle_name;
								$ritase_report_vehicle_type = $rows[$i]->ritase_report_vehicle_type;
								$ritase_report_vehicle_company = $rows[$i]->ritase_report_vehicle_company;
								
								$ex_device = explode("@",$rows[$i]->ritase_report_vehicle_device);
								$imei_device = $ex_device[0];
									
								//ritase muatan
								if($report_type == "ritase_muatan")
								{
									$ritase_report_type = "muatan";
									
									//rom
									$ritase_report_start_time =  $rows[$i]->ritase_report_start_time;
									$ritase_report_start_location = str_replace(",", "", $rows[$i]->ritase_report_start_location); 
									$ritase_report_start_geofence = str_replace(",", "", $rows[$i]->ritase_report_start_geofence); 
									$ritase_report_start_coordinate = $rows[$i]->ritase_report_start_coordinate;
									
									//port
									$ritase_report_end_time = $rows[$i]->ritase_report_end_time;
									$ritase_report_end_location = str_replace(",", "", $rows[$i]->ritase_report_end_location);  
									$ritase_report_end_geofence = str_replace(",", "", $rows[$i]->ritase_report_end_geofence);  
									$ritase_report_end_coordinate = $rows[$i]->ritase_report_end_coordinate;  
									
									$ritase_report_geofence_in_duration_sec = $this->get_duration_geofence_bylocation($ritase_report_vehicle_id,$ritase_report_start_geofence,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									//$ritase_report_port_in_duration_sec = $this->get_duration_geofence_bylocation($ritase_report_vehicle_id,$ritase_report_rom_end_geofence,$ritase_report_rom_start_time,$ritase_report_rom_end_time,$dbtable_location);
									
									
									$ritase_report_off_in_road_sec = $this->get_location_off_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_on_in_road_sec = $this->get_location_on_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_idle_in_road_sec = $this->get_location_idle_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									
									
									$ritase_report_odometer = $this->get_totalodometer_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_odometer_master = $this->get_totalodometer_bymaster($ritase_report_start_geofence,$ritase_report_end_geofence);
									
									$ritase_report_total_fuel = $this->get_totalfuel_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									/* $driverdata = $this->getdriverByIdButton_alarm_bysdate($imei_device,$user_dblive,$ritase_report_start_time);
									$ex_driver = explode("-",$driverdata);
									$ritase_report_driver = $ex_driver[0];
									$ritase_report_driver_name = strtoupper($ex_driver[1]); */
									
									$ritase_report_driver = "";
									$ritase_report_driver_name= "-";
									
									$ritase_report_duration_in_road_sec = $ritase_report_off_in_road_sec + $ritase_report_on_in_road_sec + $ritase_report_idle_in_road_sec;
									
									$duration = get_time_difference($ritase_report_start_time, $ritase_report_end_time);
									
									$start_1 = dbmaketime($ritase_report_start_time);
									$end_1 = dbmaketime($ritase_report_end_time);
									$duration_sec = $end_1 - $start_1;
								
									
									$show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
									
									$ritase_report_duration_all_text = $show;
									$ritase_report_duration_all_sec = $duration_sec;
									
								}
								//ritase kosongan
								else
								{
									$ritase_report_type = "kosongan";
																
									exit();
									
									
								}
								
								unset($datainsert);
								$datainsert["ritase_report_vehicle_user_id"] = $ritase_report_vehicle_user_id;
								$datainsert["ritase_report_vehicle_id"] = $ritase_report_vehicle_id;
								$datainsert["ritase_report_vehicle_device"] = $ritase_report_vehicle_device;
								$datainsert["ritase_report_vehicle_no"] = $ritase_report_vehicle_no;
								$datainsert["ritase_report_vehicle_name"] = $ritase_report_vehicle_name;
								$datainsert["ritase_report_vehicle_type"] = $ritase_report_vehicle_type;
								$datainsert["ritase_report_vehicle_company"] = $ritase_report_vehicle_company;
								$datainsert["ritase_report_type"] = $ritase_report_type;
								
								
								if($report_type == "ritase_muatan")
								{
									$datainsert["ritase_report_start_time"] = $ritase_report_start_time;
									$datainsert["ritase_report_start_location"] = $ritase_report_start_location;
									$datainsert["ritase_report_start_geofence"] = $ritase_report_start_geofence;
									$datainsert["ritase_report_start_coordinate"] = $ritase_report_start_coordinate;
									$datainsert["ritase_report_end_time"] = $ritase_report_end_time;
									$datainsert["ritase_report_end_location"] = $ritase_report_end_location;
									$datainsert["ritase_report_end_geofence"] = $ritase_report_end_geofence;
									$datainsert["ritase_report_end_coordinate"] = $ritase_report_end_coordinate;
									$datainsert["ritase_report_geofence_in_duration_sec"] = $ritase_report_geofence_in_duration_sec;
									
									
								}
								else
								{
									exit();
								}
								
								
								$datainsert["ritase_report_driver"] = $ritase_report_driver;
								$datainsert["ritase_report_driver_name"] = $ritase_report_driver_name;
								$datainsert["ritase_report_odometer"] = $ritase_report_odometer;
								$datainsert["ritase_report_odometer_master"] = $ritase_report_odometer_master;
								$datainsert["ritase_report_total_fuel"] = $ritase_report_total_fuel;
								$datainsert["ritase_report_off_in_road_sec"] = $ritase_report_off_in_road_sec;
								$datainsert["ritase_report_on_in_road_sec"] = $ritase_report_on_in_road_sec;
								$datainsert["ritase_report_idle_in_road_sec"] = $ritase_report_idle_in_road_sec;
								$datainsert["ritase_report_duration_in_road_sec"] = $ritase_report_duration_in_road_sec;
								$datainsert["ritase_report_duration_all_sec"] = $ritase_report_duration_all_sec;
								$datainsert["ritase_report_duration_all_text"] = $ritase_report_duration_all_text;
								$this->dbtrans->insert($dbtable,$datainsert);
								printf(".");
								
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							$this->dbtrans->insert("autoreport_new",$data_insert);
							
							printf("INSERT CONFIG OK \r\n");
							printf("============================================ \r\n");
							
						}
						else
						{
							printf("NO DATA RITASE \r\n");
						}
						
					}
				
		}
		
		
		//send telegram 
		//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
		$cron_name = "RITASE MUATAN";
		$finish_time = date("Y-m-d H:i:s");
		$message =  urlencode(
			"".$cron_name." \n".
			"Periode: ".$startdate." to ".$enddate." \n".
			"Start: ".$startproses." \n".
			"Finish: ".$finish_time." \n"
			);
											
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	//ritase report by service
	function ritase_summary_kosongan($userid="", $orderby="", $startdate= "", $enddate= ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT RITASE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
		$report_type = "ritase_kosongan";
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "ritase_new_";
		$report = "ritase_new_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		//$this->db->where("vehicle_no", "3060-BM8571AO");
		
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process); 
        printf("============================================ \r\n");
        
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowvehicle);$x++){
			$vehicle_device = explode("@", $rowvehicle[$x]->vehicle_device);  
			printf("PROSES VEHICLE : %s %s %s (%d/%d) \r\n",$rowvehicle[$x]->vehicle_no, $rowvehicle[$x]->vehicle_id, $rowvehicle[$x]->user_name, ++$z, $total_process);
			$cron_username = strtoupper($rowvehicle[$x]->user_name);
			$company_username = $rowvehicle[$x]->user_company;
			$user_dblive = $rowvehicle[$x]->user_dblive;
            unset($data_insert);
					$skip_insert_kosongan = 0;
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowvehicle[$x]->vehicle_device);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {

                       
						$this->dbtrans->order_by("ritase_report_end_time","asc");
						$this->dbtrans->group_by("ritase_report_end_time");
						$this->dbtrans->where("ritase_report_vehicle_id", $rowvehicle[$x]->vehicle_id);
                        $this->dbtrans->where("ritase_report_end_time >=", $sdate);
                        $this->dbtrans->where("ritase_report_end_time <=", $edate);
						$this->dbtrans->from($dbtable_source);
                        $q = $this->dbtrans->get();
                        $rows = $q->result();
						$trows = count($rows);
						printf("TOTAL DATA : %s \r\n",$trows);
//						print_r($rows);
						//detail data
						if ($trows > 0)
						{
							for($i=0;$i<$trows;$i++)
							{	
								
								$ritase_report_vehicle_user_id = $rows[$i]->ritase_report_vehicle_user_id;
								$ritase_report_vehicle_id =  $rows[$i]->ritase_report_vehicle_id;
								$ritase_report_vehicle_device = $rows[$i]->ritase_report_vehicle_device;
								$ritase_report_vehicle_no = $rows[$i]->ritase_report_vehicle_no;
								$ritase_report_vehicle_name = $rows[$i]->ritase_report_vehicle_name;
								$ritase_report_vehicle_type = $rows[$i]->ritase_report_vehicle_type;
								$ritase_report_vehicle_company = $rows[$i]->ritase_report_vehicle_company;
								
								$ex_device = explode("@",$rows[$i]->ritase_report_vehicle_device);
								$imei_device = $ex_device[0];
									
								//ritase kosongan
								if($report_type == "ritase_kosongan")
								{
									$ritase_report_type = "kosongan";
									
									//rom
									$ritase_report_start_time =  $rows[$i]->ritase_report_end_time;
									$ritase_report_start_location = $rows[$i]->ritase_report_end_location;
									$ritase_report_start_geofence = $rows[$i]->ritase_report_end_geofence;
									$ritase_report_start_coordinate = $rows[$i]->ritase_report_end_coordinate;
									
									//get next data
									$this->dbtrans->order_by("ritase_report_start_time","asc");
									$this->dbtrans->group_by("ritase_report_start_time");
									$this->dbtrans->limit(1);
									$this->dbtrans->where("ritase_report_vehicle_id", $rowvehicle[$x]->vehicle_id);
									$this->dbtrans->where("ritase_report_end_time >", $ritase_report_start_time);
									//$this->dbtrans->where("ritase_report_end_time <=", $edate);
									$this->dbtrans->from($dbtable_source);
									$q_next = $this->dbtrans->get();
									$rows_next = $q_next->row();
									$trows_next = count($rows_next);
									if($trows_next == 0){
										printf("NO NEXT DATA \r\n");
										$skip_insert_kosongan = 1;
										break;
									}
									
									//port
									$ritase_report_end_time = $rows_next->ritase_report_start_time;
									$ritase_report_end_location = $rows_next->ritase_report_start_location;
									$ritase_report_end_geofence = $rows_next->ritase_report_start_geofence;
									$ritase_report_end_coordinate = $rows_next->ritase_report_start_coordinate;
									
									$ritase_report_geofence_in_duration_sec = $this->get_duration_geofence_bylocation($ritase_report_vehicle_id,$ritase_report_start_geofence,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									//$ritase_report_port_in_duration_sec = $this->get_duration_geofence_bylocation($ritase_report_vehicle_id,$ritase_report_rom_end_geofence,$ritase_report_rom_start_time,$ritase_report_rom_end_time,$dbtable_location);
									
									
									$ritase_report_off_in_road_sec = $this->get_location_off_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_on_in_road_sec = $this->get_location_on_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_idle_in_road_sec = $this->get_location_idle_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									
									
									$ritase_report_odometer = $this->get_totalodometer_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									$ritase_report_total_fuel = $this->get_totalfuel_bylocation($ritase_report_vehicle_id,$ritase_report_start_time,$ritase_report_end_time,$dbtable_location);
									/* $driverdata = $this->getdriverByIdButton_alarm_bysdate($imei_device,$user_dblive,$ritase_report_start_time);
									$ex_driver = explode("-",$driverdata);
									$ritase_report_driver = $ex_driver[0];
									$ritase_report_driver_name = strtoupper($ex_driver[1]); */
									
									$ritase_report_driver = "";
									$ritase_report_driver_name= "-";
									
									$ritase_report_duration_in_road_sec = $ritase_report_off_in_road_sec + $ritase_report_on_in_road_sec + $ritase_report_idle_in_road_sec;
									
									$duration = get_time_difference($ritase_report_start_time, $ritase_report_end_time);
									
									$start_1 = dbmaketime($ritase_report_start_time);
									$end_1 = dbmaketime($ritase_report_end_time);
									$duration_sec = $end_1 - $start_1;
									
									$show = "";
                                    if($duration[0]!=0)
                                    {
                                        $show .= $duration[0] ." Day ";
                                    }
                                    if($duration[1]!=0)
                                    {
                                        $show .= $duration[1] ." Hour ";
                                    }
                                    if($duration[2]!=0)
                                    {
                                        $show .= $duration[2] ." Min ";
                                    }
                                    if($show == "")
                                    {
                                        $show .= "0 Min";
                                    }
									
									$ritase_report_duration_all_text = $show;
									$ritase_report_duration_all_sec = $duration_sec;
									
									if($ritase_report_start_location == $ritase_report_end_location){
										$skip_insert_kosongan = 1;
										printf("SKIP INVALID DATA \r\n");
									}else{
										$skip_insert_kosongan = 0;
									}
								}
							
								else
								{
									exit();
								}
								
								unset($datainsert);
								$datainsert["ritase_report_vehicle_user_id"] = $ritase_report_vehicle_user_id;
								$datainsert["ritase_report_vehicle_id"] = $ritase_report_vehicle_id;
								$datainsert["ritase_report_vehicle_device"] = $ritase_report_vehicle_device;
								$datainsert["ritase_report_vehicle_no"] = $ritase_report_vehicle_no;
								$datainsert["ritase_report_vehicle_name"] = $ritase_report_vehicle_name;
								$datainsert["ritase_report_vehicle_type"] = $ritase_report_vehicle_type;
								$datainsert["ritase_report_vehicle_company"] = $ritase_report_vehicle_company;
								$datainsert["ritase_report_type"] = $ritase_report_type;
								
								
								if($report_type == "ritase_kosongan")
								{
									$datainsert["ritase_report_start_time"] = $ritase_report_start_time;
									$datainsert["ritase_report_start_location"] = $ritase_report_start_location;
									$datainsert["ritase_report_start_geofence"] = $ritase_report_start_geofence;
									$datainsert["ritase_report_start_coordinate"] = $ritase_report_start_coordinate;
									$datainsert["ritase_report_end_time"] = $ritase_report_end_time;
									$datainsert["ritase_report_end_location"] = $ritase_report_end_location;
									$datainsert["ritase_report_end_geofence"] = $ritase_report_end_geofence;
									$datainsert["ritase_report_end_coordinate"] = $ritase_report_end_coordinate;
									$datainsert["ritase_report_geofence_in_duration_sec"] = $ritase_report_geofence_in_duration_sec;
									$datainsert["ritase_report_duration_all_sec"] = $ritase_report_duration_all_sec;
									$datainsert["ritase_report_duration_all_text"] = $ritase_report_duration_all_text;
								
									
									
								}
								else
								{
									exit();
								}
								
								
								$datainsert["ritase_report_driver"] = $ritase_report_driver;
								$datainsert["ritase_report_driver_name"] = $ritase_report_driver_name;
								$datainsert["ritase_report_odometer"] = $ritase_report_odometer;
								$datainsert["ritase_report_total_fuel"] = $ritase_report_total_fuel;
								$datainsert["ritase_report_off_in_road_sec"] = $ritase_report_off_in_road_sec;
								$datainsert["ritase_report_on_in_road_sec"] = $ritase_report_on_in_road_sec;
								$datainsert["ritase_report_idle_in_road_sec"] = $ritase_report_idle_in_road_sec;
								$datainsert["ritase_report_duration_in_road_sec"] = $ritase_report_duration_in_road_sec;
								if($skip_insert_kosongan == 0){
									
									$this->dbtrans->insert($dbtable,$datainsert);
									printf(".");
								}
								
								
							}
							
							printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
							$data_insert["autoreport_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
							$data_insert["autoreport_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
							$data_insert["autoreport_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
							$data_insert["autoreport_user_id"] = $rowvehicle[$x]->user_id;
							$data_insert["autoreport_company"] = $rowvehicle[$x]->user_company;
							$data_insert["autoreport_data_startdate"] = $startdate;
							$data_insert["autoreport_data_enddate"] = $enddate;
							$data_insert["autoreport_type"] = $report_type;
							$data_insert["autoreport_process_date"] = $process_date;
							$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
							if($skip_insert_kosongan == 0){
								$this->dbtrans->insert("autoreport_new",$data_insert);
							
								printf("INSERT CONFIG OK \r\n");
								printf("============================================ \r\n");
							}
							
							
						}
						else
						{
							printf("NO DATA RITASE \r\n");
						}
						
					}
				
		}
		
		//send telegram 
								//get telegram group by company
								$this->db = $this->load->database("default",TRUE);
								$this->db->select("company_id,company_telegram_cron");
								$this->db->where("company_id",$company_username);
								$qcompany = $this->db->get("company");
								$rcompany = $qcompany->row();
								if(count($rcompany)>0){
									$telegram_group = $rcompany->company_telegram_cron;
								}else{
									$telegram_group = 0;
								}
								
		$cron_name = "RITASE KOSONGAN";
		$finish_time = date("Y-m-d H:i:s");
		$message =  urlencode(
			"".$cron_name." \n".
			"Periode: ".$startdate." to ".$enddate." \n".
			"Start: ".$startproses." \n".
			"Finish: ".$finish_time." \n"
			);
											
		$sendtelegram = $this->telegram_direct($telegram_group,$message);
		printf("===SENT TELEGRAM OK\r\n");
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function ritase_all($userid="", $orderby="", $reporttype="", $startdate = "", $enddate = ""){
		$this->ritase($userid,$orderby,$reporttype,$startdate,$enddate);
		$this->ritase_summary_muatan($userid,$orderby,$startdate,$enddate);
		$this->ritase_summary_kosongan($userid,$orderby,$startdate,$enddate);
	}
	
	//ritase by vehicle
	function ritase_board_vehicle($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "vehicle";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
		$limit_sec = 45*60;
		$list_port = array("PORT BIB","PORT BIR","PORT TIA");
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_end_time","asc");
				$this->dbreport->group_by("ritase_report_end_time");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where("ritase_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
				$this->dbreport->where_in("ritase_report_end_geofence", $list_port);
				$this->dbreport->where("ritase_report_end_time >=",$sdate);
				$this->dbreport->where("ritase_report_end_time <=", $edate);
				$this->dbreport->where("ritase_report_type", $typereport);
				$this->dbreport->where("ritase_report_duration_sec >", $limit_sec);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					$datainsert["ritase_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["ritase_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["ritase_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["ritase_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["ritase_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["ritase_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["ritase_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase by vehicle
	function ritase_board_port($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY PORT >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "port";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->dbts = $this->load->database("webtracking_ts", TRUE);
		$this->dbts->order_by("port_name", $orderby);
		$this->dbts->where("port_user", $userid);
		$this->dbts->where("port_type", 0);
		$this->dbts->where("port_flag", 0);
		$q = $this->dbts->get("ts_port");
        $rowport = $q->result();
        
        $total_process = count($rowport);
        printf("TOTAL PROSES PORT : %s \r\n",$total_process);
        printf("============================================ \r\n");
		$limit_sec = 45*60;
			for($x=0;$x<count($rowport);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowport[$x]->port_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_end_time","asc");
				$this->dbreport->group_by("ritase_report_end_time");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where("ritase_report_end_geofence", $rowport[$x]->port_name);
				$this->dbreport->where("ritase_report_end_time >=",$sdate);
				$this->dbreport->where("ritase_report_end_time <=", $edate);
				$this->dbreport->where("ritase_report_type", $typereport);
				$this->dbreport->where("ritase_report_duration_sec >", $limit_sec);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					//$datainsert["ritase_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					//$datainsert["ritase_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					//$datainsert["ritase_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					//$datainsert["ritase_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					//$datainsert["ritase_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					//$datainsert["ritase_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["ritase_board_port"] = $rowport[$x]->port_name;
					//$datainsert["ritase_board_vehicle_company"] = $rowport[$x]->port_name;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_port", $rowport[$x]->port_name);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_port", $rowport[$x]->port_name);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase by vehicle
	function ritase_board_company($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY COMPANY >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "company";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		$this->db = $this->load->database("default",true); 
		$this->db->order_by("company_name", $orderby);
		$this->db->where("company_created_by", $userid);
		$this->db->where("company_flag", 0);
		$q = $this->db->get("company");
        $rowcompany = $q->result();
        
        $total_process = count($rowcompany);
        printf("TOTAL PROSES COMPANY : %s \r\n",$total_process); 
        printf("============================================ \r\n");
		$limit_sec = 45*60;
		$list_port = array("PORT BIB","PORT BIR","PORT TIA");
			for($x=0;$x<count($rowcompany);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowcompany[$x]->company_name, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_end_time","asc");
				$this->dbreport->group_by("ritase_report_end_time");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where("ritase_report_vehicle_company", $rowcompany[$x]->company_id);
				$this->dbreport->where_in("ritase_report_end_geofence", $list_port);
				$this->dbreport->where("ritase_report_end_time >=",$sdate);
				$this->dbreport->where("ritase_report_end_time <=", $edate);
				$this->dbreport->where("ritase_report_type", $typereport);
				$this->dbreport->where("ritase_report_duration_sec >", $limit_sec);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					//$datainsert["ritase_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					//$datainsert["ritase_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					//$datainsert["ritase_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					//$datainsert["ritase_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					//$datainsert["ritase_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					//$datainsert["ritase_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["ritase_board_vehicle_company"] = $rowcompany[$x]->company_id;
					$datainsert["ritase_board_company_name"] = $rowcompany[$x]->company_name;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_vehicle_company", $rowcompany[$x]->company_id);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_vehicle_company", $rowcompany[$x]->company_id);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase by hour
	function ritase_board_hour($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY HOUR >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "hour";
		//$model_array = array("vehicle","jalur","street","geofence");
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wita
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wita
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		//get data hour (24 jam)
		$this->db = $this->load->database("webtracking_ts",true); 
		$this->db->order_by("hour_value", $orderby);
		$this->db->select("hour_value,hour_name");
		//$this->db->where("company_created_by", $userid);
		$this->db->where("hour_flag", 0);
		$q = $this->db->get("ts_hour");
        $rowmaster = $q->result();
        
        $total_process = count($rowmaster);
        printf("TOTAL PROSES HOUR : %s \r\n",$total_process); 
        printf("============================================ \r\n");
		
		
			for($x=0;$x<count($rowmaster);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowmaster[$x]->hour_name, $x+1, $total_process);
				$limit_sec = 45*60;
				$list_port = array("PORT BIB","PORT BIR","PORT TIA");
		
				$report_date = date("Y-m-d", strtotime($startdate));
				$report_hour_start = date("H:i:s", strtotime($rowmaster[$x]->hour_value.":"."00:00"));
				$report_hour_end = date("H:i:s", strtotime($rowmaster[$x]->hour_value.":"."59:59"));
				$sdate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_start));
				$edate_ex = date("Y-m-d H:i:s", strtotime($report_date." ".$report_hour_end));
				//print_r($sdate_ex." ".$edate_ex);exit();

				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_end_time","asc");
				$this->dbreport->group_by("ritase_report_end_time");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where_in("ritase_report_end_geofence", $list_port);
				$this->dbreport->where("ritase_report_end_time >=",$sdate_ex);
				$this->dbreport->where("ritase_report_end_time <=", $edate_ex);
				$this->dbreport->where("ritase_report_type", $typereport);
				$this->dbreport->where("ritase_report_duration_sec >", $limit_sec);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					/* $datainsert["overspeed_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["overspeed_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["overspeed_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["overspeed_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["overspeed_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["overspeed_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type; */
					$datainsert["ritase_board_hour_name"] = $rowmaster[$x]->hour_name;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_hour_name", $rowmaster[$x]->hour_name);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_hour_name", $rowmaster[$x]->hour_name);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase by shift 1
	function ritase_board_shift1($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "vehicle_shift_1";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 06:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 06:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 17:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 17:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_start_time","asc");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where("ritase_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
				$this->dbreport->where("ritase_report_start_time >=",$sdate);
				$this->dbreport->where("ritase_report_start_time <=", $edate);
				$this->dbreport->where("ritase_report_type", $typereport);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					$datainsert["ritase_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["ritase_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["ritase_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["ritase_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["ritase_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["ritase_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["ritase_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	//ritase by shift 2
	function ritase_board_shift2($userid="", $orderby="", $typereport="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("RITASE BY VEHICLE >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
        $report_type = "ritase";
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report = "ritase_";
		$report_new = "ritase_board_";
		$model = "vehicle_shift_2";
		
        if ($startdate == "") {
            $startdate = date("Y-m-d 18:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 18:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 05:59:59", strtotime($enddate));
			$enddate = date('Y-m-d H:i:s', strtotime("+1 day", strtotime($enddate)));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 05:59:59", strtotime("yesterday"));
			$enddate = date('Y-m-d H:i:s', strtotime("+1 day", strtotime($enddate)));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_new = $report_new."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_new = $report_new."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_new = $report_new."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_new = $report_new."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_new = $report_new."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_new = $report_new."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_new = $report_new."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_new = $report_new."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_new = $report_new."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_new = $report_new."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_new = $report_new."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_new = $report_new."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s \r\n", $sdate, $edate);
		
		$this->db->order_by("vehicle_id", $orderby);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
        $this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowvehicle = $q->result();
        
        $total_process = count($rowvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process);
        printf("============================================ \r\n");
	
			for($x=0;$x<count($rowvehicle);$x++){
				printf("==PROCESS %s %s of %s \r\n",$rowvehicle[$x]->vehicle_no, $x+1, $total_process);
				//cari total overspeed by vehicle
				$this->dbreport = $this->load->database("tensor_report",true); 
				$this->dbreport->order_by("ritase_report_start_time","asc");
				$this->dbreport->select("ritase_report_id");
				$this->dbreport->where("ritase_report_vehicle_device", $rowvehicle[$x]->vehicle_device);
				$this->dbreport->where("ritase_report_start_time >=",$sdate);
				$this->dbreport->where("ritase_report_start_time <=", $edate);
				$this->dbreport->where("ritase_report_type", $typereport);
				$q = $this->dbreport->get($dbtable);

				if ($q->num_rows>0)
				{
					$rows = $q->result();
					$total_ritase = count($rows);
					printf("==RITASE %s \r\n", $total_ritase);
				}else{
					$total_ritase = 0;
					printf("==RITASE %s \r\n", $total_ritase);
				}
				//end query
				
					unset($datainsert);
					$datainsert["ritase_board_vehicle_user_id"] = $rowvehicle[$x]->vehicle_user_id;
					$datainsert["ritase_board_vehicle_id"] = $rowvehicle[$x]->vehicle_id;
					$datainsert["ritase_board_vehicle_device"] = $rowvehicle[$x]->vehicle_device;
					$datainsert["ritase_board_vehicle_no"] = $rowvehicle[$x]->vehicle_no;
					$datainsert["ritase_board_vehicle_name"] = $rowvehicle[$x]->vehicle_name;
					$datainsert["ritase_board_vehicle_type"] = $rowvehicle[$x]->vehicle_type;
					$datainsert["ritase_board_vehicle_company"] = $rowvehicle[$x]->vehicle_company;
					$datainsert["ritase_board_date"] = date("Y-m-d", strtotime($sdate));
					$datainsert["ritase_board_type"] = $typereport;
					$datainsert["ritase_board_model"] = $model;
					$datainsert["ritase_board_total"] = $total_ritase;
					$datainsert["ritase_board_updated"] = date("Y-m-d H:i:s");
					
				
				//get last data
				$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
				$this->dbreport->where("ritase_board_date",date("Y-m-d", strtotime($sdate)));
				$this->dbreport->where("ritase_board_type",$typereport);
				$this->dbreport->where("ritase_board_model",$model);
				$q_last = $this->dbreport->get($dbtable_new);
				$row_last = $q_last->row();
				$total_last = count($row_last);
				if($total_last>0){
					
					$this->dbreport->where("ritase_board_vehicle_id", $rowvehicle[$x]->vehicle_id);
					$this->dbreport->where("ritase_board_date", date("Y-m-d", strtotime($sdate)));
					$this->dbreport->where("ritase_board_type",$typereport);
					$this->dbreport->where("ritase_board_model",$model);
					$this->dbreport->update($dbtable_new,$datainsert);
					printf("==UPDATE OK \r\n ");
				}else{
					
					$this->dbreport->insert($dbtable_new,$datainsert);
					printf("==INSERT OK \r\n");
				}
				
				
				
			}
		
		$this->db->close();
		$this->db->cache_delete_all();
		$this->dbreport->close();
		$this->dbreport->cache_delete_all();
	}
	
	
	function statistics_kosongan($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_kosongan_all";
			
		}else{
			$report_type = "statistics_kosongan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		$selected_km = array("KM 5,","KM 5.5,","KM 6,","KM 6.5,","KM 7,","KM 7.5,","KM 8,","KM 8.5,","KM 9,","KM 9.5,","KM 10,","KM 10.5,");
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("street_name", $orderby);
		$this->db->group_by("street_name");
		$this->db->select("street_name,street_creator,street_order,user_id,user_name,user_company,user_dblive");
		$this->db->where("street_creator", $userid);
		$this->db->where("street_type", 1);
		$this->db->where_in("street_name", $selected_km);
		$this->db->join("user", "street_creator = user_id", "left outer");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
		//print_r($rowstreet);exit();
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowstreet);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowstreet[$x]->street_name, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowstreet[$x]->user_name);
			$company_username = $rowstreet[$x]->user_company;
			$user_dblive = $rowstreet[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowstreet[$x]->user_id);
					$this->dbtrans->where("autoreport_vehicle_no",$rowstreet[$x]->street_name);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowstreet[$x]->street_name);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "kosongan";
								$km_name = str_replace(",", "", $rowstreet[$x]->street_name);
								$location_report_vehicle_user_id = $rowstreet[$x]->user_id;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = $km_name;
								
								$data_speed = $this->get_avg_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								//$location_report_countspeed10 = $this->get_count_speed_min10($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								//$location_report_countspeed_nol = $this->get_count_speed_nol($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								
								//$data_off = $this->get_count_dataoff_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								//$ex_data_speed = explode("|",$data_off);
								
								//$location_report_count_off = $data_off[1];
								//$location_report_duration_off = $data_off[0];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = $location_report_avg_speed;
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								//$datainsert["location_report_countspeed10"] = $location_report_countspeed10;
								//$datainsert["location_report_countspeed_nol"] = $location_report_countspeed_nol;
								//$datainsert["location_report_count_off"] = $location_report_count_off;
								//$datainsert["location_report_duration_off"] = $location_report_duration_off;
								
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;
								$datainsert["location_report_order"] = $rowstreet[$x]->street_order;
								
								if($location_report_totaldata > 0){
									$this->dbtrans->insert($dbtable,$datainsert);
									printf("INSERT OK \r\n");
									
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_device"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_no"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_user_id"] = $rowstreet[$x]->user_id;
									$data_insert["autoreport_company"] = $rowstreet[$x]->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
										
								}else{
									printf("NO DATA LOCATION \r\n");
								}
								
					}
						
		}
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD KOSONGAN";
			$message = urlencode(
					"".$title_name." \n".
					"Date: ".$nowdate." \n".
					"Start Time: ".$nowtime." \n".
					"End Time: ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_muatan($userid="", $orderby="", $othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_muatan_all";
			
		}else{
			$report_type = "statistics_muatan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		$selected_km = array("KM 5,","KM 5.5,","KM 6,","KM 6.5,","KM 7,","KM 7.5,","KM 8,","KM 8.5,","KM 9,","KM 9.5,","KM 10,","KM 10.5,");
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("street_name", $orderby);
		$this->db->group_by("street_name");
		$this->db->select("street_name,street_creator,street_order,user_id,user_name,user_company,user_dblive");
		$this->db->where("street_creator", $userid);
		$this->db->where("street_type", 1);
		$this->db->where_in("street_name", $selected_km);
		$this->db->join("user", "street_creator = user_id", "left outer");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
       
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowstreet);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowstreet[$x]->street_name, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowstreet[$x]->user_name);
			$company_username = $rowstreet[$x]->user_company;
			$user_dblive = $rowstreet[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowstreet[$x]->user_id);
					$this->dbtrans->where("autoreport_vehicle_no",$rowstreet[$x]->street_name);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowstreet[$x]->street_name);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "muatan";
								$km_name = str_replace(",", "", $rowstreet[$x]->street_name);
								$location_report_vehicle_user_id = $rowstreet[$x]->user_id;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = $km_name;
								
								$data_speed = $this->get_avg_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								//$location_report_countspeed10 = $this->get_count_speed_min10($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								//$location_report_countspeed_nol = $this->get_count_speed_nol($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								
								//$data_off = $this->get_count_dataoff_bydate($sdate,$edate,$km_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								//$ex_data_off = explode("|",$data_off);
								
								//$location_report_count_off = $ex_data_off[1];
								//$location_report_duration_off = $ex_data_off[0];
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = $location_report_avg_speed;
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								//$datainsert["location_report_countspeed10"] = $location_report_countspeed10;
								//$datainsert["location_report_countspeed_nol"] = $location_report_countspeed_nol;
								//$datainsert["location_report_count_off"] = $location_report_count_off;
								//$datainsert["location_report_duration_off"] = $location_report_duration_off;
								
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;
								$datainsert["location_report_order"] = $rowstreet[$x]->street_order;
								
								if($location_report_totaldata > 0){
									$this->dbtrans->insert($dbtable,$datainsert);
									printf("INSERT OK \r\n");
									
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_device"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_no"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_user_id"] = $rowstreet[$x]->user_id;
									$data_insert["autoreport_company"] = $rowstreet[$x]->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
										
								}else{
									printf("NO DATA LOCATION \r\n");
								}
								
					}
						
		}
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD MUATAN";
			$message = urlencode(
					"".$title_name." \n".
					"Date: ".$nowdate." \n".
					"Start Time: ".$nowtime." \n".
					"End Time: ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_kosongan_rambu($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT STATISTICS BY GEOFENCE RAMBU >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
		if($othertype == "all"){
			$report_type = "statistics_kosongan_rambu_all";
			
		}else{
			$report_type = "statistics_kosongan_rambu";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->select("user_id,user_name,user_company,user_dblive");
		$this->db->where("user_id", $userid);
		$quser = $this->db->get("user");
        $rowuser = $quser->row();
		if(count($rowuser)>0 ){
			//get geofence dblive 
			$rowsgeofence = $this->getGeofenceDBlive_byUser($rowuser->user_id,$rowuser->user_dblive);
		}else{
			return;
		}
		
		$total_process = count($rowsgeofence);
		
		//print_r($rowsgeofence);exit();
		
		printf("TOTAL PROSES GEOFENCE : %s \r\n",$total_process);
        printf("============================================ \r\n");
		
		
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowsgeofence);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowsgeofence[$x]->geofence_name, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowuser->user_name);
			$company_username = $rowuser->user_company;
			$user_dblive = $rowuser->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowuser->user_id);
					$this->dbtrans->where("autoreport_vehicle_no",$rowsgeofence[$x]->geofence_name);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowsgeofence[$x]->geofence_name);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "kosongan";
								$rambu_name = $rowsgeofence[$x]->geofence_name;
								$location_report_vehicle_user_id = $rowuser->user_id;
								$location_report_type = 0;
								$location_report_limit_speed = $rowsgeofence[$x]->geofence_speed_alias; 
								
								$location_report_jalur = $jalur;
								$location_report_location = $rambu_name;
								//$location_report_geofence = $rambu_name;
								
								$data_speed = $this->get_avg_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								$location_report_countspeed10 = $this->get_count_speed_min10_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_countspeed_nol = $this->get_count_speed_nol_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								
								$data_off = $this->get_count_dataoff_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_off);
								
								$location_report_count_off = $data_off[1];
								$location_report_duration_off = $data_off[0];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_limit_speed"] = $location_report_limit_speed;
								$datainsert["location_report_avg_speed"] = $location_report_avg_speed;
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_countspeed10"] = $location_report_countspeed10;
								$datainsert["location_report_countspeed_nol"] = $location_report_countspeed_nol;
								$datainsert["location_report_count_off"] = $location_report_count_off;
								$datainsert["location_report_duration_off"] = $location_report_duration_off;
								
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;
								//$datainsert["location_report_order"] = $rowstreet[$x]->street_order;
								
								if($location_report_totaldata > 0){
									$this->dbtrans->insert($dbtable,$datainsert);
									printf("INSERT OK \r\n");
									
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_vehicle_device"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_vehicle_no"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_user_id"] = $rowuser->user_id;
									$data_insert["autoreport_company"] = $rowuser->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
										
								}else{
									printf("NO DATA GEOFENCE \r\n");
								}
								
					}
						
		}
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_muatan_rambu($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '3G');
        printf("PROSES AUTO REPORT STATISTICS BY GEOFENCE RAMBU >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		
		if($othertype == "all"){
			$report_type = "statistics_muatan_rambu_all";
			
		}else{
			$report_type = "statistics_muatan_rambu";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->select("user_id,user_name,user_company,user_dblive");
		$this->db->where("user_id", $userid);
		$quser = $this->db->get("user");
        $rowuser = $quser->row();
		if(count($rowuser)>0 ){
			//get geofence dblive 
			$rowsgeofence = $this->getGeofenceDBlive_byUser($rowuser->user_id,$rowuser->user_dblive);
		}else{
			return;
		}
		
		$total_process = count($rowsgeofence);
		
		//print_r($rowsgeofence);exit();
		
		printf("TOTAL PROSES GEOFENCE : %s \r\n",$total_process);
        printf("============================================ \r\n");
		
		
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowsgeofence);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowsgeofence[$x]->geofence_name, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowuser->user_name);
			$company_username = $rowuser->user_company;
			$user_dblive = $rowuser->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowuser->user_id);
					$this->dbtrans->where("autoreport_vehicle_no",$rowsgeofence[$x]->geofence_name);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowsgeofence[$x]->geofence_name);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "muatan";
								$rambu_name = $rowsgeofence[$x]->geofence_name;
								$location_report_vehicle_user_id = $rowuser->user_id;
								$location_report_type = 0;
								$location_report_limit_speed = $rowsgeofence[$x]->geofence_speed_muatan_alias; 
								
								$location_report_jalur = $jalur;
								$location_report_location = $rambu_name;
								//$location_report_geofence = $rambu_name;
								
								$data_speed = $this->get_avg_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								$location_report_countspeed10 = $this->get_count_speed_min10_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_countspeed_nol = $this->get_count_speed_nol_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								
								$data_off = $this->get_count_dataoff_bydate_rambu($sdate,$edate,$rambu_name,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_off);
								
								$location_report_count_off = $data_off[1];
								$location_report_duration_off = $data_off[0];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_limit_speed"] = $location_report_limit_speed;
								$datainsert["location_report_avg_speed"] = $location_report_avg_speed;
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_countspeed10"] = $location_report_countspeed10;
								$datainsert["location_report_countspeed_nol"] = $location_report_countspeed_nol;
								$datainsert["location_report_count_off"] = $location_report_count_off;
								$datainsert["location_report_duration_off"] = $location_report_duration_off;
								
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;
								//$datainsert["location_report_order"] = $rowstreet[$x]->street_order;
								
								if($location_report_totaldata > 0){
									$this->dbtrans->insert($dbtable,$datainsert);
									printf("INSERT OK \r\n");
									
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_vehicle_device"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_vehicle_no"] = $rowsgeofence[$x]->geofence_name;
									$data_insert["autoreport_user_id"] = $rowuser->user_id;
									$data_insert["autoreport_company"] = $rowuser->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
										
								}else{
									printf("NO DATA GEOFENCE \r\n");
								}
								
					}
						
		}
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_kosongan_versi1($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_kosongan_v1";
			
		}else{
			$report_type = "statistics_kosongan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi1 = $this->getAllStreetVersi1($userid);
		$street_versi1_non = $this->getAllStreetVersi1_non($userid);
						
								$jalur = "kosongan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 1 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								$location_report_location = "Versi 1 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V1 KOSONGAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_muatan_versi1($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_muatan_v1";
			
		}else{
			$report_type = "statistics_muatan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi1 = $this->getAllStreetVersi1($userid);
		$street_versi1_non = $this->getAllStreetVersi1_non($userid);
						
								$jalur = "muatan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 1 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi1,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								$location_report_location = "Versi 1 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi1_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V1 MUATAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_kosongan_versi2($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_kosongan_v2";
			
		}else{
			$report_type = "statistics_kosongan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi2 = $this->getAllStreetVersi2($userid);
		$street_versi2_non = $this->getAllStreetVersi2_non($userid);
						
								$jalur = "kosongan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 2 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								$location_report_location = "Versi 2 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V2 KOSONGAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_muatan_versi2($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_muatan_v2";
			
		}else{
			$report_type = "statistics_muatan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi2 = $this->getAllStreetVersi2($userid);
		$street_versi2_non = $this->getAllStreetVersi2_non($userid);
						
								$jalur = "muatan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 2 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								$location_report_location = "Versi 2 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V2 MUATAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_muatan_versi3($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_muatan_v3";
			
		}else{
			$report_type = "statistics_muatan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi2 = $this->getAllStreetVersi3($userid);
		//$street_versi2_non = $this->getAllStreetVersi2_non($userid);
						
								$jalur = "muatan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 3 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								/*$location_report_location = "Versi 2 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								*/
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V3 MUATAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function statistics_kosongan_versi3($userid="", $orderby="",$othertype="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '4G');
        printf("PROSES AUTO REPORT STATISTICS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$nowtime = date("Y-m-d H:i:s");
		
		if($othertype == "all"){
			$report_type = "statistics_kosongan_v3";
			
		}else{
			$report_type = "statistics_kosongan";
		}
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "statistics_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$this->dbtrans = $this->load->database("tensor_report",true); 
		
        $street_versi2 = $this->getAllStreetVersi3($userid);
		//$street_versi2_non = $this->getAllStreetVersi2_non($userid);
						
								$jalur = "kosongan";
								
								$location_report_vehicle_user_id = $userid;
								$location_report_type = 0;
								
								$location_report_jalur = $jalur;
								$location_report_location = "Versi 3 Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								
								// NON CHIPSEAL
								/*$location_report_location = "Versi 2 Non Chipseal";
								
								$data_speed = $this->get_avg_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_speed = explode("|",$data_speed);
								
								$location_report_avg_speed = $ex_data_speed[0];
								$location_report_min_speed = $this->get_min_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_max_speed = $this->get_max_speed_bydate_allkm($sdate,$edate,$street_versi2_non,$jalur,$location_report_vehicle_user_id,$dbtable_source);
								$location_report_totaldata = $ex_data_speed[1];
								
								$location_report_date = $startdate;
								$location_report_date_end = $enddate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_jalur"] = $location_report_jalur;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_avg_speed"] = round($location_report_avg_speed,2,PHP_ROUND_HALF_UP);
								$datainsert["location_report_min_speed"] = $location_report_min_speed;
								$datainsert["location_report_max_speed"] = $location_report_max_speed;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_date_end"] = $location_report_date_end;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								$datainsert["location_report_all"] = $othertype;

								$this->dbtrans->insert($dbtable,$datainsert);
								printf("INSERT OK \r\n");
								
								*/
								
								
			
				
		
		$finishtime = date("Y-m-d H:i:s");
		
		//send telegram
		$title_name = "STATISTICS SPD V3 KOSONGAN";
			$message = urlencode(
					"".$title_name." \n".
					"Start Date: ".$sdate." \n".
					"End Date: ".$edate." \n".
					"Processed: ".$startproses." to ".$finishtime." \n"
				);
		sleep(2);		
		$sendtelegram = $this->telegram_direct("-438080733",$message); //api alert
		printf("===SENT TELEGRAM OK\r\n");
				
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function getAllStreetVersi1($userid){
		
		
		$feature = array();
		$selected_km = array("KM 5,","KM 5.5,","KM 6,","KM 6.5,","KM 7,","KM 7.5,","KM 8,","KM 8.5,","KM 9,","KM 9.5,","KM 10,");
		$this->dbmaster = $this->load->database("default",true); 
		$this->dbmaster->select("street_name,street_alias,street_type");
		$this->dbmaster->order_by("street_name","asc");
		$this->dbmaster->group_by("street_name");
		$this->dbmaster->where("street_creator", $userid);
		$this->dbmaster->where_in("street_name", $selected_km);
		$this->dbmaster->from("street");
        $q = $this->dbmaster->get();
        $rows = $q->result();
		$total = count($rows);
		for($x=0;$x<$total;$x++)
		{
			$street_name = str_replace(",", "", $rows[$x]->street_name);
			$feature[$x] = $street_name;
			
		}
		
		//print_r($feature);exit();
		$result = $feature;
		
		return $result;
	}
	
	function getAllStreetVersi1_non($userid){
		
		
		$feature = array();
		$selected_km_non = array("KM 15,","KM 15.5,","KM 16,","KM 16.5,","KM 17,","KM 17.5,","KM 18,","KM 18.5,","KM 19,","KM 19.5,","KM 20,");
		$this->dbmaster = $this->load->database("default",true); 
		$this->dbmaster->select("street_name,street_alias,street_type");
		$this->dbmaster->order_by("street_name","asc");
		$this->dbmaster->group_by("street_name");
		$this->dbmaster->where("street_creator", $userid);
		$this->dbmaster->where_in("street_name", $selected_km_non);
		$this->dbmaster->from("street");
        $q = $this->dbmaster->get();
        $rows = $q->result();
		$total = count($rows);
		for($x=0;$x<$total;$x++)
		{
			$street_name = str_replace(",", "", $rows[$x]->street_name);
			$feature[$x] = $street_name;
			
		}
		
		//print_r($feature);exit();
		$result = $feature;
		
		return $result;
	}
	
	function getAllStreetVersi2($userid){
		
		
		$feature = array();
		$selected_km = array("KM 8,","KM 8.5,","KM 9,","KM 9.5,","KM 10,");
		$this->dbmaster = $this->load->database("default",true); 
		$this->dbmaster->select("street_name,street_alias,street_type");
		$this->dbmaster->order_by("street_name","asc");
		$this->dbmaster->group_by("street_name");
		$this->dbmaster->where("street_creator", $userid);
		$this->dbmaster->where_in("street_name", $selected_km);
		$this->dbmaster->from("street");
        $q = $this->dbmaster->get();
        $rows = $q->result();
		$total = count($rows);
		for($x=0;$x<$total;$x++)
		{
			$street_name = str_replace(",", "", $rows[$x]->street_name);
			$feature[$x] = $street_name;
			
		}
		
		//print_r($feature);exit();
		$result = $feature;
		
		return $result;
	}
	
	function getAllStreetVersi2_non($userid){
		
		
		$feature = array();
		$selected_km_non = array("KM 17,","KM 17.5,","KM 18,","KM 18.5,","KM 19,");
		$this->dbmaster = $this->load->database("default",true); 
		$this->dbmaster->select("street_name,street_alias,street_type");
		$this->dbmaster->order_by("street_name","asc");
		$this->dbmaster->group_by("street_name");
		$this->dbmaster->where("street_creator", $userid);
		$this->dbmaster->where_in("street_name", $selected_km_non);
		$this->dbmaster->from("street");
        $q = $this->dbmaster->get();
        $rows = $q->result();
		$total = count($rows);
		for($x=0;$x<$total;$x++)
		{
			$street_name = str_replace(",", "", $rows[$x]->street_name);
			$feature[$x] = $street_name;
			
		}
		
		//print_r($feature);exit();
		$result = $feature;
		
		return $result;
	}
	
	function getAllStreetVersi3($userid){
		
		
		$feature = array();
		$selected_km = array("KM 5,","KM 5.5,","KM 6,","KM 6.5,","KM 7,");
		$this->dbmaster = $this->load->database("default",true); 
		$this->dbmaster->select("street_name,street_alias,street_type");
		$this->dbmaster->order_by("street_name","asc");
		$this->dbmaster->group_by("street_name");
		$this->dbmaster->where("street_creator", $userid);
		$this->dbmaster->where_in("street_name", $selected_km);
		$this->dbmaster->from("street");
        $q = $this->dbmaster->get();
        $rows = $q->result();
		$total = count($rows);
		for($x=0;$x<$total;$x++)
		{
			$street_name = str_replace(",", "", $rows[$x]->street_name);
			$feature[$x] = $street_name;
			
		}
		
		//print_r($feature);exit();
		$result = $feature;
		
		return $result;
	}
	
	
	function fuel_km_muatan($userid="", $orderby="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT FUEL CONS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$report_type = "fuel_muatan";
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "fuel_km_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$fuel_vehicle = array("867717046701026@VT200","860294046417125@VT200","867717046702065@VT200");
		
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("vehicle_no", $orderby);
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where_in("vehicle_device", $fuel_vehicle);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
		$q = $this->db->get("vehicle");
        $rowsvehicle = $q->result();
       
        $total_process = count($rowsvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process); 
        printf("============================================ \r\n");
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowsvehicle);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowsvehicle[$x]->vehicle_no, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowsvehicle[$x]->user_name);
			$company_username = $rowsvehicle[$x]->user_company;
			$user_dblive = $rowsvehicle[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowsvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowsvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowsvehicle[$x]->vehicle_no);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "muatan";
								$fuel_report_vehicle_user_id = $rowsvehicle[$x]->vehicle_user_id;
								$fuel_report_vehicle_id = $rowsvehicle[$x]->vehicle_id;
								$fuel_report_vehicle_device = $rowsvehicle[$x]->vehicle_device;
								$fuel_report_vehicle_no = $rowsvehicle[$x]->vehicle_no;
								$fuel_report_vehicle_name = $rowsvehicle[$x]->vehicle_name;
								$fuel_report_vehicle_type = $rowsvehicle[$x]->vehicle_type;
								$fuel_report_vehicle_company = $rowsvehicle[$x]->vehicle_company;
								$fuel_report_arah = $jalur;
								
								$ex_device = explode("@",$rowsvehicle[$x]->vehicle_device);
								$imei_device = $ex_device[0];
								
								$driverdata = $this->getdriverByIdButton_alarm_bysdate($imei_device,$user_dblive,$sdate);
								$ex_driver = explode("-",$driverdata);
								$fuel_report_driver = $ex_driver[0];
								$fuel_report_driver_name = strtoupper($ex_driver[1]);
								
								//get all street KM 
								$data_street = $this->get_street_bycreator($fuel_report_vehicle_user_id);
								$total_street = count($data_street); 
								if($total_street > 0){
									$data_fuel_km = "";
									for($i=0;$i<$total_street;$i++)
									{
										$km_name = str_replace(",", "", $data_street[$i]->street_name);
										printf("PROSES STREET : %s  \r\n", $km_name);
										 
										$data_fuel_km = $this->get_fuel_bykm($fuel_report_vehicle_id,$sdate,$edate,$fuel_report_arah,$km_name,$dbtable_source);
										$total_data_fuel_km = count($data_fuel_km);
										if($total_data_fuel_km > 0)
										{
											
											$fuel_report_time = date("Y-m-d H:i:s", strtotime($data_fuel_km->location_report_gps_time));
											$fuel_report_location = $data_fuel_km->location_report_location;
											$fuel_report_geofence = $data_fuel_km->location_report_geofence_name;
											$fuel_report_coordinate = $data_fuel_km->location_report_coordinate;
											$fuel_report_value = $data_fuel_km->location_report_fuel_data;
										
											
											
											unset($datainsert);
											$datainsert["fuel_report_vehicle_user_id"] = $fuel_report_vehicle_user_id;
											$datainsert["fuel_report_vehicle_id"] = $fuel_report_vehicle_id;
											$datainsert["fuel_report_vehicle_device"] = $fuel_report_vehicle_device;
											$datainsert["fuel_report_vehicle_no"] = $fuel_report_vehicle_no;
											$datainsert["fuel_report_vehicle_name"] = $fuel_report_vehicle_name;
											$datainsert["fuel_report_vehicle_type"] = $fuel_report_vehicle_type;
											$datainsert["fuel_report_vehicle_company"] = $fuel_report_vehicle_company;
											$datainsert["fuel_report_arah"] = $fuel_report_arah;
											$datainsert["fuel_report_time"] = $fuel_report_time;
											$datainsert["fuel_report_location"] = $fuel_report_location;
											$datainsert["fuel_report_geofence"] = $fuel_report_geofence;
											$datainsert["fuel_report_coordinate"] = $fuel_report_coordinate;
											$datainsert["fuel_report_driver"] = $fuel_report_driver;
											$datainsert["fuel_report_driver_name"] = $fuel_report_driver_name;
											$datainsert["fuel_report_value"] = $fuel_report_value;
											
											$this->dbtrans->insert($dbtable,$datainsert);
											printf("INSERT OK \r\n");
											
										}
										else
										{
											printf(".");//printf("NO DATA LOCATION \r\n");
										}
										
										
									}
								}
								
								
								
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowsvehicle[$x]->vehicle_id;
									$data_insert["autoreport_vehicle_device"] = $rowsvehicle[$x]->vehicle_device;
									$data_insert["autoreport_vehicle_no"] = $rowsvehicle[$x]->vehicle_no;
									$data_insert["autoreport_user_id"] = $rowsvehicle[$x]->user_id;
									$data_insert["autoreport_company"] = $rowsvehicle[$x]->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
					}
						
		}
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function fuel_km_kosongan($userid="", $orderby="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT FUEL CONS BY LOCATION >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$report_type = "fuel_kosongan";
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "fuel_km_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		
		$fuel_vehicle = array("867717046701026@VT200","860294046417125@VT200","867717046702065@VT200");
		
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("vehicle_no", $orderby);
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$this->db->where_in("vehicle_device", $fuel_vehicle);
		$this->db->join("user", "vehicle_user_id = user_id", "left outer");
		$q = $this->db->get("vehicle");
        $rowsvehicle = $q->result();
       
        $total_process = count($rowsvehicle);
        printf("TOTAL PROSES VEHICLE : %s \r\n",$total_process); 
        printf("============================================ \r\n");
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowsvehicle);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowsvehicle[$x]->vehicle_no, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowsvehicle[$x]->user_name);
			$company_username = $rowsvehicle[$x]->user_company;
			$user_dblive = $rowsvehicle[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowsvehicle[$x]->vehicle_user_id);
					$this->dbtrans->where("autoreport_vehicle_id",$rowsvehicle[$x]->vehicle_id);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowsvehicle[$x]->vehicle_no);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
						
								$jalur = "kosongan";
								$fuel_report_vehicle_user_id = $rowsvehicle[$x]->vehicle_user_id;
								$fuel_report_vehicle_id = $rowsvehicle[$x]->vehicle_id;
								$fuel_report_vehicle_device = $rowsvehicle[$x]->vehicle_device;
								$fuel_report_vehicle_no = $rowsvehicle[$x]->vehicle_no;
								$fuel_report_vehicle_name = $rowsvehicle[$x]->vehicle_name;
								$fuel_report_vehicle_type = $rowsvehicle[$x]->vehicle_type;
								$fuel_report_vehicle_company = $rowsvehicle[$x]->vehicle_company;
								$fuel_report_arah = $jalur;
								
								$ex_device = explode("@",$rowsvehicle[$x]->vehicle_device);
								$imei_device = $ex_device[0];
								
								/* $driverdata = $this->getdriverByIdButton_alarm_bysdate($imei_device,$user_dblive,$sdate);
								$ex_driver = explode("-",$driverdata);
								$fuel_report_driver = $ex_driver[0];
								$fuel_report_driver_name = strtoupper($ex_driver[1]); */
								
								$fuel_report_driver_name = "-";
								
								//get all street KM 
								$data_street = $this->get_street_bycreator($fuel_report_vehicle_user_id);
								$total_street = count($data_street); 
								if($total_street > 0){
									$data_fuel_km = "";
									for($i=0;$i<$total_street;$i++)
									{
										$km_name = str_replace(",", "", $data_street[$i]->street_name);
										printf("PROSES STREET : %s  \r\n", $km_name);
										 
										$data_fuel_km = $this->get_fuel_bykm($fuel_report_vehicle_id,$sdate,$edate,$fuel_report_arah,$km_name,$dbtable_source);
										$total_data_fuel_km = count($data_fuel_km);
										if($total_data_fuel_km > 0)
										{
											
											$fuel_report_time = date("Y-m-d H:i:s", strtotime($data_fuel_km->location_report_gps_time));
											$fuel_report_location = $data_fuel_km->location_report_location;
											$fuel_report_geofence = $data_fuel_km->location_report_geofence_name;
											$fuel_report_coordinate = $data_fuel_km->location_report_coordinate;
											$fuel_report_value = $data_fuel_km->location_report_fuel_data;
										
											
											
											unset($datainsert);
											$datainsert["fuel_report_vehicle_user_id"] = $fuel_report_vehicle_user_id;
											$datainsert["fuel_report_vehicle_id"] = $fuel_report_vehicle_id;
											$datainsert["fuel_report_vehicle_device"] = $fuel_report_vehicle_device;
											$datainsert["fuel_report_vehicle_no"] = $fuel_report_vehicle_no;
											$datainsert["fuel_report_vehicle_name"] = $fuel_report_vehicle_name;
											$datainsert["fuel_report_vehicle_type"] = $fuel_report_vehicle_type;
											$datainsert["fuel_report_vehicle_company"] = $fuel_report_vehicle_company;
											$datainsert["fuel_report_arah"] = $fuel_report_arah;
											$datainsert["fuel_report_time"] = $fuel_report_time;
											$datainsert["fuel_report_location"] = $fuel_report_location;
											$datainsert["fuel_report_geofence"] = $fuel_report_geofence;
											$datainsert["fuel_report_coordinate"] = $fuel_report_coordinate;
											$datainsert["fuel_report_driver"] = $fuel_report_driver;
											$datainsert["fuel_report_driver_name"] = $fuel_report_driver_name;
											$datainsert["fuel_report_value"] = $fuel_report_value;
											
											$this->dbtrans->insert($dbtable,$datainsert);
											printf("INSERT OK \r\n");
											
										}
										else
										{
											printf(".");//printf("NO DATA LOCATION \r\n");
										}
										
										
									}
								}
								
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowsvehicle[$x]->vehicle_id;
									$data_insert["autoreport_vehicle_device"] = $rowsvehicle[$x]->vehicle_device;
									$data_insert["autoreport_vehicle_no"] = $rowsvehicle[$x]->vehicle_no;
									$data_insert["autoreport_user_id"] = $rowsvehicle[$x]->user_id;
									$data_insert["autoreport_company"] = $rowsvehicle[$x]->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
					}
						
		}
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function signal($userid="", $orderby="", $startdate = "", $enddate = ""){
		
		ini_set('memory_limit', '2G');
        printf("PROSES AUTO REPORT STATISTICS BY SIGNAL >> START \r\n");
        $startproses = date("Y-m-d H:i:s");
		$name = "";
		$host = "";
		$report_type = "signal";
		
       
        $process_date = date("Y-m-d H:i:s");
		$start_time = date("Y-m-d H:i:s");
		$report_source = "location_";
		$report = "signal_";
		$report_location = "location_";
        
        if ($startdate == "") {
            $startdate = date("Y-m-d 00:00:00", strtotime("yesterday"));
            $datefilename = date("Ymd", strtotime("yesterday"));
			$month = date("F", strtotime("yesterday"));
			$year = date("Y", strtotime("yesterday"));
        }
        
        if ($startdate != "")
        {
            $datefilename = date("Ymd", strtotime($startdate));     
            $startdate = date("Y-m-d 00:00:00", strtotime($startdate));
			$month = date("F", strtotime($startdate));
			$year = date("Y", strtotime($startdate));
        }
        
        if ($enddate != "")
        {
            $enddate = date("Y-m-d 23:59:59", strtotime($enddate));
        }
        
        if ($enddate == "") {
            $enddate = date("Y-m-d 23:59:59", strtotime("yesterday"));
        }
		
		if ($orderby == "") {
            $orderby = "asc";
        }
		
		switch ($month)
		{
			case "January":
            $dbtable = $report."januari_".$year;
			$dbtable_source = $report_source."januari_".$year;
			$dbtable_location = $report_location."januari_".$year;
			break;
			case "February":
            $dbtable = $report."februari_".$year;
			$dbtable_source = $report_source."februari_".$year;
			$dbtable_location = $report_location."februari_".$year;
			break;
			case "March":
            $dbtable = $report."maret_".$year;
			$dbtable_source = $report_source."maret_".$year;
			$dbtable_location = $report_location."maret_".$year;
			break;
			case "April":
            $dbtable = $report."april_".$year;
			$dbtable_source = $report_source."april_".$year;
			$dbtable_location = $report_location."april_".$year;
			break;
			case "May":
            $dbtable = $report."mei_".$year;
			$dbtable_source = $report_source."mei_".$year;
			$dbtable_location = $report_location."mei_".$year;
			break;
			case "June":
            $dbtable = $report."juni_".$year;
			$dbtable_source = $report_source."juni_".$year;
			$dbtable_location = $report_location."juni_".$year;
			break;
			case "July":
            $dbtable = $report."juli_".$year;
			$dbtable_source = $report_source."juli_".$year;
			$dbtable_location = $report_location."juli_".$year;
			break;
			case "August":
            $dbtable = $report."agustus_".$year;
			$dbtable_source = $report_source."agustus_".$year;
			$dbtable_location = $report_location."agustus_".$year;
			break;
			case "September":
            $dbtable = $report."september_".$year;
			$dbtable_source = $report_source."september_".$year;
			$dbtable_location = $report_location."september_".$year;
			break;
			case "October":
            $dbtable = $report."oktober_".$year;
			$dbtable_source = $report_source."oktober_".$year;
			$dbtable_location = $report_location."oktober_".$year;
			break;
			case "November":
            $dbtable = $report."november_".$year;
			$dbtable_source = $report_source."november_".$year;
			$dbtable_location = $report_location."november_".$year;
			break;
			case "December":
            $dbtable = $report."desember_".$year;
			$dbtable_source = $report_source."desember_".$year;
			$dbtable_location = $report_location."desember_".$year;
			break;
		}
        
        $sdate = date("Y-m-d H:i:s", strtotime($startdate)); //wib
        $edate = date("Y-m-d H:i:s", strtotime($enddate));  //wib
        $z =0;
		printf("START DATE - END DATE : %s %s %s \r\n", $sdate, $edate, $report_type);
		$this->db->order_by("street_name", $orderby);
		$this->db->group_by("street_name");
		$this->db->select("street_name,street_creator,user_id,user_name,user_company,user_dblive");
		$this->db->where("street_creator", $userid);
		$this->db->like("street_name", "KM");
		//$this->db->where("street_name", "KM 87,");
		
		//$this->db->limit(10);
		$this->db->join("user", "street_creator = user_id", "left outer");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
       
        $total_process = count($rowstreet);
        printf("TOTAL PROSES STREET : %s \r\n",$total_process);
        printf("============================================ \r\n");
       
		$this->dbtrans = $this->load->database("tensor_report",true); 
        for($x=0;$x<count($rowstreet);$x++)
		{
		
			printf("PROSES STREET : %s %s %s %s (%d/%d) \r\n",$rowstreet[$x]->street_name, $sdate, $edate, $report_type, ++$z, $total_process);
			$cron_username = strtoupper($rowstreet[$x]->user_name);
			$company_username = $rowstreet[$x]->user_company;
			$user_dblive = $rowstreet[$x]->user_dblive;
            unset($data_insert);
            	
                    //cek apakah sudah pernah ada filenya
                    $this->dbtrans->select("autoreport_vehicle_id");
                    $this->dbtrans->where("autoreport_user_id",$rowstreet[$x]->user_id);
					$this->dbtrans->where("autoreport_vehicle_no",$rowstreet[$x]->street_name);
                    $this->dbtrans->where("autoreport_data_startdate",$startdate);
					$this->dbtrans->where("autoreport_type",$report_type);
					$this->dbtrans->limit(1);
                    $qrpt = $this->dbtrans->get("autoreport_new");
                    $rrpt = $qrpt->row();
                    
                    if (count($rrpt) > 0)
                    {
                        printf("VEHICLE %s SUDAH PERNAH DI PROSES, HAPUS DULU DATA SEBELUMNYA \r\n", $rowstreet[$x]->street_name);     
                        printf("------------------------------------------------------------- \r\n");
                    }
                    else
                    {
								$km_name = str_replace(",", "", $rowstreet[$x]->street_name);
								$location_report_vehicle_user_id = $rowstreet[$x]->user_id;
								$location_report_type = 0;
								$location_report_location = $km_name;
								
								$location_report_level1 = $this->get_totalsignal_level_bydate($sdate,$edate,$km_name,$location_report_vehicle_user_id,0,10,$dbtable_source);
								$location_report_level2 = $this->get_totalsignal_level_bydate($sdate,$edate,$km_name,$location_report_vehicle_user_id,11,20,$dbtable_source);
								$location_report_level3 = $this->get_totalsignal_level_bydate($sdate,$edate,$km_name,$location_report_vehicle_user_id,21,50,$dbtable_source);
								
								$data_signal = $this->get_avgsignal_bydate($sdate,$edate,$km_name,$location_report_vehicle_user_id,$dbtable_source);
								$ex_data_signal = explode("|",$data_signal);
								$location_report_avg_signal = $ex_data_signal[0];
								
								if($location_report_avg_signal >= 0 && $location_report_avg_signal <= 10){
									$location_report_avg_level = 1;
								}else if($location_report_avg_signal >= 11 && $location_report_avg_signal <= 20){
									$location_report_avg_level = 2;
								}else if($location_report_avg_signal >= 20 && $location_report_avg_signal <= 31){
									$location_report_avg_level = 3;
								}else{
									$location_report_avg_level = "-";
								}
								
								$location_report_totaldata = $ex_data_signal[1];
								$location_report_date = $startdate;
								$location_report_shour = date("H:i:s", strtotime("00:00:00"));
								$location_report_ehour = date("H:i:s", strtotime("23:59:59"));
								
								unset($datainsert);
								$datainsert["location_report_vehicle_user_id"] = $location_report_vehicle_user_id;
								$datainsert["location_report_type"] = $location_report_type;
								$datainsert["location_report_location"] = $location_report_location;
								$datainsert["location_report_level1"] = $location_report_level1;
								$datainsert["location_report_level2"] = $location_report_level2;
								$datainsert["location_report_level3"] = $location_report_level3;
								$datainsert["location_report_avg_signal"] = $location_report_avg_signal;
								$datainsert["location_report_avg_level"] = $location_report_avg_level;
								$datainsert["location_report_totaldata"] = $location_report_totaldata;
								//$datainsert["location_report_countsignal10"] = $location_report_countsignal10;
								$datainsert["location_report_date"] = $location_report_date;
								$datainsert["location_report_shour"] = $location_report_shour;
								$datainsert["location_report_ehour"] = $location_report_ehour;
								
								if($location_report_totaldata > 0){
									$this->dbtrans->insert($dbtable,$datainsert);
									printf("INSERT OK \r\n");
									
									//printf("PREPARE INSERT TO TBL AUTOREPORT \r\n");
									$data_insert["autoreport_vehicle_id"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_device"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_vehicle_no"] = $rowstreet[$x]->street_name;
									$data_insert["autoreport_user_id"] = $rowstreet[$x]->user_id;
									$data_insert["autoreport_company"] = $rowstreet[$x]->user_company;
									$data_insert["autoreport_data_startdate"] = $startdate;
									$data_insert["autoreport_data_enddate"] = $enddate;
									$data_insert["autoreport_type"] = $report_type;
									$data_insert["autoreport_process_date"] = $process_date;
									$data_insert["autoreport_insert_db"] = date("Y-m-d H:i:s");
									$this->dbtrans->insert("autoreport_new",$data_insert);
										
								}else{
									printf("NO DATA LOCATION \r\n");
								}
								
					}
						
		}
				
		
		
		printf("DELETE CACHE HISTORY \r\n");
		//$this->dblive->cache_delete_all();
		$this->dbtrans->cache_delete_all();
	}
	
	function getvehicle($vehicle_device){
	
		$this->db = $this->load->database("default",true);
		$this->db->select("vehicle_id,vehicle_device,vehicle_type,vehicle_name,vehicle_no,vehicle_company,vehicle_dbname_live,vehicle_info");	
		$this->db->order_by("vehicle_id", "asc");
		$this->db->where("vehicle_status <>", 3);
		$this->db->where("vehicle_device", $vehicle_device);
		$q = $this->db->get("vehicle");
		$rows = $q->row();
		$total_rows = count($rows);
		
		if($total_rows > 0){
			$data_vehicle = $rows;
			return $data_vehicle;
		}else{
			return false;
		}
		
	}
	
	function getdriver($driver_vehicle) {

		$this->dbtransporter = $this->load->database('transporter',true);
		$this->dbtransporter->select("driver_id,driver_name");
		$this->dbtransporter->from("driver");
		$this->dbtransporter->order_by("driver_update_date","desc");
		$this->dbtransporter->where("driver_vehicle", $driver_vehicle);
		$this->dbtransporter->limit(1);
		$q = $this->dbtransporter->get();

		if ($q->num_rows > 0 ){
			$row = $q->row();
			$data = $row->driver_id;
			$data .= "-";
			$data .= $row->driver_name;
			return $data;
			$this->dbtransporter->close();
		}
		else {
			$this->dbtransporter->close();
			return false;
		}

	}
	
	function getdriver_byibutton($gps_name,$dblive) {

		$this->dblive = $this->load->database($dblive,true);
		$this->dblive->select("gps_name,gps_alert,gps_msg_ori");
		$this->dblive->order_by("gps_time", "desc");
		$this->dblive->where("gps_alert", "Swiping Card");
		$this->dblive->where("gps_name", $gps_name);
		$this->dblive->limit(1);
		$q = $this->db->get("gps_alert");

		if ($q->num_rows > 0){
			$row = $q->row();
			
			
			return $data;
		}
		else
		{
			return false;
		}

	}
	
	function getdriverByIdButton_alarm($gps_name,$user_dblive,$sdate,$edate) {
		
		$this->dbalert = $this->load->database($user_dblive, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","desc");
		$this->dbalert->select("gps_msg_ori");
		/* $this->dbalert->where("gps_time >=", $sdate);
        $this->dbalert->where("gps_time <=", $edate); */
		$this->dbalert->where("gps_alert", "Swiping Card"); 
		$this->dbalert->where("gps_name", $gps_name);  
		$this->dbalert->limit(1);
		$q_ori = $this->dbalert->get("gps_alert");
		$rows_ori = $q_ori->row();
		
		$ibuttonmsgoriexplode = explode(",", $rows_ori->gps_msg_ori);
		$ibutton = $ibuttonmsgoriexplode[4];
		
		$this->dbtransporter = $this->load->database('transporter',true);
		$this->dbtransporter->select("*");
		$this->dbtransporter->from("driver");
		$this->dbtransporter->order_by("driver_update_date","desc");
		$this->dbtransporter->where("driver_idcard", $ibutton);
		$this->dbtransporter->limit(1);
		$q = $this->dbtransporter->get();

		if ($q->num_rows > 0 ){
			$row = $q->row();
			$data = $row->driver_id;
			$data .= "-";
			$data .= $row->driver_name;
			return $data;
			$this->dbtransporter->close();
		}
		else {
			$this->dbtransporter->close();
			return false;
		}
	}
	
	function getdriverByIdButton_alarm_bysdate($gps_name,$user_dblive,$sdate) {
		
		$this->dbalert = $this->load->database($user_dblive, TRUE);
		$this->dbalert->group_by("gps_time");
		$this->dbalert->order_by("gps_time","desc");
		$this->dbalert->select("gps_msg_ori");
		$this->dbalert->where("gps_time <=", $sdate);
		$this->dbalert->where("gps_alert", "Swiping Card"); 
		$this->dbalert->where("gps_name", $gps_name);  
		$this->dbalert->limit(1);
		$q_ori = $this->dbalert->get("gps_alert");
		$rows_ori = $q_ori->row();
		
		$ibuttonmsgoriexplode = explode(",", $rows_ori->gps_msg_ori);
		$ibutton = $ibuttonmsgoriexplode[4];
		
		$this->dbtransporter = $this->load->database('transporter',true);
		$this->dbtransporter->select("*");
		$this->dbtransporter->from("driver");
		$this->dbtransporter->order_by("driver_update_date","desc");
		$this->dbtransporter->where("driver_idcard", $ibutton);
		$this->dbtransporter->limit(1);
		$q = $this->dbtransporter->get();

		if ($q->num_rows > 0 ){
			$row = $q->row();
			$data = $ibutton;
			$data .= "-";
			$data .= $row->driver_name;
			return $data;
			$this->dbtransporter->close();
		}
		else {
			$this->dbtransporter->close();
			return false;
		}
	}
	
	function get_jalurname($direction){
		$arah = "";
		//utara
		$ruas1 = 0;
		$ruas2 = 90;
		$ruas3 = 360-90;
								
		//selatan
		$ruas4 = 180-90;
		$ruas5 = 180+90;
		$ruas6 = 180;
								
		if($direction >= $ruas1 && $direction <= $ruas2){ //0 - 90
			$arah = "utara";
			$jalur = "kosongan"; 
		}else if($direction >= $ruas3 && $direction <= 360){ // 360-90 s/d 360
			$arah = "utara";
			$jalur = "kosongan"; 
		}else if($direction >= $ruas6 && $direction <= $ruas5){ // 180 s/d 180+90
			$arah = "selatan";
			$jalur = "muatan"; 
		}else if($direction >= $ruas4 && $direction <= $ruas6){ // 180-90 s/d 180
			$arah = "selatan";
			$jalur = "muatan"; 
		}else{
			$arah = $direction;
			$jalur = "-"; 
		}
				
		return $jalur;
	}
	
	function get_jalurname_new($direction){
		$arah = "";
						
		if($direction > 0 && $direction <= 180){ // arah ke kanan (muatan)
			$arah = "kanan";
			$jalur = "muatan"; 
		}else if($direction >= 181 && $direction <= 360){ // arah ke kiri (kosongan)
			$arah = "kiri";
			$jalur = "kosongan"; 
		}else{
			$arah = $direction;
			$jalur = ""; 
		}
		
		//printf("===Arah : %s \r\n", $arah);
				
		return $jalur;
	}
	
	function get_jalurname_new_dblive($gps_name,$user_dblive) {
		
		$this->dblive = $this->load->database($user_dblive, TRUE);
		$this->dblive->select("gps_name,vehicle_autocheck");
		$this->dblive->where("gps_name", $gps_name);  
		$this->dblive->order_by("gps_time","desc");
		$this->dblive->limit(1);
		$q_live = $this->dblive->get("gps");
		$rows_live = $q_live->row();
		if(count($rows_live)>0){
			
			$autocheck = json_decode($rows_live->vehicle_autocheck);
			if(isset($autocheck->auto_last_road)){
				$jalur = $autocheck->auto_last_road;
			}else{
				$jalur = "";
			}
		}else{
			
			$jalur = "";
		}
		
		return $jalur;
	}
	
	function get_telegramgroup_overspeed($company_id){
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
		$this->db->select("company_id,company_telegram_speed");
		$this->db->where("company_id",$company_id);
		$qcompany = $this->db->get("company");
		$rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_speed;
		}else{
			$telegram_group = 0;
		}
				
		return $telegram_group;
	}
	
	function get_telegramgroup_sos($company_id){
		//get telegram group by company
		$this->db = $this->load->database("default",TRUE);
		$this->db->select("company_id,company_telegram_sos");
		$this->db->where("company_id",$company_id);
		$qcompany = $this->db->get("company");
		$rcompany = $qcompany->row();
		if(count($rcompany)>0){
			$telegram_group = $rcompany->company_telegram_sos;
		}else{
			$telegram_group = 0;
		}
				
		return $telegram_group;
	}
	
	function get_geofence_type($geofence,$dblive){
		
		$this->db = $this->load->database($dblive,true);
		$this->db->select("geofence_id,geofence_type");	
		$this->db->order_by("geofence_id", "desc");
		$this->db->where("geofence_status ", 1);
		$this->db->where("geofence_name", $geofence);
		$q = $this->db->get("geofence");
		$rows = $q->row();
		$total_rows = count($rows);
		
		if($total_rows > 0){
			$geofence_type = $rows->geofence_type;
			return $geofence_type;
		}else{
			return false;
		}
	
	}
	
	function getGeofenceDBlive_byUser($userid,$dblive){
	
		
		$this->dblive = $this->load->database($dblive,true);
		$this->dblive->select("geofence_id,geofence_name,geofence_speed_alias,geofence_speed_muatan_alias");	
		$this->dblive->order_by("geofence_id", "asc");
		$this->dblive->where("geofence_status", 1);
		$this->dblive->where("geofence_type", "road");
		$this->dblive->where("geofence_user", $userid);
		$q = $this->dblive->get("geofence");
		$rows = $q->result();
	
		return $rows;
	}
	function telegram_direct($groupid,$message)
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        
        //$url = "http://lacak-mobil.com/telegram/telegram_directpost";
		$url = "http://admintib.buddiyanto.my.id/telegram/telegram_directpost";
        
        $data = array("id" => $groupid, "message" => $message);
        $data_string = json_encode($data);
        
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POST, true);                                                           
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                 
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);                        
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data_string)));  
        $result = curl_exec($ch);
        
        if ($result === FALSE) {
            die("Curl failed: " . curL_error($ch));
        }
        echo $result;
        echo curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
    }
	
	function telegram_direct_withlink($groupid,$message)
    {
        error_reporting(E_ALL);
        ini_set('display_errors', 1);
        
        //$url = "http://lacak-mobil.com/telegram/telegram_directpost_withlink";
		$url = "http://admintib.buddiyanto.my.id/telegram/telegram_directpost_withlink";
        
        $data = array("id" => $groupid, "message" => $message);
		// $data_string = array(
			// 'id' => $groupid,
			// 'message' => $message,
			// 'parse_mode' => 'HTML',
			
		// );
		//$query_data = array('client_id'=>$client_id,'client_secret'=>$client_secret,'refresh_token'=>$refresh_token,'grant_type'=>'refresh_token');
		
		// $numeric_prefix= '';
		// $arg_separator = '&';
		// $http_query = http_build_query ($data_string, $numeric_prefix, $arg_separator);
			
        $data_string = json_encode($data);
        
        $ch = curl_init($url);
		curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POST, true);                                                           
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                 
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);                        
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data_string)));  
        $result = curl_exec($ch);
        
        if ($result === FALSE) {
            die("Curl failed: " . curL_error($ch));
        }
        echo $result;
        echo curl_getinfo($ch, CURLINFO_HTTP_CODE);
		
        
    }
	
	function getPosition_other($longitude, $latitude)
	{
		//$api = $this->config->item('GOOGLE_MAP_API_KEY');
		$api = "AIzaSyCGr6BW7vPItrWq95DxMvL292Kf6jHNA5c"; //lacaktranslog prem
		//$georeverse = $this->gpsmodel->GeoReverse($latitude, $longitude);
		$georeverse = $this->gpsmodel->getLocation_byGeoCode($latitude, $longitude, $api);
				
		return $georeverse;
	}
	
	function getGeofence_location_other($longitude, $latitude, $vehicle_user){
		
		$this->db = $this->load->database("default", true);
		$lng = $longitude;
		$lat = $latitude;

		$sql = sprintf("
					SELECT 	*
					FROM 	%sgeofence 
					WHERE 	TRUE
							AND CONTAINS(geofence_polygon, GEOMFROMTEXT('POINT(%s %s)')) 
							AND (geofence_user = '%s' )
                            AND (geofence_status = 1)
					LIMIT 1 OFFSET 0", $this->db->dbprefix, $lng, $lat, $vehicle_user);
		$q = $this->db->query($sql);
		if ($q->num_rows() > 0)
		{			
			$row = $q->result();
            $total = $q->num_rows();
            for ($i=0;$i<$total;$i++){
            $data = $row[$i]->geofence_name;
            return $data;
            }
            
		}else
        {
            return false;
        }

	}
	
	function getGeofence_location_live($longitude, $latitude, $vehicle_dblive) {
		
		$this->db = $this->load->database($vehicle_dblive, true);
		$lng = $longitude;
		$lat = $latitude;
		$geo_name = "''";
		$sql = sprintf("
					SELECT 	geofence_name,geofence_id,geofence_speed,geofence_speed_muatan,geofence_type
					FROM 	webtracking_geofence 
					WHERE 	TRUE
							AND (geofence_name <> %s)
							AND CONTAINS(geofence_polygon, GEOMFROMTEXT('POINT(%s %s)')) 
							AND (geofence_status = 1)
					ORDER BY geofence_id DESC LIMIT 1 OFFSET 0", $geo_name, $lng, $lat);
		$q = $this->db->query($sql);
		if ($q->num_rows() > 0)
		{			
			$row = $q->row();
            /*$total = $q->num_rows();
            for ($i=0;$i<$total;$i++){
				$data = $row[$i]->geofence_name;
				$data = $row;
				return $data;
            }*/
			$data = $row;
			return $data;
			 
		}
		else
        {
			$data = false;
            return $data;
        }

	}
	
	function getGeofence_location_live_report($longitude, $latitude, $vehicle_dblive) {
		
		$this->db = $this->load->database($vehicle_dblive, true);
		$lng = $longitude;
		$lat = $latitude;
		$geo_name = "''";
		$sql = sprintf("
					SELECT 	geofence_name,geofence_id,geofence_speed,geofence_speed_muatan,geofence_type
					FROM 	webtracking_geofence 
					WHERE 	TRUE
							AND (geofence_name <> %s)
							AND CONTAINS(geofence_polygon, GEOMFROMTEXT('POINT(%s %s)')) 
							AND (geofence_status = 1)
					ORDER BY geofence_id DESC LIMIT 1 OFFSET 0", $geo_name, $lng, $lat);
		$q = $this->db->query($sql);
		if ($q->num_rows() > 0)
		{			
			$row = $q->result();
            $total = $q->num_rows();
            for ($i=0;$i<$total;$i++){
            $data = $row[$i]->geofence_name;
            return $data;
            }
			 
		}
		else
        {
			$data = false;
            return $data;
        }

	}
	
	function getDataGPS($rowvehicle, $sdate){
		
		printf("===GET DATA BY GPS : %s  \r\n",$rowvehicle->vehicle_no);
			$vehicle_device = explode("@",$rowvehicle->vehicle_device);
          
            //PORT Only
            if (isset($rowvehicle->vehicle_info))
            {
                $json = json_decode($rowvehicle->vehicle_info);
                if (isset($json->vehicle_ip) && isset($json->vehicle_port))
                {
                    
					$databases = $this->config->item('databases');
					if (isset($databases[$json->vehicle_ip][$json->vehicle_port]))
					{
						$database = $databases[$json->vehicle_ip][$json->vehicle_port];
						$table = $this->config->item("external_gpstable");
						$tableinfo = $this->config->item("external_gpsinfotable");				
						$this->dbhist = $this->load->database($database, TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					else
					{
						$table = $this->gpsmodel->getGPSTable($rowvehicle->vehicle_type);
						$tableinfo = $this->gpsmodel->getGPSInfoTable($rowvehicle->vehicle_type);
						$this->dbhist = $this->load->database("default", TRUE);
						$this->dbhist2 = $this->load->database("gpshistory",true);		
					}
					
					if ($rowvehicle->vehicle_type == "T5" || $rowvehicle->vehicle_type == "T5 PULSE")
                    {
                        $tablehist = $vehicle_device[0]."@t5_gps";
                        $tablehistinfo = $vehicle_device[0]."@t5_info";    
                    }
                    else
                    {
						$tablehist = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_gps";
						$tablehistinfo = strtolower($vehicle_device[0])."@".strtolower($vehicle_device[1])."_info";
                    }
						
						$this->dbhist->select("gps_name,gps_time,gps_speed,gps_course"); 	
						$this->dbhist->order_by("gps_time","desc");
						$this->dbhist->group_by("gps_time");	
						$this->dbhist->where("gps_status", "A"); 						
                        $this->dbhist->where("gps_name", $vehicle_device[0]);
                        $this->dbhist->where("gps_time <=", $sdate); 
						$this->dbhist->where("gps_time !=", "0000-00-00 00:00:00");						
						$this->dbhist->limit(1);
                        $this->dbhist->from($table);
                        $q = $this->dbhist->get();
                        $rows1 = $q->result();
						
						printf("===TOTAL DATA PORT 1 : %s \r\n",count($rows1));
			
						
						$this->dbhist2->select("gps_name,gps_time,gps_speed,gps_course"); 	
						$this->dbhist2->order_by("gps_id","desc");
						$this->dbhist2->group_by("gps_time");	
						$this->dbhist2->where("gps_status", "A"); 							
                        $this->dbhist2->where("gps_name", $vehicle_device[0]);
                        $this->dbhist2->where("gps_time <=", $sdate);
						$this->dbhist2->where("gps_time !=", "0000-00-00 00:00:00");
						$this->dbhist2->limit(1);
                        $this->dbhist2->from($tablehist);
                        $q2 = $this->dbhist2->get();
                        $rows2 = $q2->result();
						printf("===TOTAL DATA HIST 2 : %s \r\n",count($rows2));
						
						$rows = array_merge($rows1, $rows2);
                        $trows = count($rows);
						//print_r($rows);
                        printf("===TOTAL DATA ALL : %s \r\n",$trows);
						
						
				}
			}
		return $rows;
	}
	
	function array_sort($array, $on, $order=SORT_ASC){

		$new_array = array();
		$sortable_array = array();

		if (count($array) > 0) {
			foreach ($array as $k => $v) {
				if (is_array($v)) {
					foreach ($v as $k2 => $v2) {
						if ($k2 == $on) {
							$sortable_array[$k] = $v2;
						}
					}
				} else {
					$sortable_array[$k] = $v;
				}
			}

			switch ($order) {
				case SORT_ASC:
					asort($sortable_array);
					break;
				case SORT_DESC:
					arsort($sortable_array);
					break;
			}

			foreach ($sortable_array as $k => $v) {
				$new_array[$k] = $array[$k];
			}
		}

		return $new_array;
	}
	
	function getDistance($latitude1, $longitude1, $latitude2, $longitude2) 
	{  
	  $earth_radius = 6371;

	  $dLat = deg2rad($latitude2 - $latitude1);  
	  $dLon = deg2rad($longitude2 - $longitude1);  

	  $a = sin($dLat/2) * sin($dLat/2) + cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * sin($dLon/2) * sin($dLon/2);  
	  $c = 2 * asin(sqrt($a));  
	  $d = $earth_radius * $c;  
		
	  return $d;  
	}
	
	function getDistance_manual($latitude1="", $longitude1="", $latitude2="", $longitude2="") 
	{  
	  $earth_radius = 6371;

	  $dLat = deg2rad($latitude2 - $latitude1);  
	  $dLon = deg2rad($longitude2 - $longitude1);  

	  $a = sin($dLat/2) * sin($dLat/2) + cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * sin($dLon/2) * sin($dLon/2);  
	  $c = 2 * asin(sqrt($a));  
	  $d = $earth_radius * $c;  
		$data =  round($d,2);
		
		  printf("===RESULT : %s \r\n",$data);
	}
	
	function getDistance_master($location){
	
		$this->db = $this->load->database("webtracking_ts",true);
		$this->db->where("distance_status", 1);
		$this->db->where("distance_name", $location);
		$q = $this->db->get("ts_distance");
		$rows = $q->row();
		$total_rows = count($rows);
		
		if($total_rows > 0){
			$distance_value = $rows->distance_value;
			$skip_km = 0;
		}else{
			$skip_km = 1;
			$distance_value = 0;
		}
		
		return $distance_value."|".$skip_km;
		
	}
	
	//pecahan dari move (low)
	function getOperational_bylocation_idle($deviceid,$startdate,$enddate,$dbtable_location){
	
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_view,location_report_location,location_report_jalur");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_vehicle_device", $deviceid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location_idle");
		$this->dbreport->where("location_report_speed", 0);
		$this->dbreport->like("location_report_location", "KM");
		$this->dbreport->where("location_report_location <>", "POOL TMS");
		$this->dbreport->where("location_report_jalur <>", "");
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		if(count($rows_loc)>0){
			
			
			for($x=0;$x<count($rows_loc);$x++)
			{
				$norut = $x+1;
				printf("===DATA LOCATION IDLE ke %s of %s \r\n", $norut, $total_loc);
				$id_report_loc = $rows_loc[$x]->location_report_id;
				
				if($norut != $total_loc){
					$jalurnext = $rows_loc[$x+1]->location_report_jalur;
					$jalurcurrent = $rows_loc[$x]->location_report_jalur;
					
					$locationnext = $rows_loc[$x+1]->location_report_location;
					$locationcurrent = $rows_loc[$x]->location_report_location;
					
					$timenext = strtotime($rows_loc[$x+1]->location_report_gps_time);
					$timecurrent = strtotime($rows_loc[$x]->location_report_gps_time);
					
					$currentposition = $jalurcurrent.",".$locationcurrent;
					$nextposition = $jalurnext.",".$locationnext;
					
					$delta = $timenext - $timecurrent; //sec
					$limit_sec = 60*60; // sec to menit
					
					if(($currentposition == $nextposition) && ($delta < $limit_sec))
					{
						$event = "A";
					}
					else
					{
						
						$event = "B";
					}
					printf("===COMPARE : %s || %s EVENT : %s \r\n",$currentposition, $nextposition, $event);
					printf("===LIMIT : %s || %s \r\n", $limit_sec, $delta);
					/* printf("===TIME CURRENT : %s \r\n",$rows_loc[$x]->location_report_gps_time);
					printf("===TIME NEXT : %s \r\n",$rows_loc[$x+1]->location_report_gps_time); */
				}
				else
				{
					$event = "B";
					printf("===END EVENT : %s \r\n",$event);
				}
				
				
				
				unset($data);
				$data_loc["location_report_view"] = "IDLE";
				$data_loc["location_report_event"] = $event;
				
				$this->dbreport->where("location_report_id", $id_report_loc);
				$this->dbreport->limit(1);	
				$this->dbreport->update($dbtable_location,$data_loc);
				
				printf("===UPDATE VIEW OK=== \r\n"); 
			}
			
			
						/* for($x=count($rows_loc)-1; $x >= 0; $x--)
							{
								if (($x+1) >= count($rows_loc))
								{
									$rowsummary[] = $rows_loc[$x];
									continue;
								}
								$jalurbefore = $rows_loc[$x+1]->location_report_jalur;
								$locbefore = $rows_loc[$x+1]->location_report_location;
								$jalurcurrent = $rows_loc[$x]->location_report_jalur;
								$loccurrent = $rows_loc[$x]->location_report_location;
								if (sprintf("%.4f,%.4f", $jalurbefore, $locbefore) != sprintf("%.4f,%.4f", $jalurcurrent, $loccurrent))
								{
									$rowsummary[] = $rows_loc[$x];
									continue;
								}
								
							}
							print_r($rowsummary); */
							
			
		}else{
			printf("===NO DATA \r\n"); 
		}
	}
	
	function getOperational_bylocation_move($deviceid,$startdate,$enddate,$dbtable_location){
	
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_view,location_report_location,location_report_jalur");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_vehicle_device", $deviceid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location");
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->like("location_report_location", "KM");
		$this->dbreport->where("location_report_location <>", "POOL TMS");
		$this->dbreport->where("location_report_jalur <>", "");
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		if(count($rows_loc)>0){
			
			
			for($x=0;$x<count($rows_loc);$x++)
			{
				$norut = $x+1;
				printf("===DATA LOCATION MOVE ke %s of %s \r\n", $norut, $total_loc);
				$id_report_loc = $rows_loc[$x]->location_report_id;
				
				if($norut != $total_loc){
					$jalurnext = $rows_loc[$x+1]->location_report_jalur;
					$jalurcurrent = $rows_loc[$x]->location_report_jalur;
					
					$locationnext = $rows_loc[$x+1]->location_report_location;
					$locationcurrent = $rows_loc[$x]->location_report_location;
					
					$timenext = strtotime($rows_loc[$x+1]->location_report_gps_time);
					$timecurrent = strtotime($rows_loc[$x]->location_report_gps_time);
					
					$currentposition = $jalurcurrent.",".$locationcurrent;
					$nextposition = $jalurnext.",".$locationnext;
					
					$delta = $timenext - $timecurrent; //sec
					$limit_sec = 60*60; // sec to menit
					
					if(($currentposition == $nextposition) && ($delta < $limit_sec))
					{
						$event = "A";
					}
					else
					{
						
						$event = "B";
					}
					printf("===COMPARE : %s || %s EVENT : %s \r\n",$currentposition, $nextposition, $event);
					printf("===LIMIT : %s || %s \r\n", $limit_sec, $delta);
					/* printf("===TIME CURRENT : %s \r\n",$rows_loc[$x]->location_report_gps_time);
					printf("===TIME NEXT : %s \r\n",$rows_loc[$x+1]->location_report_gps_time); */
				}
				else
				{
					$event = "B";
					printf("===END EVENT : %s \r\n",$event);
				}
				
				
				
				unset($data);
				$data_loc["location_report_view"] = "MOVE";
				$data_loc["location_report_event"] = $event;
				
				$this->dbreport->where("location_report_id", $id_report_loc);
				$this->dbreport->limit(1);	
				$this->dbreport->update($dbtable_location,$data_loc);
				
				printf("===UPDATE VIEW OK=== \r\n"); 
			}
							
			
		}else{
			printf("===NO DATA \r\n"); 
		}
	}
	
	function get_totalodometer_bylocation($vehicleid,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_odometer");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		
		$total_odo = 0;
		if(count($rows_loc)>0){
			$odo_first = $rows_loc[0]->location_report_odometer;	
			$odo_last = $rows_loc[$total_loc-1]->location_report_odometer;	
			$total_odo = $odo_last - $odo_first;
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		
		return $total_odo;
	}
	
	function get_totalodometer_bymaster($from,$to){
										
		$this->dbts = $this->load->database("webtracking_ts",true); 
		$this->dbts->order_by("distance_id","asc");
		$this->dbts->where("distance_from", $from);
		$this->dbts->where("distance_to", $to);
		$this->dbts->where("distance_status", 1);
		$this->dbts->where("distance_flag", 0);
		$this->dbts->from("ts_master_distance");
        $q_distance = $this->dbts->get();
        $rows_distance = $q_distance->row();
		
		//print_r($rows_distance);
		$total_distance = count($rows_distance);
		if($total_distance>0){
			$master_distance = $rows_distance->distance_value;
		}else{
			$master_distance = 0;
		}
		printf("===DISTANCE MASTER FROM %s TO %s : %s \r\n",$from,$to,$master_distance);
		return $master_distance;
	}
	
	function get_totalfuel_bylocation($vehicleid,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_fuel_data");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		
		$total_fuel = 0;
		if(count($rows_loc)>0){
			$fuel_first = $rows_loc[0]->location_report_fuel_data;	
			$fuel_last = $rows_loc[$total_loc-1]->location_report_fuel_data;	
			$total_fuel = $fuel_first - $fuel_last;
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		
		return $total_fuel;
	}
	
	function get_location_off_bylocation($vehicleid,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->like("location_report_location", "KM");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location_off");
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		$total_sec = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 5*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					return $total_sec;
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
				}
				
				$gps_stime_sec = strtotime($now_data);
				$gps_etime_sec = strtotime($next_data);
				$delta_sec = $gps_etime_sec - $gps_stime_sec;
				//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
				// data kurang dari 5 menit disimpan
				if($delta_sec <= $limit_sec){
					$total_sec = $total_sec + $delta_sec;
				}else{
					//printf("===SKIP > %s s \r\n", $limit_sec);
				} 
			}
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		return $total_sec;
	}
	
	function get_location_on_bylocation($vehicleid,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->like("location_report_location", "KM");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location");
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		$total_sec = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 5*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					return $total_sec;
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
				}
				
				$gps_stime_sec = strtotime($now_data);
				$gps_etime_sec = strtotime($next_data);
				$delta_sec = $gps_etime_sec - $gps_stime_sec;
				//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
				// data kurang dari 5 menit disimpan
				if($delta_sec <= $limit_sec){
					$total_sec = $total_sec + $delta_sec;
				}else{
					//printf("===SKIP > %s s \r\n", $limit_sec);
				} 
			}
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		return $total_sec;
	}
	
	function get_location_idle_bylocation($vehicleid,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->like("location_report_location", "KM");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location_idle");
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		$total_sec = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 5*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					return $total_sec;
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
				}
				
				$gps_stime_sec = strtotime($now_data);
				$gps_etime_sec = strtotime($next_data);
				$delta_sec = $gps_etime_sec - $gps_stime_sec;
				//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
				// data kurang dari 5 menit disimpan
				if($delta_sec <= $limit_sec){
					$total_sec = $total_sec + $delta_sec;
				}else{
					//printf("===SKIP > %s s \r\n", $limit_sec);
				} 
			}
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		return $total_sec;
	}

	function get_duration_geofence_bylocation($vehicleid,$geofence,$startdate,$enddate,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $geofence);
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		$total_sec = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 5*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					return $total_sec;
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
				}
				
				$gps_stime_sec = strtotime($now_data);
				$gps_etime_sec = strtotime($next_data);
				$delta_sec = $gps_etime_sec - $gps_stime_sec;
				//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
				// data kurang dari 5 menit disimpan
				if($delta_sec <= $limit_sec){
					$total_sec = $total_sec + $delta_sec;
				}else{
					//printf("===SKIP > %s s \r\n", $limit_sec);
				} 
			}
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		return $total_sec;
	}

	function get_avg_speed_bydate($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_data = 0;
		$speed_avg = 0;
		for($i=0; $i < $total_loc; $i++)
		{	
			$speed_data = $speed_data + $rows_loc[$i]->location_report_speed;
		}
		
		if($total_loc > 0){
			$speed_avg = $speed_data/$total_loc;
			$speed_avg = $speed_avg."|".$total_loc; 	
		}else{
			$speed_avg = $speed_avg."|".$total_loc; 
		}
					
		printf("===AVG SPEED | TOTAL DATA : %s \r\n", $speed_avg);
		return $speed_avg;
	}
	
	function get_avg_speed_bydate_allkm($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_name", "location");
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->where("location_report_speed <", 77);
		$this->dbreport->where_in("location_report_location", $km_name);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_data = 0;
		$speed_avg = 0;
		for($i=0; $i < $total_loc; $i++)
		{	
			$speed_data = $speed_data + $rows_loc[$i]->location_report_speed;
		}
		
		if($total_loc > 0){
			$speed_avg = $speed_data/$total_loc;
			$speed_avg = $speed_avg."|".$total_loc; 	
		}else{
			$speed_avg = $speed_avg."|".$total_loc; 
		}
					
		printf("===AVG SPEED | TOTAL DATA : %s \r\n", $speed_avg);
		return $speed_avg;
	}
	
	function get_avg_speed_bydate_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_data = 0;
		$speed_avg = 0;
		for($i=0; $i < $total_loc; $i++)
		{	
			$speed_data = $speed_data + $rows_loc[$i]->location_report_speed;
		}
		
		if($total_loc > 0){
			$speed_avg = $speed_data/$total_loc;
			$speed_avg = $speed_avg."|".$total_loc; 	
		}else{
			$speed_avg = $speed_avg."|".$total_loc; 
		}
					
		printf("===AVG SPEED | TOTAL DATA : %s \r\n", $speed_avg);
		return $speed_avg;
	}
	
	function get_max_speed_bydate($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);
		$speed_max = "";
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed > $speed_max){
				$speed_max = $last_speed;
			}
		}
		$speed_max = round($speed_max,0); 				
		printf("===MAX SPEED : %s \r\n", $speed_max);
		return $speed_max;
	}
	
	function get_max_speed_bydate_allkm($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_name", "location");
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->where("location_report_speed <", 77);
		$this->dbreport->where_in("location_report_location", $km_name);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);
		$speed_max = "";
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed > $speed_max){
				$speed_max = $last_speed;
			}
		}
		$speed_max = round($speed_max,0); 				
		printf("===MAX SPEED : %s \r\n", $speed_max);
		return $speed_max;
	}
	
	function get_max_speed_bydate_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);
		$speed_max = "";
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed > $speed_max){
				$speed_max = $last_speed;
			}
		}
		$speed_max = round($speed_max,0); 				
		printf("===MAX SPEED : %s \r\n", $speed_max);
		return $speed_max;
	}
	
	function get_min_speed_bydate($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_min = 999999;
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed < $speed_min){
				$speed_min = $last_speed;
			}
		}
		$speed_min = round($speed_min,0); 				
		printf("===MIN SPEED : %s \r\n", $speed_min);
		return $speed_min;
	}
	
	function get_min_speed_bydate_allkm($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_name", "location");
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->where("location_report_speed <", 77);
		$this->dbreport->where_in("location_report_location", $km_name);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_min = 999999;
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed < $speed_min){
				$speed_min = $last_speed;
			}
		}
		$speed_min = round($speed_min,0); 				
		printf("===MIN SPEED : %s \r\n", $speed_min);
		return $speed_min;
	}
	
	function get_min_speed_bydate_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
	
		$speed_min = 999999;
		for($i=0; $i < $total_loc; $i++)
		{	
			$last_speed = $rows_loc[$i]->location_report_speed;
			if($last_speed < $speed_min){
				$speed_min = $last_speed;
			}
		}
		$speed_min = round($speed_min,0); 				
		printf("===MIN SPEED : %s \r\n", $speed_min);
		return $speed_min;
	}
	
	function get_count_speed_min10($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >=", 0);
		$this->dbreport->where("location_report_speed <=", 10);
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		printf("===COUNT SPEED <= 10 : %s \r\n", $total_loc);
		return $total_loc;
	}
	
	function get_count_speed_min10_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed >=", 0);
		$this->dbreport->where("location_report_speed <=", 10);
		
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		printf("===COUNT SPEED <= 10 : %s \r\n", $total_loc);
		return $total_loc;
	}
	
	function get_count_speed_nol($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		printf("===COUNT SPEED = 0 : %s \r\n", $total_loc);
		return $total_loc;
	}
	
	function get_count_speed_nol_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_speed,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_speed", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		printf("===COUNT SPEED = 0 : %s \r\n", $total_loc);
		return $total_loc;
	}
	
	function get_count_dataoff_bydate($startdate,$enddate,$km_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location_off");
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		
		$total_sec = 0;
		$total_off = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 10*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					$total_off = $total_off + 1;
					$delta_sec = 0;
					$total_sec = $total_sec + $delta_sec;
					
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
					
					$gps_stime_sec = strtotime($now_data);
					$gps_etime_sec = strtotime($next_data);
					
					$delta_sec = $gps_etime_sec - $gps_stime_sec;
					//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
					// data kurang dari 5 menit disimpan
					if($delta_sec <= $limit_sec){
						$total_sec = $total_sec + $delta_sec;
					}else{
						//printf("===SKIP > %s s \r\n", $limit_sec);
					}
				
				}
				
				 
			}
			
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		$data_off = $total_sec."|".$total_loc;
		printf("===TOTAL SEC OFF | TOTAL OFF :  %s \r\n", $data_off);
		
		return $data_off;
	}
	
	function get_count_dataoff_bydate_rambu($startdate,$enddate,$rambu_name,$jalur,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_geofence_name");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_geofence_name", $rambu_name);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_name", "location_off");
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		
		$total_sec = 0;
		$total_off = 0;
		if(count($rows_loc)>0){
			printf("==GET DATA LOCATION... \r\n");
			for($x=0;$x<count($rows_loc);$x++)
			{
				$limit_sec = 10*60;
				//looping + compare
				$now_data = $rows_loc[$x]->location_report_gps_time;
				
				$lastdata_check = $total_loc - $x;
				if($lastdata_check == 1){
					//last row
					printf("===END DATA \r\n");
					$total_off = $total_off + 1;
					$delta_sec = 0;
					$total_sec = $total_sec + $delta_sec;
					
				}else{
					$next_data = $rows_loc[$x+1]->location_report_gps_time;
					
					$gps_stime_sec = strtotime($now_data);
					$gps_etime_sec = strtotime($next_data);
					
					$delta_sec = $gps_etime_sec - $gps_stime_sec;
					//printf("===COMPARE TIME %s %s %s \r\n", $now_data, $next_data, $delta_sec);
					// data kurang dari 5 menit disimpan
					if($delta_sec <= $limit_sec){
						$total_sec = $total_sec + $delta_sec;
					}else{
						//printf("===SKIP > %s s \r\n", $limit_sec);
					}
				
				}
				
				 
			}
			
		}else{
			printf("===NO DATA LOCATION \r\n"); 
		}
		$data_off = $total_sec."|".$total_loc;
		printf("===TOTAL SEC OFF | TOTAL OFF :  %s \r\n", $data_off);
		
		return $data_off;
	}
	
	function get_totalsignal_level_bydate($startdate,$enddate,$km_name,$user_id,$from,$to,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_gsm");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_gsm >=", $from);
		$this->dbreport->where("location_report_gsm <=", $to);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		
		printf("===COUNT DATA GSM %s \r\n", $total_loc);
		return $total_loc;
	}
	
	function get_avgsignal_bydate($startdate,$enddate,$km_name,$user_id,$dbtable_location){
										
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_gsm,location_report_location");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->where("location_report_vehicle_user_id", $user_id);
		$this->dbreport->where("location_report_gps_time >=", $startdate);
		$this->dbreport->where("location_report_gps_time <=", $enddate);
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_gsm >", 0);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->result();
		$total_loc = count($rows_loc);
		//print_r($rows_loc);exit();
		$gsm_data = 0;
		$gsm_avg = 0;
		for($i=0; $i < $total_loc; $i++)
		{	
			$gsm_data = $gsm_data + $rows_loc[$i]->location_report_gsm;
		}
		
		if($total_loc > 0){
			$gsm_avg = $gsm_data/$total_loc;
			$gsm_avg = $gsm_avg."|".$total_loc; 	
		}else{
			$gsm_avg = $gsm_avg."|".$total_loc; 
		}
					
		printf("===AVG SIGNAL | TOTAL DATA : %s \r\n", $gsm_avg);
		return $gsm_avg;
	}
	
	function get_street_bycreator($userid){
		$this->db->order_by("street_name", "asc");
		$this->db->group_by("street_name");
		$this->db->select("street_name,street_creator");
		$this->db->where("street_creator", $userid);
		$this->db->like("street_name", "KM");
		$q = $this->db->get("street");
        $rowstreet = $q->result();
		
		return $rowstreet;
	}
	
	function getall_vehicle_byuser($userid){
		$this->db->order_by("vehicle_no", "asc");
		$this->db->select("vehicle_id,vehicle_no,vehicle_device,vehicle_name");
		$this->db->where("vehicle_user_id", $userid);
		$this->db->where("vehicle_status <>", 3);
		$q = $this->db->get("vehicle");
        $rowsvehicle = $q->result();
		
		return $rowsvehicle;
	}
	
	function getall_company_bycreator($userid){
		$this->db->order_by("company_name", "asc");
		$this->db->select("company_id,company_name");
		$this->db->where("company_created_by", $userid);
		$this->db->where("company_flag", 0);
		$q = $this->db->get("company");
        $rowscompany = $q->result();
		
		return $rowscompany;
	}
	
	function get_fuel_bykm($vehicleid,$sdate,$edate,$jalur,$km_name,$dbtable_location){
		
		$this->dbreport = $this->load->database("tensor_report",true); 
		$this->dbreport->select("location_report_id,location_report_gps_time,location_report_name,location_report_location,location_report_geofence_name,location_report_coordinate,location_report_jalur,location_report_fuel_data");
		$this->dbreport->order_by("location_report_gps_time","asc");
		$this->dbreport->group_by("location_report_gps_time");
		$this->dbreport->where("location_report_location", $km_name);
		$this->dbreport->where("location_report_vehicle_id", $vehicleid);
		$this->dbreport->where("location_report_gps_time >=", $sdate);
		$this->dbreport->where("location_report_gps_time <=", $edate);
		$this->dbreport->where("location_report_jalur", $jalur);
		$this->dbreport->where("location_report_fuel_data >", 0);
		$this->dbreport->limit(1);
		$this->dbreport->from($dbtable_location);
        $q_loc = $this->dbreport->get();
        $rows_loc = $q_loc->row();
		$total_loc = count($rows_loc);
		
		//printf("===COUNT DATA FUEL %s \r\n", $total_loc);
		return $rows_loc;
	}
	
	function get_alarmname_bymaster($masterid){
		
		$list = array();
		$this->dbts = $this->load->database("webtracking_ts",true); 
		$this->dbts->order_by("alarm_name", "asc");
		$this->dbts->select("alarm_name");
		$this->dbts->where("alarm_master_id", $masterid);
		$q = $this->dbts->get("ts_alarm");
        $rows = $q->result();
		$total = count($rows);
		//print_r($rows);exit();
		for($i=0; $i < $total; $i++)
		{	
			$list[$i] = $rows[$i]->alarm_name;
		}
		
		
		return $list;
	}
	
	function get_masteralarm_bycreator($userid){
		$this->dbts = $this->load->database("webtracking_ts",true); 
		$this->dbts->select("*");
		$this->dbts->order_by("alarmmaster_name", "asc");
		$this->dbts->where("alarmmaster_creator", $userid);
		$this->dbts->where("alarmmaster_status", 1);
		$this->dbts->where("alarmmaster_flag", 0);
		$q = $this->dbts->get("ts_alarmmaster");
        $rows = $q->result();
		
		return $rows;
	}
	
	function getall_alarm_bycreator($userid){
		$list = array();
		$this->dbts = $this->load->database("webtracking_ts",true); 
		$this->dbts->select("alarm_name");
		$this->dbts->order_by("alarm_name", "asc");
		$this->dbts->where("alarm_master_id !=", "");
		$q = $this->dbts->get("ts_alarm");
        $rows = $q->result();
		$total = count($rows);
		//print_r($rows);exit();
		for($i=0; $i < $total; $i++)
		{	
			$list[$i] = $rows[$i]->alarm_name;
		}
		//print_r($list);exit();
		return $list;
	}
	
}

/* End of file welcome.php */
/* Location: ./system/application/controllers/welcome.php */
